<?xml version="1.0"?>
<doc>
    <assembly>
        <name>API</name>
    </assembly>
    <members>
        <member name="T:OECX.FuturesPairer._Action">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:OEC.API.AdministratorExtenstion">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="M:OEC.API.AdministratorExtenstion.RequestCashAdjustment(OEC.API.Account,OEC.API.Currency,System.Double)">
            <summary>
            Requests adjustment for an account cash balance. 
            </summary>
            <remarks>
            Admin use only, trader requests would be ignored.
            </remarks>
            <param name="account">Account to adjust</param>
            <param name="currency">Currency</param>
            <param name="amount">Relative amount to change (could be negative)</param>
        </member>
        <member name="M:OEC.API.AdministratorExtenstion.LockUnlockAccounts(System.Collections.Generic.IEnumerable{OEC.API.Account},System.Boolean,System.Boolean)">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="M:OEC.API.AdministratorExtenstion.LockUnlockContracts(System.Collections.Generic.IEnumerable{OEC.API.Contract},System.Boolean,System.Boolean)">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="M:OEC.API.AdministratorExtenstion.SubmitRiskLimitDetails(System.Collections.Generic.IEnumerable{OEC.API.RiskLimitDetail},System.Boolean)">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="M:OEC.API.AdministratorExtenstion.SubmitDashboard(OEC.API.DashboardMessages)">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="E:OEC.API.AdministratorExtenstion.OnFrozenRiskChanged">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="E:OEC.API.AdministratorExtenstion.OnDashboardChanged">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.AdministratorExtenstion.IsAdmin">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.AdministratorExtenstion.AdminUser">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.AdministratorExtenstion.CanLock">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.AdministratorExtenstion.DashboardMessages">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="T:OEC.API.Core">
            <summary>
            Internal functionality of the OECAPI
            </summary>
        </member>
        <member name="F:OEC.API.Core.reconnectTimeOut">
            <summary>
            Reconnect timeout in ms
            </summary>
        </member>
        <member name="F:OEC.API.Core.eventsTimeOut">
            <summary>
            Events batch interval
            </summary>
        </member>
        <member name="F:OEC.API.Core.LightReconnectAttempts">
            <summary>
            Amount of attempts allowed for light-weight reconnect
            </summary>
        </member>
        <member name="F:OEC.API.Core.m_client">
            <summary>
            Owner
            </summary>
        </member>
        <member name="F:OEC.API.Core.m_Connection">
            <summary>
            Shared with OECClient
            </summary>
        </member>
        <member name="F:OEC.API.Core.m_PriceEvents">
            <summary>
            Accumulated price events
            </summary>
        </member>
        <member name="F:OEC.API.Core.m_Accounts">
            <summary>
            Collections of API objects
            </summary>
        </member>
        <member name="M:OEC.API.Core.#ctor(OEC.API.OECClient)">
            <summary>
            Constructor
            </summary>
            <param name="client">OECClient instance</param>
        </member>
        <member name="F:OEC.API.Core.PriceHost">
            <summary>
            Price host, overrides _PriceHosts if exists
            </summary>
        </member>
        <member name="M:OEC.API.Core.Connect(System.String,System.Int32,System.String,System.String,System.Boolean,OEC.HashTools.Certificate)">
            <summary>
            Connect to the OEC Server
            </summary>
            <param name="Host">server host</param>
            <param name="Port">server port</param>
            <param name="UserName">user name</param>
            <param name="Password">password</param>
            <param name="AutoReconnect">autoreconnect enabled</param>
            <param name="Certificate">certificate of calling application</param>
        </member>
        <member name="M:OEC.API.Core.DoConnect">
            <summary>
            connect implementation
            </summary>
        </member>
        <member name="M:OEC.API.Core.Disconnect">
            <summary>
            Disconnect by user request
            </summary>
        </member>
        <member name="M:OEC.API.Core.VerifyConnection">
            <summary>
            pumps messages from the connection
            called by winforms timer to make processing and events happen in the main thread
            </summary>
        </member>
        <member name="M:OEC.API.Core.DispatchClientResponse(OEC.Protocol.ClientResponse)">
            <summary>
            Process the server response, dispatch to handler method by type
            </summary>
            <param name="response">response object</param>
        </member>
        <member name="M:OEC.API.Core.LoadClient(OEC.Protocol.APIData)">
            <summary>
            Process intialization response
            </summary>
            <param name="initdata">initialization response data</param>
        </member>
        <member name="M:OEC.API.Core.CheckEvents">
            <summary>
            check for delayed price event and raise if necesssary
            </summary>
        </member>
        <member name="M:OEC.API.Core.AddPriceEvent(OEC.API.Contract,OEC.API.Price,OEC.API.Price)">
            <summary>
            Schedule price event
            </summary>
            <param name="contract">contract to update</param>
            <param name="newprice">new price data</param>
            <param name="oldprice">old price data</param>
        </member>
        <member name="M:OEC.API.Core.ProcessRelations(System.Collections.Generic.List{OEC.Data.UserStatus},System.Boolean)">
            <summary>
            update relations (related chat users)
            </summary>
            <param name="relations">new user list</param>
            <param name="callevent">notify user?</param>
        </member>
        <member name="M:OEC.API.Core.ProcessTraders(System.Collections.Generic.List{OEC.Data.Trader},System.Boolean)">
            <summary>
            update traders/accounts
            </summary>
            <param name="traders">traders/accounts array</param>
            <param name="update">notify user?</param>
        </member>
        <member name="M:OEC.API.Core.ProcessPitGroups(System.Collections.Generic.List{OEC.Data.PitGroup},System.Boolean)">
            <summary>
            Update pit groups (routes)
            </summary>
            <param name="pitGroups">new pit groups</param>
            <param name="update">notify user?</param>
        </member>
        <member name="M:OEC.API.Core.AddOrder(OEC.Data.Order)">
            <summary>
            Creates an order from serializable order data and adds it to collection of orders
            </summary>
            <param name="orderdata">serializable order</param>
        </member>
        <member name="M:OEC.API.Core.AddOrderState(OEC.Data.State,System.Boolean)">
            <summary>
            converts a state and adds it to the order
            </summary>
            <param name="datastate">serializable state</param>
            <param name="callevent">notify user?</param>
        </member>
        <member name="M:OEC.API.Core.AddOrderState(OEC.API.Order,OEC.API.State,System.Boolean)">
            <summary>
            Adds a new state to the order
            </summary>
            <param name="Order">Order to change</param>
            <param name="NewState">New state</param>
            <param name="callevent">notify user?</param>
        </member>
        <member name="M:OEC.API.Core.AddOrderFill(OEC.Data.Fill)">
            <summary>
            Converts and adds a fill to order
            updates positions
            </summary>
            <param name="datafill">serializable fill</param>
        </member>
        <member name="M:OEC.API.Core.RefreshPositions(OEC.API.Account,OEC.API.Contract)">
            <summary>
            Recalculate positions
            </summary>
            <param name="account">Account to recalculate</param>
            <param name="contract">Position contract</param>
        </member>
        <member name="M:OEC.API.Core.StorePosition(OEC.Data.Position,System.Boolean)">
            <summary>
            Stores external position
            </summary>
            <param name="position">serializable position</param>
            <param name="raiseevent">notify user?</param>
        </member>
        <member name="M:OEC.API.Core.UpdateBalance(OEC.Data.Balance,System.Boolean)">
            <summary>
            Stores external cash balance
            </summary>
            <param name="cash">serializable cash record</param>
            <param name="raiseevent">notify user?</param>
        </member>
        <member name="M:OEC.API.Core.StorePrevPosition(OEC.Data.Position)">
            <summary>
            Store external previous position
            </summary>
            <param name="position">serializable position</param>
        </member>
        <member name="M:OEC.API.Core.FillPositions(System.Collections.Generic.List{OEC.API.Fill})">
            <summary>
            Initialize positions with all order fills
            </summary>
        </member>
        <member name="M:OEC.API.Core.AddPositionFill(OEC.API.Account,OEC.API.Contract,System.Collections.Generic.IEnumerable{OEC.API.Fill},System.Boolean,System.Boolean)">
            <summary>
            Adds a fill to position
            </summary>
            <param name="order">Order of fill</param>
            <param name="fill">fill</param>
            <param name="callevent">notify user?</param>
            <param name="recalculateAveragePosition">recalculate avg position?</param>
        </member>
        <member name="M:OEC.API.Core.StorePrice(OEC.Data.Quote)">
            <summary>
            Store external price to currency or contract
            </summary>
            <param name="response">serializable price record</param>
        </member>
        <member name="M:OEC.API.Core.ProcessPrice(OEC.API.Contract,OEC.API.Price,OEC.API.Price,OEC.API.Core.CurrencyAccountCheckList)">
            <summary>
            Update account and position stats 
            </summary>
            <param name="c">Contract</param>
            <param name="newprice">New Price</param>
            <param name="oldprice">Old Price</param>
            <param name="curs">List to accumulate changed currencies</param>
        </member>
        <member name="M:OEC.API.Core.StoreDOM(OEC.Data.DOM)">
            <summary>
            Store DOM data
            </summary>
            <param name="response">serializable DOM record</param>
        </member>
        <member name="M:OEC.API.Core.UpdateUserStatus(OEC.Data.UserStatus)">
            <summary>
            Update partner user online status
            </summary>
            <param name="response">serialized userstatus record</param>
        </member>
        <member name="M:OEC.API.Core.ProcessUserMessage(OEC.Data.ChatMessage)">
            <summary>
            decode user message and fire an event
            </summary>
            <param name="response">serialized message record</param>
        </member>
        <member name="M:OEC.API.Core.ProcessNewsMessage(OEC.Data.NewsMessage)">
            <summary>
            decode news message and fire an event
            </summary>
            <param name="response">serializable news message</param>
        </member>
        <member name="M:OEC.API.Core.ProcessError(OEC.Protocol.Error)">
            <summary>
            processes server error message
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:OEC.API.Core.ProcessTicks(OEC.Protocol.PriceResponse)">
            <summary>
            decode ticks and fire an event
            </summary>
            <param name="response">serializable ticks</param>
        </member>
        <member name="M:OEC.API.Core.ProcessTick(OEC.Protocol.PriceResponse)">
            <summary>
            decode tick and fire an event
            </summary>
            <param name="response">serializable ticks</param>
        </member>
        <member name="M:OEC.API.Core.ProcessOrderCreated(OEC.Protocol.OrderRequest)">
            <summary>
            process an order, created by someone else
            </summary>
            <param name="response">serializable order data</param>
        </member>
        <member name="M:OEC.API.Core.ProcessOrderVersion(OEC.Protocol.OrderRequest)">
            <summary>
            process new order version (possibly created by another user)
            </summary>
            <param name="response">serializable version data</param>
        </member>
        <member name="M:OEC.API.Core.ConfirmOrder(OEC.Protocol.OrderRequest)">
            <summary>
            processes confirmation response - assign IDs to the order,command and state, set timestamps
            sends cancel/modify requests awaiting order confirmation
            </summary>
            <param name="response">serializable order id data</param>
        </member>
        <member name="M:OEC.API.Core.ConfirmCommand(OEC.Protocol.OrderRequest)">
            <summary>
            Processes command confirmation message - assigns ID to the command
            </summary>
            <param name="response">serializable command id data</param>
        </member>
        <member name="M:OEC.API.Core.UpdateCommand(OEC.Protocol.OrderRequest)">
            <summary>
            processes command state and commands
            </summary>
            <param name="response">serializable command data</param>
        </member>
        <member name="M:OEC.API.Core.DoSubscription(System.Boolean,OEC.API.Contract,System.Boolean)">
            <summary>
            Perform subscription/unsubscription and reference counting for a contract
            </summary>
            <param name="subscribe">true=subscribe</param>
            <param name="contract">Contract to subscribe</param>
            <param name="permanent">Don't unsubscribe (for position subscriptions)</param>
        </member>
        <member name="M:OEC.API.Core.DoCurrencySubscription(OEC.API.Currency,System.Boolean)">
            <summary>
            Perform subscription for a currency
            </summary>
            <param name="currency">Currency to subscribe</param>
        </member>
        <member name="M:OEC.API.Core.DoDOMSubscription(OEC.API.Contract,System.Boolean)">
            <summary>
            Perform subscription/unsubscription for DOM data
            </summary>
            <param name="contract">contract</param>
            <param name="subscribe">true=subscribe</param>
        </member>
        <member name="M:OEC.API.Core.GetNextLocalOrderID">
            <summary>
            Local unique order ID generator
            </summary>
        </member>
        <member name="M:OEC.API.Core.SendSysMessage(System.Exception,System.String,System.Object[])">
            <summary>
            Send an error report to the OEC server
            </summary>
            <param name="ex">Optional exception</param>
            <param name="format">Format</param>
            <param name="args">Parameters</param>
        </member>
        <member name="M:OEC.API.Core.GetNextContractRequestID">
            <summary>
            Local unique contract request ID generator
            </summary>
        </member>
        <member name="T:OEC.API.Core.CurrencyAccountCheckList">
            <summary>
            internal list for accumulate changed currency/account pairs.
            </summary>
        </member>
        <member name="T:OEC.API.UnknownServerResponseException">
            <summary>
            Exceptions to be thrown if unknown data come from server
            </summary>
            <exclude />
        </member>
        <member name="M:OEC.API.UnknownServerResponseException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:OEC.API.UnknownServerResponseException.#ctor(System.String)">
            <summary>
            Constuctor with support of user defined message
            </summary>
            <param name="message">User defined message for exception</param>
        </member>
        <member name="T:OEC.API.ExtendedData">
            <summary>
            Order extended data.
            </summary>
        </member>
        <member name="M:OEC.API.ExtendedData.Clone">
            <summary>
            Clones extended data.
            </summary>
        </member>
        <member name="T:OEC.API.IcebergData">
            <summary>
            Extended data for iceberg orders.
            </summary>
        </member>
        <member name="M:OEC.API.IcebergData.Clone">
            <summary>
            Clones iceberg data.
            </summary>
        </member>
        <member name="M:OEC.API.IcebergData.ToString">
            <summary>
            Returns a string that represents the current instance. 
            </summary>
        </member>
        <member name="P:OEC.API.IcebergData.ShowVolume">
            <summary>
            Show volume for iceberg order.
            </summary>
        </member>
        <member name="T:OEC.API.TrailingStopData">
            <summary>
            Trailing-stop extended data.
            </summary>
        </member>
        <member name="M:OEC.API.TrailingStopData.Clone">
            <summary>
            Clones Trailing Stop data.
            </summary>
        </member>
        <member name="M:OEC.API.TrailingStopData.ToString">
            <summary>
            Returns a string that represents the current instance. 
            </summary>
        </member>
        <member name="P:OEC.API.TrailingStopData.ReferencePrice">
            <summary>
            Reference value.
            </summary>
        </member>
        <member name="P:OEC.API.TrailingStopData.Delta">
            <summary>
            Delta value.
            </summary>
        </member>
        <member name="T:OEC.API.EquityTrailingStopData">
            <summary>
            Trailing-stop extended data.
            </summary>
            <exclude />
        </member>
        <member name="M:OEC.API.EquityTrailingStopData.Clone">
            <summary>
            Clones Trailing Stop data.
            </summary>
        </member>
        <member name="M:OEC.API.EquityTrailingStopData.ToString">
            <summary>
            Returns a string that represents the current instance. 
            </summary>
        </member>
        <member name="P:OEC.API.EquityTrailingStopData.Amount">
            <summary>
            Delta value.
            </summary>
        </member>
        <member name="P:OEC.API.EquityTrailingStopData.IsPercentAmount">
            <summary>
            Indicates if delta is in percent
            </summary>
        </member>
        <member name="P:OEC.API.EquityTrailingStopData.TriggerType">
            <summary>
            Trigger type value
            </summary>
        </member>
        <member name="T:OEC.API.VolumeBasedStopData">
            <summary>
            Volume-Based Stop extended data.
            </summary>
        </member>
        <member name="M:OEC.API.VolumeBasedStopData.Clone">
            <summary>
            Clones Volume-based stop data.
            </summary>
        </member>
        <member name="M:OEC.API.VolumeBasedStopData.ToString">
            <summary>
            Returns a string that represents the current instance. 
            </summary>
        </member>
        <member name="P:OEC.API.VolumeBasedStopData.TriggerVolume">
            <summary>
            Trigger volume.
            </summary>
        </member>
        <member name="T:OEC.API.GtxExtendedData">
            <summary>
            GTX-related extended order data
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.GtxExtendedData.MinQty">
            <summary>
            Partial Fill Restriction: order may only be matched in amounts of at least this quantity of CCY1
            </summary>
        </member>
        <member name="P:OEC.API.GtxExtendedData.MaxFloor">
            <summary>
            Reserve Size: only display this amount of CCY1. Upon any partial fill the amount will be replenished up to this amount until the full order quantity is exhausted
            </summary>
        </member>
        <member name="P:OEC.API.GtxExtendedData.MatchIncrement">
            <summary>
            Partial Fill Restriction: only allow partial fills in multiples of this amount
            </summary>
        </member>
        <member name="P:OEC.API.GtxExtendedData.PegScope">
            <summary>
            The scope of the “related to” price of the peg
            </summary>
        </member>
        <member name="P:OEC.API.GtxExtendedData.TriggerPriceType">
            <summary>
            Identifies which side of the book will trigger a stop order
            </summary>
        </member>
        <member name="P:OEC.API.GtxExtendedData.RightHand">
            <summary>
            Treats order quantity as CCY2
            </summary>
        </member>
        <member name="P:OEC.API.GtxExtendedData.AvgPxLimit">
            <summary>
            If AveragePriceLimit, then partial fills may occur at prices beyond the requested limit price if earlier partial fills occurred at a better price, as long as the overall average filled price remains better than the requested limit price
            </summary>
        </member>
        <member name="T:OEC.API.FillExtendedData">
            <summary>
            </summary>
        </member>
        <member name="M:OEC.API.FillExtendedData.Clone">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.FillExtendedData.Fill">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.FillExtendedData.OsmChild">
            <summary>
            </summary>
        </member>
        <member name="T:OEC.API.FolderInfo">
            <summary>
            Holds application folders data
            </summary>
            <exclude />
        </member>
        <member name="M:OEC.API.FolderInfo.InitializeProfileFolders(System.String,System.String,System.String)">
            <summary>
            Initialize API with profile folders data (Application title, type and company name)
            </summary>
            <param name="appTitle">Application Title</param>
            <param name="appType">Application Type</param>
            <param name="companyName">Company Name</param>
        </member>
        <member name="P:OEC.API.FolderInfo.AppDataFolder">
            <summary>
            Gets Application Data Folder 
            </summary>
        </member>
        <member name="P:OEC.API.FolderInfo.AppLocalDataFolder">
            <summary>
            Gets Application Local Data Folder
            </summary>
        </member>
        <member name="T:OEC.API.Monitoring.BalanceGroup">
            <summary>
            <exclude />
            </summary>
        </member>
        <member name="T:OEC.API.Monitoring.BalanceGroupList">
            <summary>
            <exclude />
            </summary>
        </member>
        <member name="T:OEC.API.Bases.BasicList`1">
            <summary>
            Base class for collections of unsorted non-keyed objects
            </summary>
            <typeparam name="T">type of object</typeparam>
        </member>
        <member name="M:OEC.API.Bases.BasicList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the internal list 
            </summary>
            <param name="comparison">user provided comparison procedure</param>
        </member>
        <member name="P:OEC.API.Bases.BasicList`1.Item(System.Int32)">
            <summary>
            Gets an item from a collection by index
            </summary>
            <param name="index">Index</param>
            <returns>Collection item</returns>
        </member>
        <member name="P:OEC.API.Bases.BasicList`1.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="T:OEC.API.Monitoring.BalanceGroupItem">
            <summary>
            <exclude />
            </summary>
        </member>
        <member name="T:OEC.API.Monitoring.BalanceGroupItemList">
            <summary>
            <exclude />
            </summary>
        </member>
        <member name="T:OEC.API.Monitoring.Monitor">
            <summary>
            <exclude />
            </summary>
        </member>
        <member name="E:OEC.API.Monitoring.Monitor.OnRuleAdded">
            <summary>
            <exclude />
            </summary>
        </member>
        <member name="E:OEC.API.Monitoring.Monitor.OnRuleReplaced">
            <summary>
            <exclude />
            </summary>
        </member>
        <member name="E:OEC.API.Monitoring.Monitor.OnRuleRemoved">
            <summary>
            <exclude />
            </summary>
        </member>
        <member name="E:OEC.API.Monitoring.Monitor.OnSignalAdded">
            <summary>
            <exclude />
            </summary>
        </member>
        <member name="E:OEC.API.Monitoring.Monitor.OnSignalChanged">
            <summary>
            <exclude />
            </summary>
        </member>
        <member name="T:OEC.API.Monitoring.OnRuleEvent">
            <summary>
            <exclude />
            </summary>
        </member>
        <member name="T:OEC.API.Monitoring.OnSignalEvent">
            <summary>
            <exclude />
            </summary>
        </member>
        <member name="T:OEC.API.Monitoring.CompletionResult">
            <summary>
            <exclude />
            </summary>
        </member>
        <member name="T:OEC.API.Monitoring.Rule">
            <summary>
            <exclude />
            </summary>
        </member>
        <member name="T:OEC.API.Bases.NamedObject">
            <summary>
            Base class for objects that have unique integer ID and name.
            </summary>
            <remarks>
            Special case for <see cref="T:OEC.API.Bases.IDObject"/> with support of <see cref="T:OEC.API.Bases.INamed"/>
            </remarks>
        </member>
        <member name="T:OEC.API.Bases.IDObject">
            <summary>
            Base class for objects with integer unique key
            </summary>
        </member>
        <member name="T:OEC.API.Bases.IDObject`1">
            <summary>
            Base class for objects with unique key
            </summary>
            <typeparam name="T">type of unique key</typeparam>
        </member>
        <member name="M:OEC.API.Bases.IDObject`1.#ctor(`0)">
            <summary>
            initializes the object with key value
            </summary>
            <param name="ID">Unique key value</param>
        </member>
        <member name="F:OEC.API.Bases.IDObject`1.DefaultComparer">
            <summary>
            Cached default comparer
            </summary>
        </member>
        <member name="P:OEC.API.Bases.IDObject`1.ID">
            <summary>
            Unique key value
            </summary>
            <remarks>
            This value used as unique key in collections
            </remarks>
        </member>
        <member name="M:OEC.API.Bases.IDObject.#ctor(System.Int32)">
            <summary>
            Initializes the object the integer key value
            </summary>
            <param name="ID">Unique key value</param>
        </member>
        <member name="M:OEC.API.Bases.IDObject.GetHashCode">
            <summary>
            Hash code overriden to return ID
            </summary>
        </member>
        <member name="T:OEC.API.Bases.INamed">
            <summary>
            Interface for objects that provide name as a string key. See <see cref="T:OEC.API.Bases.IKeyed`1"/>.
            </summary>
        </member>
        <member name="T:OEC.API.Bases.IKeyed`1">
            <summary>
            Interface for objects that can provide key value, for sort or search operations
            </summary>
            <typeparam name="T">Key type</typeparam>
        </member>
        <member name="P:OEC.API.Bases.IKeyed`1.Key">
            <summary>
            Key value
            </summary>
        </member>
        <member name="M:OEC.API.Bases.NamedObject.#ctor(System.Int32,System.String)">
            <summary>
            Initializes new object with ID and name
            </summary>
            <param name="id">ID value</param>
            <param name="name">Name value</param>
        </member>
        <member name="M:OEC.API.Bases.NamedObject.ToString">
            <summary>
            Gets name of object.
            </summary>
            <returns>Name of object</returns>
        </member>
        <member name="P:OEC.API.Bases.NamedObject.Name">
            <summary>
            Name of object
            </summary>
        </member>
        <member name="T:OEC.API.Monitoring.RuleList">
            <summary>
            <exclude />
            </summary>
        </member>
        <member name="T:OEC.API.Bases.NamedList`1">
            <summary>
            Read-only dual indexed collection of any <see cref="T:OEC.API.Bases.NamedObject">named</see> objects
            </summary>
            <remarks>
            Special case of <see cref="T:OEC.API.Bases.IDKeyList`3"/> for NamedObject descendants.
            </remarks>
            <typeparam name="T">Item type, must be inherited from <see cref="T:OEC.API.Bases.NamedObject"/></typeparam>
        </member>
        <member name="T:OEC.API.Bases.IDKeyList`3">
            <summary>
            Base class for dual-indexed collections
            </summary>
            <remarks>
            Base class for collections that can be accessed by primary key (ID) 
            or by secondary key (Name). Also provides a list of items sorted by secondary key.
            </remarks>
            <typeparam name="Key">Primary key type</typeparam>
            <typeparam name="SortKey">Secondary key type</typeparam>
            <typeparam name="T">Item type, must be inherited from <see cref="T:OEC.API.Bases.IDObject`1"/> and support <see cref="T:OEC.API.Bases.IKeyed`1"/>
            </typeparam>
        </member>
        <member name="T:OEC.API.Bases.IDList`2">
            <summary>
            Base class for collections of items that have unique key.
            Item type should be descendant of <see cref="T:OEC.API.Bases.IDObject`1"/>.
            </summary>
            <typeparam name="K">Key type</typeparam>
            <typeparam name="T">Item type</typeparam>
        </member>
        <member name="T:OEC.API.Bases.KeyedList`2">
            <summary>
            Base class for ordered collections of objects with unique key
            </summary>
            <typeparam name="Key">Key type</typeparam>
            <typeparam name="T">Item type</typeparam>
        </member>
        <member name="F:OEC.API.Bases.KeyedList`2.m_List">
            <summary>
            Sorted table for indexed access
            </summary>
        </member>
        <member name="F:OEC.API.Bases.KeyedList`2.m_Dic">
            <summary>
            Hash table for items
            </summary>
        </member>
        <member name="M:OEC.API.Bases.KeyedList`2.#ctor">
            <summary>
            Construct the empty collection
            </summary>
        </member>
        <member name="M:OEC.API.Bases.KeyedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Construct the collection with specific key comparer
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:OEC.API.Bases.KeyedList`2.ContainsKey(`0)">
            <summary>
            Determines whether the collection contains a specific key. 
            </summary>
            <param name="key">Key value</param>
            <returns>true, if object exists</returns>
        </member>
        <member name="M:OEC.API.Bases.KeyedList`2.GetByIndex(System.Int32)">
            <summary>
            Gets the item by zero-based index
            </summary>
            <param name="Index"></param>
            <returns></returns>
        </member>
        <member name="P:OEC.API.Bases.KeyedList`2.List">
            <summary>
            Ordered list, created on demand
            </summary>
        </member>
        <member name="P:OEC.API.Bases.KeyedList`2.Item(`0)">
            <summary>
            Gets an item from a collection by it's key value
            </summary>
            <param name="key">unique key of object</param>
            <returns>found object or default value (null for reference types)</returns>
        </member>
        <member name="P:OEC.API.Bases.KeyedList`2.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:OEC.API.Bases.KeyedList`2.Keys">
            <summary>
            Gets a list of keys available in the collection
            </summary>
        </member>
        <member name="P:OEC.API.Bases.KeyedList`2.Values">
            <summary>
            Gets the list of objects available in the collection
            </summary>
        </member>
        <member name="P:OEC.API.Bases.KeyedList`2.First">
            <summary>
            Gets the first item in collection or default value, if no items available
            </summary>
        </member>
        <member name="P:OEC.API.Bases.KeyedList`2.Last">
            <summary>
            Gets the last item in collection or default value, if no items available
            </summary>
        </member>
        <member name="M:OEC.API.Bases.IDList`2.#ctor">
            <summary>
            Constructs an empty collection
            </summary>
        </member>
        <member name="M:OEC.API.Bases.IDList`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Constructs a collection with given comparer
            </summary>
            <param name="comparer">Key comparer</param>
        </member>
        <member name="F:OEC.API.Bases.IDKeyList`3.m_SortedList">
            <summary>
            secondary index
            </summary>
        </member>
        <member name="M:OEC.API.Bases.IDKeyList`3.#ctor">
            <summary>
            Consructs an empty collection
            </summary>
        </member>
        <member name="M:OEC.API.Bases.IDKeyList`3.#ctor(System.Collections.Generic.IComparer{`1})">
            <summary>
            Constructs an empty collection with specified comparer
            </summary>
            <param name="comparer">key comparer used to sort items</param>
        </member>
        <member name="P:OEC.API.Bases.IDKeyList`3.Item(`1)">
            <summary>
            Gets an item from a collection by it's secondary key value
            </summary>
            <param name="key">Secondary key value</param>
            <returns>Found item or null</returns>
        </member>
        <member name="P:OEC.API.Bases.IDKeyList`3.Values">
            <summary>
            Gets a list of items ordered by secondary key
            </summary>
        </member>
        <member name="M:OEC.API.Bases.NamedList`1.#ctor">
            <summary>
            Initializes a new collection.
            </summary>		
        </member>
        <member name="M:OEC.API.Bases.NamedList`1.#ctor(System.Collections.Generic.IComparer{System.String})">
            <summary>
            Initializes a new collection with specified comparer
            </summary>
            <param name="comparer">key comparer used to sort items</param>		
        </member>
        <member name="T:OEC.API.Monitoring.TriggerCondition">
            <summary>
            <exclude />
            </summary>
        </member>
        <member name="T:OEC.API.Monitoring.RuleScope">
            <summary>
            <exclude />
            </summary>
        </member>
        <member name="T:OEC.API.Monitoring.ExitMethodDescription">
            <summary>
            <exclude />
            </summary>
        </member>
        <member name="T:OEC.API.Monitoring.ExitStrategyDescription">
            <summary>
            <exclude />
            </summary>
        </member>
        <member name="T:OEC.API.Monitoring.Signal">
            <summary>
            <exclude />
            </summary>
        </member>
        <member name="T:OEC.API.Monitoring.SignalList">
            <summary>
            <exclude />
            </summary>
        </member>
        <member name="T:OEC.API.Bases.IDList`1">
            <summary>
            Base class for collections of items with integer unique key
            </summary>
            <remarks>
            Special case of <see cref="T:OEC.API.Bases.IDList`2"/>.
            </remarks>
            <typeparam name="T">Item type, must be inherited from <see cref="T:OEC.API.Bases.IDObject`1"/></typeparam>
        </member>
        <member name="M:OEC.API.Bases.IDList`1.#ctor">
            <summary>
            Constructs an empty collection
            </summary>
        </member>
        <member name="T:OEC.API.AllocationBlockItem">
            <summary>
            AllocationBlockItem element
            </summary>
        </member>
        <member name="P:OEC.API.AllocationBlockItem.Lots">
            <summary>
            Item Lots
            </summary>
        </member>
        <member name="P:OEC.API.AllocationBlockItem.Account">
            <summary>
            Item Account
            </summary>
        </member>
        <member name="P:OEC.API.AllocationBlockItem.Valid">
            <summary>
            True - if allocation block item has Lots. 
            </summary>
        </member>
        <member name="P:OEC.API.AllocationBlockItem.Index">
            <summary>
            Index of item in the allocation block
            </summary>
        </member>
        <member name="T:OEC.API.AllocationBlockItems">
            <summary>
            Represents AllocationBlock items collection
            </summary>
        </member>
        <member name="M:OEC.API.AllocationBlockItems.Remove(OEC.API.AllocationBlockItem)">
            <summary>
            Removes an item from a collection.
            </summary>
            <param name="item">Item to remove</param>
        </member>
        <member name="M:OEC.API.AllocationBlockItems.Clear">
            <summary>
            Clears the list
            </summary>
        </member>
        <member name="M:OEC.API.AllocationBlockItems.Move(System.Int32,System.Boolean)">
            <summary>
            Move item up or down one row
            </summary>
            <param name="index">Index of item</param>
            <param name="up">true if moving up</param>
        </member>
        <member name="M:OEC.API.AllocationBlockItems.IndexOf(OEC.API.AllocationBlockItem)">
            <summary>
            Index of item in AB
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:OEC.API.AllocationBlockItems.GetEnumerator">
            <summary>
            IEnumerable implementation
            </summary>
            <returns></returns>
        </member>
        <member name="T:OEC.API.AllocationBlock">
            <summary>
            represent AllocationBlock 
            </summary>
        </member>
        <member name="M:OEC.API.AllocationBlock.#ctor(System.String,OEC.Data.AllocationRule)">
            <summary>
            Constructs Allocation Block instance with given name and rule
            </summary>
            <param name="name">New AB name</param>
            <param name="rule">New AB rule</param>
        </member>
        <member name="M:OEC.API.AllocationBlock.Set(System.String,OEC.Data.AllocationRule)">
            <summary>
            Changes name and rule
            </summary>
            <param name="name">New name</param>
            <param name="rule">New rule</param>
        </member>
        <member name="M:OEC.API.AllocationBlock.Add(OEC.API.Account,System.Int32)">
            <summary>
            Add account to allocation block
            </summary>
            <param name="account">Account</param>
            <param name="lots">Allocated lots</param>
            <returns>new AB item</returns>
        </member>
        <member name="M:OEC.API.AllocationBlock.Insert(System.Int32,OEC.API.Account,System.Int32)">
            <summary>
            Inserts account at given position
            </summary>
            <param name="position"></param>
            <param name="account"></param>
            <param name="lots"></param>
            <returns></returns>
        </member>
        <member name="P:OEC.API.AllocationBlock.Rule">
            <summary>
            Allocation Block Rule
            </summary>
        </member>
        <member name="P:OEC.API.AllocationBlock.Items">
            <summary>
            Items - Account and Account parameters (Lots etc.)
            </summary>
        </member>
        <member name="P:OEC.API.AllocationBlock.Valid">
            <summary>
            True - if allocation block has at least one account item and all account items have Lots. 
            </summary>
        </member>
        <member name="P:OEC.API.AllocationBlock.TotalBalance">
            <summary>
            Account balance and profit/loss data - total for all currencies
            </summary>
            <remarks>
            Balances and P/L values are converted to USD using <see cref="T:OEC.API.Currency"/> convertion rate.
            Detailed balances per each currency can be found in <see cref="P:OEC.API.AllocationBlock.Balances"/> property.
            </remarks>
            <seealso cref="T:OEC.API.Balance"/>
            <seealso cref="P:OEC.API.AllocationBlock.Balances"/>
        </member>
        <member name="P:OEC.API.AllocationBlock.TotalLots">
            <summary>
            Total allocated lots 
            </summary>
            <remarks>
            Sum of allocated <see cref="P:OEC.API.AllocationBlockItem.Lots"/> for each account in this AB
            </remarks>
        </member>
        <member name="P:OEC.API.AllocationBlock.Balances">
            <summary>
            Balances of accounts
            </summary>
        </member>
        <member name="P:OEC.API.AllocationBlock.Warning">
            <summary>
            Contains additional information in case the allocation block was created with warnings
            </summary>
        </member>
        <member name="T:OEC.API.AllocationBlockList">
            <summary>
            List of allocation blocks
            </summary>
        </member>
        <member name="M:OEC.API.AllocationBlockList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OEC.API.AllocationBlockList.Add(System.String,OEC.Data.AllocationRule)">
            <summary>
            Creates an allocation block and adds it to list
            </summary>
            <param name="name">New AB name</param>
            <param name="rule">new AB rule</param>
            <returns>Newly created AB</returns>
        </member>
        <member name="M:OEC.API.AllocationBlockList.Add(OEC.API.AllocationBlock)">
            <summary>
            Adds existing allocation block to list
            </summary>
            <param name="block">Existing AB</param>
        </member>
        <member name="T:OEC.API.Account">
            <summary>
            Customer account
            </summary>
            <remarks>
            A trader can have one or more accounts. For each of those accounts, 
            the Account instance holds information about open and closed positions 
            (see <see cref="P:OEC.API.Account.AvgPositions"/>), position details (see <see cref="P:OEC.API.Account.DetailedPositions"/>)
            cash balance(s) and calculated profit/loss values (see <see cref="P:OEC.API.Account.Balances"/> and <see cref="P:OEC.API.Account.TotalBalance"/>).
            <br/>
            All trader accounts are available in the <see cref="T:OEC.API.OECClient"/>.<see cref="P:OEC.API.OECClient.Accounts"/> collection.
            </remarks>
        </member>
        <member name="P:OEC.API.Account.Spec">
            <summary>
            Account Number
            </summary>
            <remarks>
            Account number is a unique string representing a customer account.
            </remarks>
        </member>
        <member name="P:OEC.API.Account.CH">
            <summary>
            Clearing house 
            </summary>
        </member>
        <member name="P:OEC.API.Account.Type">
            <summary>
            Type of account
            </summary>
        </member>
        <member name="P:OEC.API.Account.ReadOnly">
            <summary>
            Indicates that account is read only
            </summary>
        </member>
        <member name="P:OEC.API.Account.AvgPositions">
            <summary>
            Average positions stats per symbol - see <see cref="T:OEC.API.Position"/>.
            </summary>
            <remarks>
            Average positions stats are calculated for current trading session and stored in AvgPositions - one item per contract.
            <see cref="T:OEC.API.Position"/> items in the list have previous day position, 
            total contracts bought and sold as well as buy/sell prices, current net position
            and profit/loss information.
            </remarks>
        </member>
        <member name="P:OEC.API.Account.DetailedPositions">
            <summary>
            Detailed account/contract <see cref="T:OEC.API.Position"/> items.
            </summary>
            <remarks>
            In this collection, a list of atomic positions opened and closed during the trading session 
            is available per each contract. The position list can hold multiple closed positions, open position (if any) 
            is the last item in the list.<br/>
            Detailed positions contains bought/sold information and profit/loss information 
            - realized for closed positions, theoretical per open ones.
            </remarks>
            <seealso cref="T:OEC.API.Position"/>
        </member>
        <member name="P:OEC.API.Account.Trader">
            <summary>
            <see cref="T:OEC.API.Trader"/> who owns this account or null
            </summary>
        </member>
        <member name="P:OEC.API.Account.Balances">
            <summary>
             Account balance and profit/loss data (see <see cref="T:OEC.API.Balance"/>) per each <see cref="T:OEC.API.Currency"/> available 
            for the account.
            </summary>
            <remarks>
            Balances collection holds balance and p/l data for USD currency and also for any other currency with non-zero balance or p/l.
            Sum of all values for all currencies can be found in <see cref="P:OEC.API.Account.TotalBalance"/> property.
            </remarks>
            <seealso cref="T:OEC.API.Balance"/>
            <seealso cref="P:OEC.API.Account.TotalBalance"/>
        </member>
        <member name="P:OEC.API.Account.TotalBalance">
            <summary>
            Account balance and profit/loss data - total for all currencies
            </summary>
            <remarks>
            Balances and P/L values are converted to USD using <see cref="T:OEC.API.Currency"/> convertion rate.
            Detailed balances per each currency can be found in <see cref="P:OEC.API.Account.Balances"/> property.
            </remarks>
            <seealso cref="T:OEC.API.Balance"/>
            <seealso cref="P:OEC.API.Account.Balances"/>
        </member>
        <member name="P:OEC.API.Account.RiskLimitsType">
            <summary>
            Type of risk limitation for account
            </summary>
        </member>
        <member name="P:OEC.API.Account.FrozenRisks">
            <exclude />
        </member>
        <member name="P:OEC.API.Account.CompoundPositionGroups">
            <summary>
            List of compound position groups
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.Account.PostAllocationPermission">
            <summary>
            Post-allocation is allowed and required, if this property is not None
            </summary>
            <exclude/>
        </member>
        <member name="P:OEC.API.Account.Root">
            <summary>
            Root account, if this account is a subaccount
            </summary>
        </member>
        <member name="P:OEC.API.Account.Subaccounts">
            <summary>
            List of subaccounts
            </summary>
        </member>
        <member name="P:OEC.API.Account.RiskProviderId">
            <exclude />
        </member>
        <member name="T:OEC.API.AccountList">
            <summary>
            List of accounts - see <see cref="P:OEC.API.OECClient.Accounts">OECClient.Accounts</see>.
            </summary>
            <remarks>
            List indexed by Account.ID and Account.Spec fields.
            </remarks>
        </member>
        <member name="T:OEC.API.ClearingHouse">
            <summary>
            Clearing house
            </summary>
        </member>
        <member name="P:OEC.API.ClearingHouse.IsGTX">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="T:OEC.API.ClearingHouseList">
            <summary>
            List of clearing houses - see <see cref="P:OEC.API.OECClient.ClearingHouses"/>.
            </summary>
            <seealso cref="T:OEC.API.ClearingHouse"/>
        </member>
        <member name="T:OEC.API.AvgPositionList">
            <summary>
            List of average positions for account by contract - see <see cref="P:OEC.API.Account.AvgPositions">Account.AvgPositions</see> for details.
            </summary>
        </member>
        <member name="T:OEC.API.PositionIDList">
            <summary>
            List of <see cref="T:OEC.API.Position">Positions</see> indexed by <see cref="T:OEC.API.Contract"/>. See <see cref="T:OEC.API.AvgPositionList"/>
            </summary>
        </member>
        <member name="T:OEC.API.Balance">
            <summary>
            Account cash balance and profit/loss summary.
            </summary>
            <remarks>
            This class used to represent account balance and p/l values, for a given currency, or total converted values
            Account P/L information calculated as a sum of P/L per each position.
            </remarks>
            <seealso cref="F:OEC.API.Balance.Account"/>
        </member>
        <member name="F:OEC.API.Balance.Spec">
            <summary>
            Account spec, for compatibility
            </summary>
        </member>
        <member name="F:OEC.API.Balance.Account">
            <summary>
            Account, associated with Balance. 
            </summary>
        </member>
        <member name="P:OEC.API.Balance.Currency">
            <summary>
            <see cref="T:OEC.API.Currency"/> of this balance part.
            </summary>
            <remarks>
            Contains null for total (summary) balance.
            </remarks>
        </member>
        <member name="P:OEC.API.Balance.RealizedPnL">
            <summary>
            Profit/Loss gained from all the positions closed during the trading day
            </summary>
        </member>
        <member name="P:OEC.API.Balance.OpenPnL">
            <summary>
            Theoretical Profit/Loss of all the open positions.
            </summary>
            <remarks>
            Calculated using avg. position price versus <see cref="T:OEC.API.Contract"/> last trade price.
            </remarks>
        </member>
        <member name="P:OEC.API.Balance.SettlePnL">
            <summary>
            Settlement Profit/Loss for all the open positions.
            </summary>
            <remarks>
            Calculated using avg. position price versus current (yesterday) settlement price
            </remarks>
        </member>
        <member name="P:OEC.API.Balance.HypoPnL">
            <exclude />
        </member>
        <member name="P:OEC.API.Balance.NetLiquidatingValue">
            <summary>
            Net Liquidating Value calculated as account cash balance + <see cref="P:OEC.API.Balance.SettlePnL"/>
            </summary>
        </member>
        <member name="P:OEC.API.Balance.NetLiq">
            <summary>
            Net Liq calculated as account Cash  + Open P/L + Cost Basis
            </summary>
        </member>
        <member name="P:OEC.API.Balance.Cash">
            <summary>
            Cash
            </summary>
        </member>
        <member name="P:OEC.API.Balance.MaintenanceMargin">
            <summary>
            Summary Maintenance Margin for all open positions
            </summary>
        </member>
        <member name="P:OEC.API.Balance.InitialMargin">
            <summary>
            Summary Initial Margin for all open positions
            </summary>
        </member>
        <member name="P:OEC.API.Balance.PortfolioMargin">
            <summary>
            Portfolio Margining
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.Balance.FutPnL">
            <summary>
            Futures Profit/Loss
            </summary>
        </member>
        <member name="P:OEC.API.Balance.OptPnL">
            <summary>
            Options Profit/Loss
            </summary>
        </member>
        <member name="P:OEC.API.Balance.EquityPnL">
            <summary>
            Equity Profit/Loss
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.Balance.LongCallOptionsValue">
            <summary>
            Long Call Options Value
            </summary>
        </member>
        <member name="P:OEC.API.Balance.LongPutOptionsValue">
            <summary>
            Long Put Options Value
            </summary>
        </member>
        <member name="P:OEC.API.Balance.ShortCallOptionsValue">
            <summary>
            Short Call Options Value
            </summary>
        </member>
        <member name="P:OEC.API.Balance.ShortPutOptionsValue">
            <summary>
            Short Put Options Value
            </summary>
        </member>
        <member name="P:OEC.API.Balance.CostBasis">
            <summary>
            Cost Basis of Options
            </summary>
        </member>
        <member name="T:OEC.API.BalanceList">
            <summary>
            List of <see cref="T:OEC.API.Balance"/> items - see <see cref="P:OEC.API.Account.Balances">Account.Balances</see>.
            </summary>
            <remarks>
            The list is indexed by <see cref="T:OEC.API.Currency"/> 
            </remarks>
        </member>
        <member name="T:OEC.API.BarDescription">
            <summary>
            
            </summary>
            <exclude />
        </member>
        <member name="T:OEC.API.BaseContract">
            <summary>
            Base Contract - parent of contracts with base symbol and different expiration dates.
            </summary>
            <remarks>
            BaseContract instance holds common parameters shared among the contracts with same symbol 
            and different month/year.
            </remarks>
            <seealso cref="T:OEC.API.Contract"/>
            <seealso cref="P:OEC.API.BaseContract.ContractGroup"/>
        </member>
        <member name="F:OEC.API.BaseContract.m_Contracts">
            <summary>
            internal list of underlying contracts
            </summary>
        </member>
        <member name="M:OEC.API.BaseContract.#ctor(OEC.Data.BaseContract,OEC.API.ContractGroup,OEC.API.Currency,OEC.API.Exchange)">
            <summary>
            Contructs BaseContract instance based on given contract
            </summary>
            <param name="bc">Base contract</param>
            <param name="group">Contract group</param>
            <param name="cur">Currency</param>
            <param name="ex">Exchange</param>
        </member>
        <member name="M:OEC.API.BaseContract.ToString">
            <summary>
            String representation of the BaseContract
            </summary>
            <returns>Symbol</returns>
        </member>
        <member name="M:OEC.API.BaseContract.GetContracts(System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Gets nearest N contracts according to month/year mask 
            </summary>
            <param name="NearestNumber">number of contracts to return, 0 for all contracts</param>
            <param name="Months">Allowed months, null for all months</param>
            <param name="Years">Allowed years, null for all years</param>
            <returns>Contract list</returns>
        </member>
        <member name="M:OEC.API.BaseContract.GetNearestContracts(System.Int32)">
            <summary>
            Gets a list with N nearest contracts
            </summary>
            <param name="NearestNumber">Number of contracts</param>
            <returns></returns>
        </member>
        <member name="M:OEC.API.BaseContract.GetNearestContract">
            <summary>
            Gets nearest contract
            </summary>
            <returns>contract or null</returns>
        </member>
        <member name="M:OEC.API.BaseContract.GetBaseNameBySymbol(System.String)">
            <summary>
            Returns name of Base contract for symbol
            </summary>
            <param name="Symbol"></param>
            <returns></returns>
        </member>
        <member name="M:OEC.API.BaseContract.CreateForward(System.DateTime)">
            <summary>
            </summary>
            <param name="settlementDate"></param>
            <returns></returns>
        </member>
        <member name="P:OEC.API.BaseContract.Symbol">
            <summary>
            Symbol - ES, SP, FDAX etc
            </summary>
        </member>
        <member name="P:OEC.API.BaseContract.Name">
            <summary>
            Full name - Mini S&amp;P
            </summary>
        </member>
        <member name="P:OEC.API.BaseContract.Currency">
            <summary>
            Currency of contract
            </summary>
        </member>
        <member name="P:OEC.API.BaseContract.Exchange">
            <summary>
            Exchange where contract is traded
            </summary>
        </member>
        <member name="P:OEC.API.BaseContract.TickSize">
            <summary>
            Tick size - minimal increment of price value
            </summary>
        </member>
        <member name="P:OEC.API.BaseContract.ContractSize">
            <summary>
            Contract size - points per currency unit (per dollar for USD)
            </summary>
        </member>
        <member name="P:OEC.API.BaseContract.PriceFormat">
            <summary>
            Price Format 
            </summary>
            <remarks>
            - positive values means number of digits after decimal point (2 = 0.01)<br/>
            - negative values are divisors of fractional representation (-32 = 1[/32])
            </remarks>
        </member>
        <member name="P:OEC.API.BaseContract.PriceMultiplier">
            <summary>
            Multiplier - power of 10 used for price formatting.
            </summary>
            <remarks>
            Example: 2 = 100, -2 = 0.01.
            </remarks>
        </member>
        <member name="P:OEC.API.BaseContract.ContractGroup">
            <summary>
            Group where contract belongs to (Currencies, Grains etc)
            </summary>
        </member>
        <member name="P:OEC.API.BaseContract.Commissions">
            <summary>
            Commissions 
            </summary>
            <remarks>
            one value per normal contract, multiple values reserved for future usage
            </remarks>
        </member>
        <member name="P:OEC.API.BaseContract.Type">
            <summary>
            Contract type - pit or electronic
            </summary>
        </member>
        <member name="P:OEC.API.BaseContract.StartTime">
            <summary>
            Trading session start time, in local time zone
            </summary>
        </member>
        <member name="P:OEC.API.BaseContract.StopTime">
            <summary>
            Trading session stop time, in local time zone
            </summary>
        </member>
        <member name="P:OEC.API.BaseContract.DayClose">
            <summary>
            Day close, in local time zone
            </summary>
        </member>
        <member name="P:OEC.API.BaseContract.Contracts">
            <summary>
            List of underlying contracts ES : (ESH6, ESM6, ESU6, ESZ6, ESH7, ...)
            </summary>
        </member>
        <member name="P:OEC.API.BaseContract.ProductCalendar">
            <summary>
            Product Calendar (expiration dates and symbols)
            </summary>
        </member>
        <member name="P:OEC.API.BaseContract.First">
            <summary>
            First underlying contract 
            </summary>
        </member>
        <member name="P:OEC.API.BaseContract.InitialMargin">
            <summary>
            Initial margin for contract
            </summary>
        </member>
        <member name="P:OEC.API.BaseContract.MaintenanceMargin">
            <summary>
            Maintenance margin for contract
            </summary>
        </member>
        <member name="P:OEC.API.BaseContract.IsCompound">
            <summary>
            Is the contract a compound contract?
            </summary>
        </member>
        <member name="P:OEC.API.BaseContract.IsOption">
            <summary>
            Is the contract an option contract?
            </summary>
        </member>
        <member name="P:OEC.API.BaseContract.IsFuture">
            <summary>
            Is the contract a future contract?
            </summary>
        </member>
        <member name="P:OEC.API.BaseContract.ContractKind">
            <summary>
            Kind of a contract
            </summary>
        </member>
        <member name="P:OEC.API.BaseContract.CompoundType">
            <summary>
            Compound type
            </summary>
        </member>
        <member name="P:OEC.API.BaseContract.HasOptionLegs">
            <summary>
            Is the contract an option compound?
            </summary>
        </member>
        <member name="P:OEC.API.BaseContract.HasOnlyFutureLegs">
            <summary>
            Is the contract a future-only compound?
            </summary>
        </member>
        <member name="P:OEC.API.BaseContract.Properties">
            <summary>
            Gets list of custom properties of basecontract
            </summary>
        </member>
        <member name="P:OEC.API.BaseContract.ContinuousContractRule">
            <summary>
            Continuous contract creation rule using by default
            </summary>
        </member>
        <member name="T:OEC.API.BaseContractList">
            <summary>
            List of <see cref="T:OEC.API.BaseContract"/> items. See <see cref="P:OEC.API.OECClient.BaseContracts">OECClient.BaseContracts</see>.
            </summary>
            <remarks>
            The list is indexed by base symbol.
            </remarks>
        </member>
        <member name="M:OEC.API.BaseContractList.FindBySymbol(System.String)">
            <summary>
            Returns BaseContract instance for symbol
            </summary>
            <param name="Symbol"></param>
            <returns></returns>
        </member>
        <member name="T:OEC.API.Bases.Set`1">
            <summary>
            Sorted list of objects
            </summary>
            <typeparam name="T">type of object</typeparam>
        </member>
        <member name="M:OEC.API.Bases.Set`1.Add(`0)">
            <summary>
            Add item to collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:OEC.API.Bases.NamespaceDoc">
            <summary>
            This namespace contains base types of API objects and containers.<br/>
            See <see cref="T:OEC.API.OECClient"/> for API overview
            </summary>
        </member>
        <member name="T:OEC.API.Channel">
            <summary>
            News channel. See <see cref="P:OEC.API.OECClient.Channels">OECClient.Channels</see>.
            </summary>
        </member>
        <member name="T:OEC.API.ChannelList">
            <summary>
            List of channels - see <see cref="P:OEC.API.OECClient.Channels">OECClient.Channels</see>.
            </summary>
        </member>
        <member name="T:OEC.API.Command">
            <summary>
            Order command: one of create, modify and cancel command of an <see cref="T:OEC.API.Order"/>
            </summary>
            <remarks>
            During the lifetime of order, user can control it by sending commands.
            <br/> 
            Create command is associated with initial <see cref="P:OEC.API.Command.Version"/> of order and created when client sends a new order.
            <br/>
            Modify command also have new version of order, but cancel command does not.
            <br/><br/>
            When command is sent to server, it has <see cref="F:OEC.Data.CommandState.Sent"/> state. The state then could be
            changed to <see cref="F:OEC.Data.CommandState.Failed"/>, meaning that command was failed 
            by the reason found in <see cref="P:OEC.API.Command.ResultComments"/> property, or to <see cref="F:OEC.Data.CommandState.Executed"/> - meaning 
            that command succeed. in both cases, <see cref="P:OEC.API.Command.ResultTimestamp"/> property will updated with execution/failure timestamp.
            <br/>
            When cancel command succeed, order becomes <see cref="F:OEC.Data.OrderState.Cancelled"/> or <see cref="F:OEC.Data.OrderState.Completed"/> - depending
            of number of active fills.
            <br/>
            If the modify command succeds, current order version is replaced, and variable order properties, such as quantity or price will be updated.
            </remarks>
            <seealso cref="M:OEC.API.OECClient.SendOrder(OEC.API.OrderDraft)"/>
            <seealso cref="M:OEC.API.OECClient.CancelOrder(OEC.API.Order)"/>
            <seealso cref="M:OEC.API.OECClient.ModifyOrder(OEC.API.OrderDraft)"/>
            <seealso cref="P:OEC.API.Command.Version"/>
        </member>
        <member name="T:OEC.API.OrderChild">
            <summary>
            Base type for order subitems, like state, command, version or fill
            </summary>
        </member>
        <member name="P:OEC.API.OrderChild.Order">
            <summary>
            Parent order
            </summary>
        </member>
        <member name="M:OEC.API.Command.#ctor(OEC.Data.OrderCommand,OEC.API.Order)">
            <summary>
            Internal contrsuctor for initial load
            </summary>
            <param name="command">Serializable command</param>
            <param name="order">Order of command</param>
        </member>
        <member name="M:OEC.API.Command.#ctor(OEC.Data.OrderCommand,OEC.API.Version,OEC.API.Order)">
            <summary>
            Internal contructor - for udpates
            </summary>
            <param name="Command">Incoming command</param>
            <param name="Version">Optional version</param>
            <param name="order">Order of command</param>
        </member>
        <member name="M:OEC.API.Command.#ctor(System.Int32,System.DateTime,OEC.Data.CommandType,OEC.Data.CommandState,OEC.API.Order)">
            <summary>
            Internal contructor for creating new commands
            'create' commands are created with ID equal to order ID, and state=Executed
            other commands - with new generated ID and state "Sent"
            </summary>
            <param name="ID">new command ID </param>
            <param name="Timestamp">command creation timestamp</param>
            <param name="Type">command type</param>
            <param name="State">command initial state</param>
            <param name="order">Order of command</param>
        </member>
        <member name="M:OEC.API.Command.Update(OEC.Data.OrderCommand)">
            <summary>
            Updates state, usually to one of (executed/failed), and result properties of command
            </summary>
            <param name="Command">Serialized command</param>
        </member>
        <member name="M:OEC.API.Command.Serialize">
            <summary>
            Make serializable command
            </summary>
            <returns>serializable command</returns>
        </member>
        <member name="M:OEC.API.Command.ToString">
            <summary>
            Basic string representation of command
            </summary>
            <returns>#{ID} {Type}</returns>
        </member>
        <member name="P:OEC.API.Command.Timestamp">
            <summary>
            Command creation timestamp, UTC
            </summary>
        </member>
        <member name="P:OEC.API.Command.Type">
            <summary>
            Command type
            </summary>
        </member>
        <member name="P:OEC.API.Command.State">
            <summary>
            Current command state
            </summary>
        </member>
        <member name="P:OEC.API.Command.ResultComments">
            <summary>
            Comments of (unsuccesfull) execution
            </summary>
        </member>
        <member name="P:OEC.API.Command.ResultTimestamp">
            <summary>
            Timestamp of execution, UTC
            </summary>
        </member>
        <member name="P:OEC.API.Command.Version">
            <summary>
            Associated version (for create/modify commans) or null - for cancel commands
            </summary>
        </member>
        <member name="P:OEC.API.Command.ExchangeOrderID">
            <summary>
            Exchange Order ID or null for cancel commands
            </summary>
        </member>
        <member name="P:OEC.API.Command.AppSoftware">
            <summary>
            Name of 3rd party application that placed this command
            </summary>
        </member>
        <member name="P:OEC.API.Command.TypeState">
            <summary>
            Gets the verbal interpretation of state depending of type
            for example "Created", "Modified", "Cancelling", "Cancel failed" etc
            </summary>
        </member>
        <member name="T:OEC.API.CommandList">
            <summary>
            List of <see cref="T:OEC.API.Command">commands</see> of an <see cref="T:OEC.API.Order"/>. See <see cref="P:OEC.API.Order.Commands">Order.Commands</see>.
            </summary>
        </member>
        <member name="P:OEC.API.CommandList.CreateCommand">
            <summary>
            Gets creation command (first one) for an order
            </summary>
        </member>
        <member name="P:OEC.API.CommandList.Pending">
            <summary>
            Gets first command in the list that was not executed yet
            </summary>
        </member>
        <member name="T:OEC.API.Commission">
            <summary>
            Commission value of certain <see cref="T:OEC.Data.CommissionType"/>.
            </summary>
        </member>
        <member name="P:OEC.API.Commission.Commissions">
            <summary>
            Commissions value, in USD
            </summary>
        </member>
        <member name="P:OEC.API.Commission.Type">
            <summary>
            Type of commission 
            </summary>
        </member>
        <member name="T:OEC.API.CommissionList">
            <summary>
            List of <see cref="T:OEC.API.Commission"/> objects indexed by type. See <see cref="P:OEC.API.Contract.Commissions"/>.
            </summary>
        </member>
        <member name="T:OEC.API.Connection">
            <summary>
            Encapsulates low-level network operations using sockets and ObjectStream class.
            </summary>
        </member>
        <member name="F:OEC.API.Connection.m_stream">
            <summary>
            protected ObjectStream instance used to serialize objects over the network
            </summary>
        </member>
        <member name="M:OEC.API.Connection.Connect(System.String,System.Int32,System.String,System.String,OEC.HashTools.Certificate)">
            <summary>
            establish a connection to OECServer, do encryption handshake and send logon request
            </summary>
        </member>
        <member name="M:OEC.API.Connection.Read">
            <summary>
            Read pending object from object stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:OEC.API.Connection.Clear">
            <summary>
            Clear all incoming data from object stream
            </summary>
        </member>
        <member name="M:OEC.API.Connection.Write(OEC.Protocol.ClientRequest)">
            <summary>
            Write object to the object stream
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:OEC.API.Connection.Closed">
            <summary>
            Returns connection state
            </summary>
        </member>
        <member name="P:OEC.API.Connection.Closed2">
            <summary>
            Returns secondary connection state
            </summary>
        </member>
        <member name="P:OEC.API.Connection.DataAvailable">
            <summary>
            Checks whether there are something in incoming queue
            </summary>
        </member>
        <member name="T:OEC.API.Consts">
            <summary>
            Global constants.
            </summary>
        </member>
        <member name="T:OEC.API.CompoundPositionGroup">
            <summary>
            Compound or "spread" group of positions that created by "spread" orders
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.CompoundPositionGroup.Account">
            <summary>
            Assigned account
            </summary>
        </member>
        <member name="P:OEC.API.CompoundPositionGroup.Positions">
            <summary>
            List of legs
            </summary>
        </member>
        <member name="P:OEC.API.CompoundPositionGroup.Name">
            <summary>
            Name of group
            </summary>
        </member>
        <member name="P:OEC.API.CompoundPositionGroup.Type">
            <summary>
            Type of group
            </summary>
        </member>
        <member name="P:OEC.API.CompoundPositionGroup.Timestamp">
            <summary>
            Timestamp of creation
            </summary>
        </member>
        <member name="P:OEC.API.CompoundPositionGroup.CloseTimestamp">
            <summary>
            Timestamp of closing
            </summary>
        </member>
        <member name="P:OEC.API.CompoundPositionGroup.Broken">
            <summary>
            Indicates that compound group is broken
            </summary>
        </member>
        <member name="T:OEC.API.CompoundLegPosition">
            <summary>
            Position of compound leg. <seealso cref="T:OEC.API.CompoundPositionGroup"/>
            </summary>
            <exclude/>
        </member>
        <member name="T:OEC.API.Position">
            <summary>
            Position volume/price stats and Profit/Loss values
            per <see cref="P:OEC.API.Position.Account"/> and <see cref="P:OEC.API.Position.Contract"/>
            </summary>
            <remarks>
            Position stats are represented by <see cref="T:OEC.API.VolPrice"/> elements. There are four items : 
            <see cref="P:OEC.API.Position.Prev">previous session closing position</see>, 
            contracts <see cref="P:OEC.API.Position.Long">bought</see> and <see cref="P:OEC.API.Position.Short">sold</see> in the current session,
            current <see cref="P:OEC.API.Position.Net"/> position.<br/>
            Also, there are profit/loss values for closed and open position part 
            - see <see cref="P:OEC.API.Position.Gain"/> and <see cref="P:OEC.API.Position.NetGain"/>.<br/>
            Total P/L statistics per <see cref="P:OEC.API.Position.Account"/> are available in <see cref="P:OEC.API.Account.TotalBalance">Account.TotalBalance</see> property.
            </remarks>
        </member>
        <member name="M:OEC.API.Position.GetContractSize(OEC.API.Contract,OEC.API.Account)">
            <summary>
            Calculates contract size of contract for account
            </summary>
            <param name="contract"></param>
            <param name="account"></param>
            <returns></returns>
        </member>
        <member name="M:OEC.API.Position.GetContractSize(OEC.API.Contract,OEC.API.AllocationBlock)">
            <summary>
            Calculates contract size of contract for allocation block
            </summary>
            <param name="contract"></param>
            <param name="allocationBlock"></param>
            <returns></returns>
        </member>
        <member name="P:OEC.API.Position.Detailed">
            <summary>
            Checks whether the position is element of detailed position history
            or daily position summary
            </summary>
        </member>
        <member name="P:OEC.API.Position.Account">
            <summary>
            Account of the position
            </summary>
        </member>
        <member name="P:OEC.API.Position.Contract">
            <summary>
            Contract of the position
            </summary>
        </member>
        <member name="P:OEC.API.Position.ContractSize">
            <summary>
            Contract size. The same as Contract.ContractSize, but depends on account type in the case of FX accounts.
            </summary>
        </member>
        <member name="P:OEC.API.Position.Long">
            <summary>
            Bought contracts and avg. buy price.
            </summary>
        </member>
        <member name="P:OEC.API.Position.Short">
            <summary>
            Sold contracts and avg. sell price.
            </summary>
        </member>
        <member name="P:OEC.API.Position.Net">
            <summary>
            Net position and avg. price
            </summary>
        </member>
        <member name="P:OEC.API.Position.Prev">
            <summary>
            Previous day position and avg. price
            </summary>
        </member>
        <member name="P:OEC.API.Position.CurrencyNetGain">
            <summary>
            Realized profit/loss in native contract currency. 
            See also <see cref="P:OEC.API.Position.NetGain"/>
            </summary>
        </member>
        <member name="P:OEC.API.Position.NetGain">
            <summary>
            Realized profit/loss converted to USD
            minus commissions.
            See also <see cref="P:OEC.API.Position.CurrencyNetGain"/>
            </summary>
        </member>
        <member name="P:OEC.API.Position.CurrencyOTE">
            <summary>
            Theoretical profit/loss of open position agains last market price in native currency.
            See also <see cref="P:OEC.API.Position.OTE"/>
            </summary>
        </member>
        <member name="P:OEC.API.Position.OTE">
            <summary>
            Theoretical profit/loss of open position against last market price in USD
            minus comissions
            See also <see cref="P:OEC.API.Position.CurrencyOTE"/>
            </summary>
        </member>
        <member name="P:OEC.API.Position.CurrencyGain">
            <summary>
            Total profit/loss (sum of realized and open p/l) in native currency.
            See also <see cref="P:OEC.API.Position.Gain"/>
            </summary>
        </member>
        <member name="P:OEC.API.Position.Gain">
            <summary>
            Total profit/loss (sum of realized and open p/l) in USD.
            See also <see cref="P:OEC.API.Position.CurrencyGain"/>
            </summary>
        </member>
        <member name="P:OEC.API.Position.CurrencySettlePnL">
            <summary>
            Theoretical profit/loss of open position agains prev. settlement price in native currency.
            See also <see cref="P:OEC.API.Position.SettlePnL"/>
            </summary>
        </member>
        <member name="P:OEC.API.Position.SettlePnL">
            <summary>
            Theoretical profit/loss of open position agains prev. settlement price in USD
            minus comissions.
            See also <see cref="P:OEC.API.Position.CurrencySettlePnL"/>
            </summary>
        </member>
        <member name="P:OEC.API.Position.CurrencyHypoPnL">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.Position.HypoPnL">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.Position.CurrencyMarketValue">
            <summary>
            Current market value of position (equity, options) in native currency
            </summary>
        </member>
        <member name="P:OEC.API.Position.MarketValue">
            <summary>
            Current market value of position (equity, options) in USD
            </summary>
        </member>
        <member name="P:OEC.API.Position.CurrencyCostBasis">
            <summary>
            Cost basis of position (equity, options) in native currency
            </summary>
        </member>
        <member name="P:OEC.API.Position.CostBasis">
            <summary>
            Cost basis position (equity, options) in USD
            </summary>
        </member>
        <member name="P:OEC.API.Position.Fills">
            <summary>
            Fills of position
            </summary>
        </member>
        <member name="P:OEC.API.Position.Date">
            <summary>
            Business date of the position
            </summary>
        </member>
        <member name="P:OEC.API.Position.RealizedCommissions">
            <summary>
            Commissions for fills of closed position
            </summary>
        </member>
        <member name="P:OEC.API.Position.OpenCommissions">
            <summary>
            Commissions for fills of open posiiton
            </summary>
        </member>
        <member name="P:OEC.API.Position.CurrencyMaintenanceMargin">
            <summary>
            Maintenance margin of open position in native currency
            </summary>
        </member>
        <member name="P:OEC.API.Position.MaintenanceMargin">
            <summary>
            Maintenance margin of open position in USD
            </summary>
        </member>
        <member name="P:OEC.API.Position.CurrencyInitialMargin">
            <summary>
            Initial margin of open position in native currency
            </summary>
        </member>
        <member name="P:OEC.API.Position.InitialMargin">
            <summary>
            Initial margin of open position in native currency
            </summary>
        </member>
        <member name="P:OEC.API.Position.CutOff">
            <summary>
            Position timestamp, UTC
            </summary>
            <remarks>
            Fills placed earlier will not be added to statistics
            </remarks>
        </member>
        <member name="P:OEC.API.Position.DisplayContractSymbol">
            <summary>
            Display name of contract (single of dual)
            </summary>
        </member>
        <member name="P:OEC.API.Position.PositionContract">
            <summary>
            Main contract (electronic preferred) of the position 
            </summary>
        </member>
        <member name="P:OEC.API.Position.MarketPrice">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="T:OEC.API.Position.PositionContractType">
            <summary>
            Type of positition depends of its fills
            </summary>
        </member>
        <member name="F:OEC.API.Position.PositionContractType.None">
            <summary>
            Previous day position
            </summary>
        </member>
        <member name="F:OEC.API.Position.PositionContractType.Electronic">
            <summary>
            Position contains only electronic fills
            </summary>
        </member>
        <member name="F:OEC.API.Position.PositionContractType.Pit">
            <summary>
            Position contains only pit fills
            </summary>
        </member>
        <member name="F:OEC.API.Position.PositionContractType.Both">
            <summary>
            Position contains mixed type fills
            </summary>
        </member>
        <member name="P:OEC.API.CompoundLegPosition.Group">
            <summary>
            Assigned group
            </summary>
        </member>
        <member name="P:OEC.API.CompoundLegPosition.LegNo">
            <summary>
            Number of the leg in the group
            </summary>
        </member>
        <member name="P:OEC.API.CompoundLegPosition.Ratio">
            <summary>
            Ratio of the leg in the group
            </summary>
        </member>
        <member name="T:OEC.API.CompoundLegPositionList">
            <summary>
            List of leg positions
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.CompoundLegPositionList.First">
            <summary>
            First leg
            </summary>
        </member>
        <member name="P:OEC.API.CompoundLegPositionList.Item(OEC.API.Contract)">
            <summary>
            Get leg position by contract
            </summary>
            <param name="contract"></param>
            <returns></returns>
        </member>
        <member name="T:OEC.API.CompoundPositionGroupList">
            <summary>
            List of compound position groups
            </summary>
            <exclude />
        </member>
        <member name="T:OEC.API.ContinuousContractRule">
            <summary>
            The rule by which contracts are spliced to get Continuous Contract
            </summary>
        </member>
        <member name="M:OEC.API.ContinuousContractRule.#ctor(OEC.API.BaseContract,OEC.ContinuousContracts.SplicingRule)">
            <summary>
            Instatiated user defined rule without bars adjustment
            </summary>
            <param name="baseContract"></param>
            <param name="ruleSplicing"></param>
        </member>
        <member name="M:OEC.API.ContinuousContractRule.#ctor(OEC.API.BaseContract,OEC.ContinuousContracts.SplicingRule,OEC.Data.SplicingRulePriceAdjustment)">
            <summary>
            Instatiated user defined rule
            </summary>
            <param name="baseContract"></param>
            <param name="ruleSplicing"></param>
            <param name="adjustment"></param>
        </member>
        <member name="P:OEC.API.ContinuousContractRule.BaseContract">
            <summary>
            Base contract instance. See <see cref="T:OEC.API.BaseContract"/>.
            </summary>
        </member>
        <member name="P:OEC.API.ContinuousContractRule.Adjustment">
            <summary>
            How to adjust bars of one underlying contract relatively another
            </summary>
        </member>
        <member name="P:OEC.API.ContinuousContractRule.IsUserDefined">
            <summary>
            Returns true if defined by user and false otherwise
            </summary>
        </member>
        <member name="P:OEC.API.ContinuousContractRule.Rule">
            <summary>
            Splicing method (SpotMonth, Schedule, etc)
            </summary>
        </member>
        <member name="P:OEC.API.ContinuousContractRule.Splicing">
            <summary>
            Splicing rule type
            </summary>
        </member>
        <member name="T:OEC.API.Subscription">
            <summary>
            Subscription 
            </summary>
        </member>
        <member name="F:OEC.API.Subscription.Contract">
            <summary>
            Contract 
            </summary>
        </member>
        <member name="F:OEC.API.Subscription.Currency">
            <summary>
            Currency 
            </summary>
        </member>
        <member name="F:OEC.API.Subscription.Start">
            <summary>
            Start of range 
            </summary>
            <remarks>
            ignored for Price/DOM
            </remarks>
        </member>
        <member name="F:OEC.API.Subscription.End">
            <summary>
            End of range
            </summary>
            <remarks>
            ignored for Price/DOM
            </remarks>
        </member>
        <member name="F:OEC.API.Subscription.Amount">
            <summary>
            Amount of bars/ticks per request
            </summary>
            <remarks>
            ignored for Price/DOM/Momentum and range bars
            </remarks>
        </member>
        <member name="F:OEC.API.Subscription.IntInterval">
            <summary>
            Bar interval 
            </summary>
            <remarks>
            0 for Price/DOM/Tick,
            minutes for bars,
            ticks for tickbars,
            volume for volumebars
            </remarks>
        </member>
        <member name="F:OEC.API.Subscription.IgnoreSessionBoundaries">
            <summary>
            Ignores session boundaries
            </summary>
        </member>
        <member name="F:OEC.API.Subscription.Updatable">
            <summary>
            Updatable or one-time
            </summary>
        </member>
        <member name="F:OEC.API.Subscription.Type">
            <summary>
            Subscription type
            </summary>
        </member>
        <member name="M:OEC.API.Subscription.GetNextID">
            <summary>
            Local unique order ID generator
            </summary>
        </member>
        <member name="P:OEC.API.Subscription.Duration">
            <exclude />
        </member>
        <member name="P:OEC.API.Subscription.BarDescription">
            <exclude />
        </member>
        <member name="P:OEC.API.Subscription.Interval">
            <summary>
            Bar interval 
            </summary>
            <remarks>
            TimeSpan.Zero for Price/DOM/Tick,
            minutes for bars,
            ticks for tickbars,
            milliseconds for volumebars
            </remarks>
        </member>
        <member name="T:OEC.API.Contract">
            <summary>
            A single contract - for example, ESH6.
            </summary>
            <remarks>
            Contract instance holds single contract properties. In addition to unique contract properties, 
            such as <see cref="P:OEC.API.Contract.Symbol"/>, <see cref="P:OEC.API.Contract.ExpirationDate"/>, properties that are shared among 
            contracts with same <see cref="P:OEC.API.Contract.BaseContract"/> also available there.<br/>
            <see cref="P:OEC.API.Contract.CurrentPrice"/> and <see cref="P:OEC.API.Contract.DOM"/> data are available if client subscribed for the
            price or DOM update. <see cref="M:OEC.API.OECClient.Subscribe(OEC.API.Contract)"/> and <see cref="M:OEC.API.OECClient.SubscribeDOM(OEC.API.Contract)"/> for details.
            </remarks>
            <seealso cref="T:OEC.API.BaseContract"/>
            <seealso cref="T:OEC.API.ContractGroup"/>
            <seealso cref="P:OEC.API.Order.Contract"/>
        </member>
        <member name="M:OEC.API.Contract.GetInitialMargin(OEC.API.Account)">
            <summary>
            Initial margin for contract
            </summary>
        </member>
        <member name="M:OEC.API.Contract.GetMaintenanceMargin(OEC.API.Account)">
            <summary>
            Maintenance margin for contract
            </summary>
        </member>
        <member name="M:OEC.API.Contract.#ctor(OEC.API.Core,OEC.Data.Contract,OEC.API.Contract,System.Collections.Generic.List{OEC.API.Leg},OEC.API.BaseContract)">
            <summary>
            Constructs Contract from serializable contract instance
            </summary>
            <param name="core"></param>
            <param name="contract">serializable contract</param>
            <param name="parent"></param>
            <param name="legs"></param>
            <param name="baseContract">BaseContract instance</param>
        </member>
        <member name="M:OEC.API.Contract.SetOtherContract(OEC.API.Contract)">
            <summary>
            sets pair contract
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:OEC.API.Contract.ToString">
            <summary>
            contract string representation
            </summary>
            <returns>contract symbol</returns>
        </member>
        <member name="M:OEC.API.Contract.PriceToString(System.Double,System.Globalization.CultureInfo)">
            <summary>
            Formats price using contract price format, multiplier and tick size
            </summary>
            <param name="Price">price to format</param>
            <param name="culture">culture for price format</param>
            <returns>formatted price</returns>
        </member>
        <member name="M:OEC.API.Contract.PriceToString(System.Double)">
            <summary>
            Formats price using contract price format, multiplier and tick size
            </summary>
            <param name="Price">price to format</param>
            <returns>formatted price</returns>
        </member>
        <member name="M:OEC.API.Contract.StringToPrice(System.String)">
            <summary>
            Parses text price according to contract price format.
            </summary>
            <param name="Price">Price in text form, such as "108 27.50"</param>
            <returns>decimal value, 108.859375 for the price above</returns>
        </member>
        <member name="M:OEC.API.Contract.CompareTo(OEC.API.Contract)">
            <summary>
            Compares two contracts
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:OEC.API.Contract.IsInsideSession(System.DateTime)">
            <summary>
            Checks if dtCheck is inside trading session of the contract
            </summary>
            <param name="dtCheck">Local time-zone</param>
            <returns>true, if dtCheck is inside trading session</returns>
        </member>
        <member name="P:OEC.API.Contract.Strike">
            <summary>
            Option strike price
            </summary>
        </member>
        <member name="P:OEC.API.Contract.Put">
            <summary>
            Put or Call
            </summary>
        </member>
        <member name="P:OEC.API.Contract.Suffix">
            <summary>
            put/call and strike price
            </summary>
        </member>
        <member name="P:OEC.API.Contract.LastPrice">
            <summary>
            Last price or 0
            </summary>
        </member>
        <member name="P:OEC.API.Contract.ID">
            <summary>
            Contract ID (non unique).
            </summary>
            <remarks>
            Pit/Electronic counterparts of the same contract (SP/ZSP) have the same ID value.
            </remarks>
        </member>
        <member name="P:OEC.API.Contract.Symbol">
            <summary>
            Contract symbol. Examples: ESH6, FDAXH6
            </summary>
        </member>
        <member name="P:OEC.API.Contract.BaseSymbol">
            <summary>
            Base symbol. Example: ES for ESH6
            </summary>
        </member>
        <member name="P:OEC.API.Contract.BaseContract">
            <summary>
            Base contract instance. See <see cref="T:OEC.API.BaseContract"/>.
            </summary>
        </member>
        <member name="P:OEC.API.Contract.Name">
            <summary>
            Full name. Example: "E-Mini S&amp;P", "Crude Oil"
            </summary>
        </member>
        <member name="P:OEC.API.Contract.Currency">
            <summary>
            <see cref="P:OEC.API.Contract.Currency"/> of the contract
            </summary>
        </member>
        <member name="P:OEC.API.Contract.Exchange">
            <summary>
            <see cref="P:OEC.API.Contract.Exchange"/> of the contract
            </summary>
        </member>
        <member name="P:OEC.API.Contract.TickSize">
            <summary>
            Tick size - minimal increment of the price value
            </summary>
        </member>
        <member name="P:OEC.API.Contract.ContractSize">
            <summary>
            Contract size - currency unit per point. (dollar value if currency is USD)
            </summary>
        </member>
        <member name="P:OEC.API.Contract.PriceFormat">
            <summary>
            Price Format 
            </summary>
            <remarks>
            - positive values means number of digits after decimal point (2 = 0.01)<br/>
            - negative values are divisors of fractional representation (-32 = 1[/32])
            </remarks>
        </member>
        <member name="P:OEC.API.Contract.PriceMultiplier">
            <summary>
            Multiplier - power of 10 used for price formatting.
            </summary>
            <remarks>
            Example: 2 = 100, -2 = 0.01.
            </remarks>
        </member>
        <member name="P:OEC.API.Contract.ExpirationDate">
            <summary>
            Date of contract expiration
            </summary>
        </member>
        <member name="P:OEC.API.Contract.ExpirationTime">
            <summary>
            Time of contract expiration, DateTime.MinValue in case if no expiration time available for the contract
            </summary>
        </member>
        <member name="P:OEC.API.Contract.ExpirationMonth">
            <summary>
            Expiration month and year, in YYMM format
            </summary>
        </member>
        <member name="P:OEC.API.Contract.ExpirationType">
            <summary>
            Expiration type of equity options (standard, weekly, quarterly)
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.Contract.Month">
            <summary>
            Expiration month
            </summary>
        </member>
        <member name="P:OEC.API.Contract.MonthChar">
            <summary>
            Expiration month symbol - one of "FGHJKMNQUVXZ"
            </summary>
        </member>
        <member name="P:OEC.API.Contract.Year">
            <summary>
            Expiration year
            </summary>
        </member>
        <member name="P:OEC.API.Contract.MonthYear">
            <summary>
            Expiration monthyear = "{MonthChar}{YearLastDigit}". Example: "H6"
            </summary>
        </member>
        <member name="P:OEC.API.Contract.Tenor">
            <summary>
            Gets tenor of FX FWD contract. 
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.Contract.ContractGroup">
            <summary>
            Group where contract belongs to (Currencies, Grains etc)
            </summary>
        </member>
        <member name="P:OEC.API.Contract.Commissions">
            <summary>
            Commissions 
            </summary>
            <remarks>
            one value per normal contract, multiple values reserved for future usage
            </remarks>
        </member>
        <member name="P:OEC.API.Contract.Type">
            <summary>
            Contract type - Pit or Electronic
            </summary>
        </member>
        <member name="P:OEC.API.Contract.IsSpread">
            <summary>
            Is the contract a spread?
            </summary>
        </member>
        <member name="P:OEC.API.Contract.StartTime">
            <summary>
            Trading session start time, in local time zone
            </summary>
        </member>
        <member name="P:OEC.API.Contract.StopTime">
            <summary>
            Trading session stop time, in local time zone
            </summary>
        </member>
        <member name="P:OEC.API.Contract.CurrentPrice">
            <summary>
            Current price data, if subscribed, or null
            </summary>
        </member>
        <member name="P:OEC.API.Contract.DOM">
            <summary>
            Current DOM data, if subscribed for DOM, or null
            </summary>
        </member>
        <member name="P:OEC.API.Contract.ElectronicContract">
            <summary>
            Electronic pair for pit contract, if exists
            </summary>
        </member>
        <member name="P:OEC.API.Contract.PitContract">
            <summary>
            Pit pair for electronic contract, if exists
            </summary>
        </member>
        <member name="P:OEC.API.Contract.PositionContract">
            <summary>
            Contract for position calulation: Electronic for electronic only or dual, pit for pit only
            </summary>
        </member>
        <member name="P:OEC.API.Contract.Options">
            <summary>
            List of underlying options 
            </summary>
        </member>
        <member name="P:OEC.API.Contract.ParentContract">
            <summary>
            Parent contract for an option contract (ESM8 for OESM8C1300)
            </summary>
        </member>
        <member name="P:OEC.API.Contract.IsCompound">
            <summary>
            Is the contract a compound contract?
            </summary>
        </member>
        <member name="P:OEC.API.Contract.IsContinuous">
            <summary>
            Is the contract a continuous contract?
            </summary>
        </member>
        <member name="P:OEC.API.Contract.IsOption">
            <summary>
            Is the contract an option contract?
            </summary>
        </member>
        <member name="P:OEC.API.Contract.IsFuture">
            <summary>
            Is the contract a future contract?
            </summary>
        </member>
        <member name="P:OEC.API.Contract.HasExpiration">
            <summary>
            Has the contract an expiration date?
            </summary>
        </member>
        <member name="P:OEC.API.Contract.IsMarginal">
            <summary>
            Is the contract a future/forex contract?
            </summary>
        </member>
        <member name="P:OEC.API.Contract.HasOptions">
            <summary>
            Has the contract linked options?
            </summary>
        </member>
        <member name="P:OEC.API.Contract.IsEquityAsset">
            <summary>
            Is the contract a equity, equity index, equity options, mutual fund or bond?
            </summary>
            <seealso cref="T:OEC.Data.ContractKind"/>
            <seealso cref="P:OEC.API.BaseContract.ContractKind"/>
        </member>
        <member name="P:OEC.API.Contract.IsForex">
            <summary>
            Is the contract a forex contract?
            </summary>
        </member>
        <member name="P:OEC.API.Contract.HasOptionLegs">
            <summary>
            Is the contract an option compound?
            </summary>
        </member>
        <member name="P:OEC.API.Contract.HasOnlyFutureLegs">
            <summary>
            Is the contract a future-only compound?
            </summary>
        </member>
        <member name="P:OEC.API.Contract.IsFrontMonth">
            <exclude/>
        </member>
        <member name="P:OEC.API.Contract.Legs">
            <summary>
            Legs for compound contract
            </summary>
        </member>
        <member name="P:OEC.API.Contract.CompoundType">
            <summary>
            Type of compound contract
            </summary>
        </member>
        <member name="P:OEC.API.Contract.PositionSymbol">
            <summary>
            Name of contract or dual contracts for position
            </summary>
            <remarks>
            Example: ZSPH6 (SPH6) for dual pit/electronic contract.<br/>
            Note: there is only one position for contracts with same ID and different types
            </remarks>
        </member>
        <member name="P:OEC.API.Contract.Pit">
            <summary>
            Pit or electronic contract
            </summary>
        </member>
        <member name="P:OEC.API.Contract.Key">
            <summary>
            SortKey for contract 
            Contracts usually are sorted by basesymbol/monthyear
            </summary>
        </member>
        <member name="P:OEC.API.Contract.Histogram">
            <summary>
            Last copy of traded price histogram
            </summary>
        </member>
        <member name="P:OEC.API.Contract.QuoteDetails">
            <summary>
            Quote Details
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.Contract.IndexComponents">
            <summary>
            Index Components
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.Contract.RiskLimitsTypes">
            <summary>
            Type of risk limitation for contract
            </summary>
        </member>
        <member name="T:OEC.API.Contract.ContractKey">
            <summary>
            Composite unique key for contract
            </summary>
        </member>
        <member name="F:OEC.API.Contract.ContractKey.ContractID">
            <summary>
            ID of contract
            </summary>
        </member>
        <member name="F:OEC.API.Contract.ContractKey.Pit">
            <summary>
            true - pit, false - electronic
            </summary>
        </member>
        <member name="M:OEC.API.Contract.ContractKey.CompareTo(OEC.API.Contract.ContractKey)">
            <summary>
            Compares two contract keys
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:OEC.API.Contract.ContractKey.GetHashCode">
            <summary>
            returns a hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="T:OEC.API.ContractSortKey">
            <summary>
            Composite key to sort contract lists by symbol and expiration date
            </summary>
        </member>
        <member name="F:OEC.API.ContractSortKey.BaseSymbol">
            <summary>
            Contract base symbol
            </summary>
        </member>
        <member name="F:OEC.API.ContractSortKey.MonthYear">
            <summary>
            Contract monthyear
            </summary>
        </member>
        <member name="M:OEC.API.ContractSortKey.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Construct sortkey object
            </summary>
            <param name="baseSymbol">Contract base symbol</param>
            <param name="monthYear">Expiration month year {YYMM}</param>
            <param name="additional">Additional key. E.g., expiration moth year of second leg of calendar spread</param>
        </member>
        <member name="M:OEC.API.ContractSortKey.CompareTo(OEC.API.ContractSortKey)">
            <summary>
            Compare sort keys with another one
            </summary>
            <param name="other">another sort key</param>
            <returns>-1/0/1</returns>
        </member>
        <member name="M:OEC.API.ContractSortKey.GetHashCode">
            <summary>
            returns a hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="T:OEC.API.ContractList">
            <summary>
            List of contracts - see <see cref="P:OEC.API.OECClient.Contracts">OECClient.Contracts</see> 
            </summary>
            <remarks>
            primary index - contract key (id, type)<br/>
            secondary index - contract sortkey (basesymbol, monthyear)<br/>
            additinal index - symbol<br/>
            </remarks>
            <seealso cref="P:OEC.API.OECClient.Contracts"/>
            <seealso cref="P:OEC.API.BaseContract.Contracts"/>
            <seealso cref="P:OEC.API.ContractGroup.Contracts"/>
        </member>
        <member name="M:OEC.API.ContractList.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:OEC.API.ContractList.GetContract(System.Int32,System.Boolean)">
            <summary>
            Finds a contract by id and type (pit or electonic)
            </summary>
            <param name="ContractID">Contract ID</param>
            <param name="pit">true = search for pit contract</param>
            <returns>found Contract</returns>
        </member>
        <member name="M:OEC.API.ContractList.GetContract(System.Int32)">
            <summary>
            Finds any contract with given ID
            first, it checks for electronic contract, then for pit
            </summary>
            <param name="ContractID">Contract ID</param>
            <returns>found Contract</returns>
        </member>
        <member name="M:OEC.API.ContractList.Add(OEC.API.Contract)">
            <summary>
            Adds a contract to collection
            sets pair contract if found
            </summary>
            <param name="contract">new contract</param>
        </member>
        <member name="M:OEC.API.ContractList.Clear">
            <summary>
            clear list
            </summary>
        </member>
        <member name="M:OEC.API.ContractList.GetByIndex(System.Int32)">
            <summary>
            Gets the item by zero-based index
            </summary>
            <param name="Index"></param>
            <returns></returns>
        </member>
        <member name="P:OEC.API.ContractList.Item(System.String)">
            <summary>
            finds contract by symbol
            </summary>
            <param name="Symbol">symbol to seach</param>
            <returns>found contract</returns>
        </member>
        <member name="P:OEC.API.ContractList.Values">
            <summary>
            Gets a list of contracts ordered by symbol/expliration date
            </summary>
        </member>
        <member name="T:OEC.API.Leg">
            <summary>
            Compound leg
            </summary>
        </member>
        <member name="F:OEC.API.Leg.Contract">
            <summary>
            Contract of the leg
            </summary>
        </member>
        <member name="F:OEC.API.Leg.Quantity">
            <summary>
            Quantity of the leg (can be negative)
            </summary>
        </member>
        <member name="F:OEC.API.Leg.Weight">
            <summary>
            Price weight of the leg
            </summary>
        </member>
        <member name="T:OEC.API.RiskLimitsTypeList">
            <summary>
            List of risk limits by provider ID
            </summary>
        </member>
        <member name="T:OEC.API.ContractGroup">
            <summary>
            Group of contracts
            </summary>
            <remarks>
            Contracts are grouped by underlying commodity, for example: Grains, Meats, Energies, Indices.<br/>
            ContractGroup object contains <see cref="T:OEC.API.Contract"/> and <see cref="T:OEC.API.BaseContract"/> instances belonging
            to thig group.
            </remarks>
        </member>
        <member name="M:OEC.API.ContractGroup.#ctor(System.Int32,System.String)">
            <summary>
            Constructs a new group
            </summary>
            <param name="ID">group id</param>
            <param name="Name">group name</param>
        </member>
        <member name="P:OEC.API.ContractGroup.Contracts">
            <summary>
            Contracts belonging to this group
            </summary>
        </member>
        <member name="P:OEC.API.ContractGroup.BaseContracts">
            <summary>
            BaseContracts belonging to this group
            </summary>
        </member>
        <member name="T:OEC.API.ContractGroupList">
            <summary>
            List of contract groups - see <see cref="P:OEC.API.OECClient.ContractGroups">OECClient.ContractGroups</see>.
            </summary>
            <remarks>
            The list is indexed by ID and Name
            </remarks>
        </member>
        <member name="T:OEC.API.OECError">
            <summary>
            OEC Error
            </summary>
        </member>
        <member name="F:OEC.API.OECError.Trader">
            <summary>
            Trader caused the error or null
            </summary>
        </member>
        <member name="T:OEC.API.NamespaceDoc">
            <summary>
            This namespace contains all the object and container classes needed to work with OEC API.<br/>
            See <see cref="T:OEC.API.OECClient"/> class for API overview 
            </summary>
        </member>
        <member name="T:OEC.API.Currency">
            <summary>
            Currency representation.
            </summary>
            <remarks>
            The <see cref="P:OEC.API.Currency.CurrentPrice"/> property holds the conversion rate from given currency to <see cref="P:OEC.API.Currency.Default"/> one.
            Conversion rate could be updated - see <see cref="E:OEC.API.OECClient.OnCurrencyPriceChanged"/> event.<br/>
            For the default (USD) currency, conversion rate is always 1.
            </remarks>
            <seealso cref="P:OEC.API.Contract.Currency"/>
            <seealso cref="P:OEC.API.Balance.Currency"/>
        </member>
        <member name="M:OEC.API.Currency.CompareTo(OEC.API.Currency)">
            <summary>
            Compares two currencies
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:OEC.API.Currency.CurrentPrice">
            <summary>
            Current price (conversion rate to default currency) 
            </summary>
        </member>
        <member name="P:OEC.API.Currency.IsDefault">
            <summary>
            Checks whether the currency is default (USD)
            </summary>
        </member>
        <member name="P:OEC.API.Currency.Default">
            <summary>
            Default currency (USD)
            </summary>
        </member>
        <member name="T:OEC.API.CurrencyList">
            <summary>
            List of <see cref="T:OEC.API.Currency">currencies</see> - see <see cref="P:OEC.API.OECClient.Currencies">OECClient.Currencies</see>
            </summary>
            <remarks>
            The list is indexed by ID and Name
            </remarks>
        </member>
        <member name="T:OEC.API.CustomCompoundLegList">
            <summary>
            The list of custom compound legs
            </summary>
            <seealso cref="T:OEC.API.CustomCompoundLeg"/>
            <exclude/>
        </member>
        <member name="T:OEC.API.CustomCompound">
            <summary>
            Declaration of custom compound contract. It should be used in conjuction with complex equity options orders
            </summary>
            <seealso cref="T:OEC.API.OrderDraft"/>
            <seealso cref="T:OEC.API.Contract"/>
            <seealso cref="T:OEC.Data.CompoundType"/>
            <seealso cref="T:OEC.API.CustomCompoundError"/>
            <exclude/>
        </member>
        <member name="F:OEC.API.CustomCompound.CompoundType">
            <summary>
            Type of compound
            </summary>
        </member>
        <member name="F:OEC.API.CustomCompound.Legs">
            <summary>
            Legs of compound
            </summary>
        </member>
        <member name="M:OEC.API.CustomCompound.AddLeg(OEC.API.Contract,OEC.Data.OrderSide,System.Int32)">
            <summary>
            Adds one more leg
            </summary>
            <param name="Contract">Contract of the leg</param>
            <param name="Side">Side of the leg</param>
            <param name="Qty"> Quantity of the leg. It should be greater than zero </param>
        </member>
        <member name="M:OEC.API.CustomCompound.Verify(OEC.API.CustomCompoundOrderType)">
            <summary>
            Verifies the compound declaration
            </summary>
        </member>
        <member name="M:OEC.API.CustomCompound.ToContract">
            <summary>
            Creates contract
            </summary>
            <returns></returns>
        </member>
        <member name="M:OEC.API.CustomCompound.ToString">
            <summary>
            Converts to its string representation
            </summary>
            <returns></returns>
        </member>
        <member name="T:OEC.API.CustomCompoundLeg">
            <summary>
            Custom compound leg
            </summary>
            <exclude />
        </member>
        <member name="F:OEC.API.CustomCompoundLeg.Side">
            <summary>
            Side of the leg
            </summary>
        </member>
        <member name="M:OEC.API.CustomCompoundLeg.ToString">
            <summary>
            Converts the object to its string representation
            </summary>
            <returns></returns>
        </member>
        <member name="T:OEC.API.CustomCompoundError">
            <summary>
            Details of error in custom compounds
            </summary>
            <exclude />
        </member>
        <member name="F:OEC.API.CustomCompoundError.OK">
            <summary>
            All is OK
            </summary>
        </member>
        <member name="F:OEC.API.CustomCompoundError.CannotMixPutCall">
            <summary>
            The symbols of both legs must either be both calls or both puts.  Can't mix. (Spread)
            </summary>
        </member>
        <member name="F:OEC.API.CustomCompoundError.ShouldMixPutCall">
            <summary>
            The symbols of both legs must opposites (call and put or put and call).  Cannot both be the same.
            </summary>
        </member>
        <member name="F:OEC.API.CustomCompoundError.SymbolAppearedMoreThanOnce">
            <summary>
            None of the same symbols can appear more than once (Condor)
            </summary>
        </member>
        <member name="F:OEC.API.CustomCompoundError.IncorrectSellBuyDirection">
            <summary>
            All legs should be either "To Open", either "To Close"
            </summary>
        </member>
        <member name="F:OEC.API.CustomCompoundError.QtyShouldBeSame">
            <summary>
            The Qty of each leg must be the same.
            </summary>
        </member>
        <member name="F:OEC.API.CustomCompoundError.IncorrectDebitCredit">
            <summary>
            For Straddle: if both values are:
            * Buy to Open, then order must NOT be a credit.
            * Sell to Open, then order must NOT be a debit.
            </summary>
        </member>
        <member name="F:OEC.API.CustomCompoundError.UnsupportedCompoundType">
            <summary>
            Unsupported compound type
            </summary>
        </member>
        <member name="F:OEC.API.CustomCompoundError.IncorrectLegs">
            <summary>
            Incorrect legs
            </summary>
        </member>
        <member name="T:OEC.API.CustomCompoundOrderType">
            <summary>
            Order type of custom compound
            </summary>
            <exclude />
        </member>
        <member name="F:OEC.API.CustomCompoundOrderType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:OEC.API.CustomCompoundOrderType.Market">
            <summary>
            Market
            </summary>
        </member>
        <member name="F:OEC.API.CustomCompoundOrderType.Even">
            <summary>
            Even
            </summary>
        </member>
        <member name="F:OEC.API.CustomCompoundOrderType.Debit">
            <summary>
            Debit
            </summary>
        </member>
        <member name="F:OEC.API.CustomCompoundOrderType.Credit">
            <summary>
            Credit
            </summary>
        </member>
        <member name="T:OEC.API.DealQuoteSubscription">
            <exclude />
        </member>
        <member name="F:OEC.API.DealQuoteSubscription.Side">
            <summary>
            Side of Deal Quote Subscription.
            </summary>
        </member>
        <member name="F:OEC.API.DealQuoteSubscription.SwapToContract">
            <summary>
            Target contract to swap. 
            </summary>
        </member>
        <member name="P:OEC.API.DealQuoteSubscription.Quantity">
            <summary>
            Gets Quantity. 
            </summary>
        </member>
        <member name="P:OEC.API.DealQuoteSubscription.Quantity2">
            <summary>
            Gets Quantity2. 
            </summary>
        </member>
        <member name="T:OEC.API.DealQuote">
            <exclude />
        </member>
        <member name="M:OEC.API.DealQuote.ToString">
            <summary>
            Returns text representation of DealQuote instance. 
            </summary>
        </member>
        <member name="P:OEC.API.DealQuote.ID">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.DealQuote.State">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.DealQuote.Subscription">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.DealQuote.ValidUntil">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.DealQuote.QuoteData">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.DealQuote.QuoteData2">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.DealQuote.CombinedPtsBid">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.DealQuote.CombinedPtsOffer">
            <summary>
            </summary>
        </member>
        <member name="T:OEC.API.DealQuoteData">
            <summary>
            Represents DealQuote data. 
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.DealQuoteData.BidSize">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.DealQuoteData.MinBidSize">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.DealQuoteData.OfferSize">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.DealQuoteData.MinOfferSize">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.DealQuoteData.BidPx">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.DealQuoteData.OfferPx">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.DealQuoteData.BidForwardPoints">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.DealQuoteData.OfferForwardPoints">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.DealQuoteData.BidSpotRate">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.DealQuoteData.OfferSpotRate">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.DealQuoteData.SettleDate">
            <summary>
            </summary>
        </member>
        <member name="T:OEC.API.DetailedPositionList">
            <summary>
            List of detailed <see cref="T:OEC.API.Position"/> lists for an <see cref="T:OEC.API.Account"/>. See <see cref="P:OEC.API.Account.DetailedPositions"/>.
            </summary>
            <remarks>
            List contails <see cref="T:OEC.API.PositionList"/> items indexed by contract.<br/>
            Each PositionList could contain zero or more closed positions and one open position, if any.
            </remarks>
            <seealso cref="T:OEC.API.AvgPositionList"/>
        </member>
        <member name="M:OEC.API.DetailedPositionList.Add(OEC.API.Contract,OEC.API.PositionList)">
            <summary>
            Add a position list
            </summary>
            <param name="contract">Contract</param>
            <param name="poslist">List of detailed positions</param>
        </member>
        <member name="M:OEC.API.DetailedPositionList.GetOpenPosition(OEC.API.Contract)">
            <summary>
            Gets an open position from detailed position list for a given <see cref="T:OEC.API.Contract"/>
            </summary>
            <param name="contract">contract of position</param>
            <returns>detailed position or null for a flat position</returns>
        </member>
        <member name="P:OEC.API.DetailedPositionList.Item(OEC.API.Contract)">
            <summary>
            Gets the detailed position list for a given <see cref="T:OEC.API.Contract"/>
            </summary>
            <param name="contract">contract</param>
            <returns>Detailed position list</returns>
        </member>
        <member name="T:OEC.API.EquityBalance">
            <summary>
            Equity and equity options cash balance and profit/loss summary.
            </summary>
            <seealso cref="T:OEC.API.Balance"/>
            <exclude/>
        </member>
        <member name="P:OEC.API.EquityBalance.NetLiquidatingValue">
            <summary>
            Net Liquidating Value calculated as account cash balance without Open P/L
            </summary>
        </member>
        <member name="P:OEC.API.EquityBalance.OtherSecurityBalance">
            <summary>
            Securities, Stocks
            </summary>
        </member>
        <member name="P:OEC.API.EquityBalance.OptionsBalance">
            <summary>
            Securities, Options
            </summary>
        </member>
        <member name="P:OEC.API.EquityBalance.TotalSecuritiesBalance">
            <summary>
            Securities, Total
            </summary>
        </member>
        <member name="P:OEC.API.EquityBalance.MarginBalance">
            <summary>
            Money Market and Cash, Margin Balance
            </summary>
        </member>
        <member name="P:OEC.API.EquityBalance.MoneyMarketBalance">
            <summary>
            Money Market and Cash, Money Market Funds
            </summary>
        </member>
        <member name="P:OEC.API.EquityBalance.CashBalance">
            <summary>
            Money Market and Cash, Cash Balance
            </summary>
        </member>
        <member name="P:OEC.API.EquityBalance.Cash">
            <summary>
            Money Market and Cash, Cash = Cash Balance + Margin Balance
            </summary>
        </member>
        <member name="P:OEC.API.EquityBalance.TotalMoneyMarketAndCash">
            <summary>
            Money Market and Cash, Total
            </summary>
        </member>
        <member name="P:OEC.API.EquityBalance.MarginEquityPercentage">
            <summary>
            Requirements, Margin Equity %
            </summary>
        </member>
        <member name="P:OEC.API.EquityBalance.PendingPurchases">
            <summary>
            Requirements, Pending Purchase
            </summary>
        </member>
        <member name="P:OEC.API.EquityBalance.OptionsRequirements">
            <summary>
            Requirements, Options Requirements
            </summary>
        </member>
        <member name="P:OEC.API.EquityBalance.CashAvalaible">
            <summary>
            Buying Power, Cash Available to Withdraw
            </summary>
        </member>
        <member name="P:OEC.API.EquityBalance.BuyingPower">
            <summary>
            Buying Power, Stock
            </summary>
        </member>
        <member name="P:OEC.API.EquityBalance.MarginAvailable">
            <summary>
            Buying Power, Options
            </summary>
        </member>
        <member name="T:OEC.API.ContractMonth">
            <summary>
            The month in which seller must deliver and buyer must accept an underlying contract.
            </summary>
        </member>
        <member name="P:OEC.API.ContractMonth.BaseContract">
            <summary>
            Base contract instance. See <see cref="T:OEC.API.BaseContract"/>.
            </summary>
        </member>
        <member name="P:OEC.API.ContractMonth.ExpirationDate">
            <summary>
            Date of contract expiration
            </summary>
        </member>
        <member name="P:OEC.API.ContractMonth.ExpirationMonth">
            <summary>
            Expiration month and year, in YYMM format
            </summary>
        </member>
        <member name="P:OEC.API.ContractMonth.Symbol">
            <summary>
            String representation of <see cref="P:OEC.API.ContractMonth.ExpirationMonth"/> 
            </summary>
        </member>
        <member name="T:OEC.API.ProductCalendar">
            <summary>
            List of ContractMonths for a BaseContract
            <seealso cref="T:OEC.API.BaseContract"/>
            <seealso cref="T:OEC.API.ContractMonth"/>
            </summary>
        </member>
        <member name="T:OEC.API.MarginCalculator.MarginCalculatorResponse">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="T:OEC.API.MarginCalculator.MarginCalculatorRequest">
            <summary>
            </summary>
            <exclude/>
        </member>
        <member name="T:OEC.API.MarginCalculator.HypoPosition">
            <summary>
            </summary>
            <exclude/>
        </member>
        <member name="T:OEC.API.MarginCalculator.HypoOrder">
            <summary>
            </summary>
            <exclude/>
        </member>
        <member name="T:OEC.API.MarginCalculator.HypoOrderList">
            <summary>
            </summary>
            <exclude/>
        </member>
        <member name="T:OEC.API.MarginCalculator.HypoPositionList">
            <summary>
            </summary>
            <exclude/>
        </member>
        <member name="T:OEC.API.PositionFill">
            <summary>
            Fill of the detailed <see cref="T:OEC.API.Position"/>.
            </summary>
            <remarks>
            Position fill could be copy of order fill, part of split order fill 
            or previous sesion position. 
            See also <see cref="P:OEC.API.Account.DetailedPositions"/>
            </remarks>
        </member>
        <member name="M:OEC.API.PositionFill.Split(System.Int32)">
            <summary>
            Reduce the position to given quantity
            </summary>
            <param name="newQty">new position quantity</param>
            <returns>remainder</returns>
        </member>
        <member name="P:OEC.API.PositionFill.Quantity">
            <summary>
            Quantity of fill with a '+' for long fills, '-' for short ones
            </summary>
        </member>
        <member name="P:OEC.API.PositionFill.Price">
            <summary>
            Fill price
            </summary>
        </member>
        <member name="P:OEC.API.PositionFill.AbsQuantity">
            <summary>
            Absolute value for quantity
            </summary>
        </member>
        <member name="P:OEC.API.PositionFill.SourceFill">
            <summary>
            Fill source of a position fill
            </summary>
        </member>
        <member name="P:OEC.API.PositionFill.SourcePreviousPosition">
            <summary>
            Position source of a position fill
            </summary>
        </member>
        <member name="T:OEC.API.PositionFillList">
            <summary>
            List of <see cref="T:OEC.API.PositionFill">PositionFills</see>
            </summary>
        </member>
        <member name="T:OEC.API.PostAllocationBlockItem">
            <summary>
            Describes an account and its parameters in post-allocation block
            </summary>
        </member>
        <member name="P:OEC.API.PostAllocationBlockItem.Valid">
            <summary>
            True - if allocation block item has Lots. 
            </summary>
        </member>
        <member name="P:OEC.API.PostAllocationBlockItem.Lots">
            <summary>
            Item Lots
            </summary>
        </member>
        <member name="P:OEC.API.PostAllocationBlockItem.Account">
            <summary>
            Item Account
            </summary>
        </member>
        <member name="P:OEC.API.PostAllocationBlockItem.ExternalAccount">
            <summary>
            Post-allocate to an external account
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.PostAllocationBlockItem.AllocationPrice">
            <summary>
            Allocation price
            </summary>
        </member>
        <member name="T:OEC.API.PostAllocationBlockItems">
            <summary>
            </summary>
        </member>
        <member name="T:OEC.API.PostAllocationBlock">
            <summary>
            Post-allocation block: post-allocation instructions for one of order's contract
            <seealso cref="T:OEC.API.PostAllocationInstructions"/>
            </summary>
        </member>
        <member name="M:OEC.API.PostAllocationBlock.#ctor(System.Boolean)">
            <summary>
            Creates new empty post-allocation instructions
            </summary>
            <param name="IsAPS">Indicates whether post-allocation should use Average Price System method</param>
        </member>
        <member name="M:OEC.API.PostAllocationBlock.Add(OEC.API.ExternalAccount,System.Int32,System.Double)">
            <summary>
            Add account to post-allocation block
            </summary>
            <param name="account">Account</param>
            <param name="lots">Allocated lots</param>
            <param name="allocationPrice">Allocation price</param>
            <returns>new AB item</returns>
            <exclude />
        </member>
        <member name="M:OEC.API.PostAllocationBlock.Add(OEC.API.Account,System.Int32,System.Double)">
            <summary>
            Add account to post-allocation block
            </summary>
            <param name="account">Account</param>
            <param name="lots">Allocated lots</param>
            <param name="allocationPrice">Allocation price</param>
            <returns>new AB item</returns>
        </member>
        <member name="M:OEC.API.PostAllocationBlock.CheckPostAllocationInstructions(OEC.API.Order,OEC.API.Contract)">
            <summary>
            Checks post-allocation instructions for specified order and contract (order's contract or one of leg for spread orders)
            </summary>
            <param name="order">Order that will be post-allocated</param>
            <param name="contract">Contract that will be post-allocated</param>
            <returns>An enumeration value with result of check</returns>
        </member>
        <member name="P:OEC.API.PostAllocationBlock.IsAPS">
            <summary>
            Indicates whether post-allocation uses Average Price System method
            </summary>
        </member>
        <member name="P:OEC.API.PostAllocationBlock.Valid">
            <summary>
            True - if allocation block has at least one account item and all account items have Lots. 
            </summary>
        </member>
        <member name="P:OEC.API.PostAllocationBlock.Items">
            <summary>
            Items - Account and Account parameters (Lots etc.)
            </summary>
        </member>
        <member name="P:OEC.API.PostAllocationBlock.TotalLots">
            <summary>
            Total allocated lots 
            </summary>
            <remarks>
            Sum of allocated <see cref="P:OEC.API.PostAllocationBlockItem.Lots"/> for each account in this post-allocation block
            </remarks>
        </member>
        <member name="T:OEC.API.ExternalAccount">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="T:OEC.API.PostAllocationInstructions">
            <summary>
            Describes post-allocation instructions
            <seealso cref="P:OEC.API.Order.PostAllocationInstructions"/>
            <seealso cref="M:OEC.API.OECClient.PostAllocate(OEC.API.Order,OEC.API.Contract,OEC.API.PostAllocationBlock)"/>
            </summary>
        </member>
        <member name="P:OEC.API.PostAllocationInstructions.Item(OEC.API.Contract)">
            <summary>
            Get an allocation block for particular contract
            </summary>
            <param name="contract"></param>
            <returns></returns>
        </member>
        <member name="P:OEC.API.PostAllocationInstructions.State">
            <summary>
            State of post-allocation
            </summary>
        </member>
        <member name="T:OEC.API.QuoteDetails">
            <summary>
            Quote Details
            </summary>
            <exclude />
        </member>
        <member name="F:OEC.API.QuoteDetails.Description">
            <summary>
            Company description
            </summary>
        </member>
        <member name="F:OEC.API.QuoteDetails.Details">
            <summary>
            List of optional unformatted properties:
            DayRange, AvgVolume, EPS, Wk52Range, MarketCap, PEttm, PrimaryEx, OutShares, ContractSize, ExpDate, DaysToExp, etc
            </summary>
        </member>
        <member name="F:OEC.API.QuoteDetails.Fundamentals">
            <summary>
            List of optional unformatted properties:
            InsideOwnr, HeldByInstitution, Debt, ShortRatio, OperatingMargin, Beta, ROA, NetIncome, FreeCashFlow, ROEpercent,
            ContractSize, Tick, ContractMonths, TradingHours, Settlement, InitialMargin, DayTradingMargin, MaintenanceMargin,
            FirstNoticeDay, LastTradingDay, etc.
            </summary>
        </member>
        <member name="F:OEC.API.QuoteDetails.EarningsPerShare">
            <summary>
            List of optional unformatted properties:
            LastQuarter, Surprise, NextQuarter, NextEarnings, NextYear, etc
            </summary>
        </member>
        <member name="F:OEC.API.QuoteDetails.AnalystRecommendations">
            <summary>
            List of optional unformatted properties:
            StrongBuy, Hold, ModerateBuy, ModerateSell, StrongSell, AvgRecom, etc.
            </summary>
        </member>
        <member name="F:OEC.API.QuoteDetails.DividendInformation">
            <summary>
            List of optional unformatted properties:
            Frequency, AnnounceDate, PerShare, ExDividendDate, Annual, RecordDate, Rate, PaymentDate, etc.
            </summary>
        </member>
        <member name="F:OEC.API.QuoteDetails.KeyValuationRatios">
            <summary>
            List of optional unformatted properties:
            PriceToEarningsTTM, PriceToSales, PriceToEarningsForward, PriceCashFlow, EarningsPerShareEPS, BookValuePerShare,
            PEG, PriceToBook, DebtEquity, CashFlowShare, etc.
            </summary>
        </member>
        <member name="F:OEC.API.QuoteDetails.OptionStatistics">
            <summary>
            List of optional unformatted properties:
            TodayOptionVolumeDelayed, AvgOptionVolume, OpenInterestDelayed, AvgOpenInterest, AvgPutCallRatio, HistoricVolatility30Day,
            PutCallRatio, ImpliedVolatility, etc.
            </summary>
        </member>
        <member name="M:OEC.API.RiskLimitDetailKey.#ctor(OEC.Data.LimitType,OEC.API.Account,System.Nullable{OEC.Data.AccountType},OEC.API.TraderCategory,OEC.API.Contract,System.String,OEC.API.Exchange,System.Nullable{OEC.Data.ContractKind},System.Int32)">
            <summary>
            
            </summary>
            <param name="limitType"></param>
            <param name="account">Optional</param>
            <param name="accountType">Optional</param>
            <param name="userCategory">Optional</param>
            <param name="contract">Optional</param>
            <param name="underlying">Optional</param>
            <param name="exchange">Optional</param>
            <param name="contractKind">Optional</param>
            <param name="providerID"></param>
        </member>
        <member name="P:OEC.API.RiskLimitDetailKey.AccountID">
            <summary>
            Account ID. Optional.
            <seealso cref="T:OEC.API.Account"/>
            </summary>
        </member>
        <member name="P:OEC.API.RiskLimitDetailKey.ExchangeID">
            <summary>
            Exchange ID. Optional.
            <seealso cref="T:OEC.API.Exchange"/>
            </summary>
        </member>
        <member name="P:OEC.API.RiskLimitDetailKey.ContractID">
            <summary>
            Contract ID. Optional.
            <seealso cref="T:OEC.API.Contract"/>
            </summary>
        </member>
        <member name="P:OEC.API.RiskLimitDetailKey.TraderCategoryID">
            <summary>
            Trader's category ID. Optional.
            <seealso cref="T:OEC.API.TraderCategory"/>
            </summary>
        </member>
        <member name="P:OEC.API.RiskLimitDetailKey.Underlying">
            <summary>
            Underlying contract. Optional.
            <seealso cref="T:OEC.API.BaseContract"/>
            </summary>
        </member>
        <member name="P:OEC.API.RiskLimitDetailKey.ContractKind">
            <summary>
            Contract kind. Optional.
            </summary>
        </member>
        <member name="P:OEC.API.RiskLimitDetailKey.AccountType">
            <summary>
            Account type. Optional.
            </summary>
        </member>
        <member name="P:OEC.API.RiskLimitDetailKey.ProviderID">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.RiskLimitDetailKey.Type">
            <summary>
            Limit Type
            </summary>
        </member>
        <member name="T:OEC.API.RiskLimitDetail">
            <summary>
            Risk limit detail
            </summary>
        </member>
        <member name="F:OEC.API.RiskLimitDetail.Key">
            <summary>
            Unique key of risk limit
            </summary>
        </member>
        <member name="M:OEC.API.RiskLimitDetail.#ctor(OEC.API.RiskLimitDetailKey,System.Boolean,System.Boolean,System.Nullable{System.Double},System.Nullable{System.Double})">
            <exclude/>
        </member>
        <member name="P:OEC.API.RiskLimitDetail.Value">
            <summary>
            Current value
            </summary>
        </member>
        <member name="P:OEC.API.RiskLimitDetail.ApproveValue">
            <summary>
            Approved value
            </summary>
        </member>
        <member name="P:OEC.API.RiskLimitDetail.NewValue">
            <summary>
            New value
            </summary>
        </member>
        <member name="P:OEC.API.RiskLimitDetail.IsVirtual">
            <exclude/>
        </member>
        <member name="P:OEC.API.RiskLimitDetail.Submitter">
            <exclude/>
        </member>
        <member name="T:OEC.API.RiskLimitDetailList">
            <summary>
            Risk limit list
            </summary>
        </member>
        <member name="T:OEC.API.Route">
            <summary>
            Execution route
            </summary>
        </member>
        <member name="M:OEC.API.Route.ToString">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="P:OEC.API.Route.ContractKinds">
            <summary>
            List of applicable contract kinds
            </summary>
        </member>
        <member name="T:OEC.API.RouteList">
            <summary>
            List of routes
            </summary>
        </member>
        <member name="T:OEC.API.ReadonlyContractKindList">
            <summary>
            Immutable set of unique contract kinds
            </summary>
        </member>
        <member name="M:OEC.API.ReadonlyContractKindList.Has(OEC.Data.ContractKind)">
            <summary>
            Checks has or has not the list some ContractKind
            </summary>
            <param name="ContractKind"></param>
            <returns>Returns true, if the list contains ContractKind</returns>
        </member>
        <member name="M:OEC.API.ReadonlyContractKindList.GetEnumerator">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="P:OEC.API.ReadonlyContractKindList.Count">
            <summary>
            Gets the number of items contained in the collection
            </summary>
        </member>
        <member name="T:OEC.API.ContractKindList">
            <summary>
            Set of unique contract kinds
            </summary>
        </member>
        <member name="M:OEC.API.ContractKindList.AddRange(System.Collections.Generic.IEnumerable{OEC.Data.ContractKind})">
            <summary>
            Adds a collection of items
            </summary>
            <param name="contractKinds">Collection of items</param>
        </member>
        <member name="M:OEC.API.ContractKindList.Add(OEC.Data.ContractKind)">
            <summary>
            Adds an element to the collection
            </summary>
            <param name="contractKind">An element</param>
        </member>
        <member name="M:OEC.API.ContractKindList.Remove(OEC.Data.ContractKind)">
            <summary>
            Removes an element to the collection
            </summary>
            <param name="contractKind">An element</param>
        </member>
        <member name="T:OEC.API.Strategies.Info.ServerStrategyParam">
            <summary>
            Represents the information for ServerStrategyParam. 
            </summary>
            <exclude />
        </member>
        <member name="M:OEC.API.Strategies.Info.ServerStrategyParam.#ctor(OEC.Data.ServerStrategyParamInfo)">
            <summary>
            Deserializing constructor. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.Info.ServerStrategyParam.CreateParam">
            <summary>
            Creates new ServerStrategyParam instance with default value, including all child params. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.Info.ServerStrategyParam.ValidateParam(OEC.API.Strategies.ServerStrategyParam)">
            <summary>
            Validates the specified param, including all child params. 
            If the validation failed, an exception is thrown. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.Info.ServerStrategyParam.Name">
            <summary>
            Gets the name of ServerStrategyParam. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.Info.ServerStrategyParam.Type">
            <summary>
            Gets the data type of ServerStrategyParam. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.Info.ServerStrategyParam.Description">
            <summary>
            Gets the description of ServerStrategyParam. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.Info.ServerStrategyParam.Category">
            <summary>
            Gets the category of ServerStrategyParam. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.Info.ServerStrategyParam.Optional">
            <summary>
            Gets a value indicating the param is optional and may be missing (in this case default value will be used). 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.Info.ServerStrategyParam.DefaultValue">
            <summary>
            Gets the default value of ServerStrategyParam. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.Info.ServerStrategyParam.DomainValues">
            <summary>
            Gets a list of available values if the param is of Enum type, or null. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.Info.ServerStrategyParam.Parent">
            <summary>
            Gets the parent param or null if this param has no parent. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.Info.ServerStrategyParam.Children">
            <summary>
            Gets a list of child params. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.Info.ServerStrategyParam.FullName">
            <summary>
            Gets the full name of this param. 
            Full name includes the param name with names of all parents. 
            </summary>
        </member>
        <member name="T:OEC.API.Strategies.Info.ServerStrategyParamList">
            <summary>
            Represents a list of Info.ServerStrategyParam instances. 
            </summary>
            <exclude />
        </member>
        <member name="M:OEC.API.Strategies.Info.ServerStrategyParamList.#ctor(System.Collections.Generic.IEnumerable{OEC.Data.ServerStrategyParamInfo},OEC.API.Strategies.Info.ServerStrategyParam)">
            <summary>
            Deserializing constructor. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.Info.ServerStrategyParamList.ValueParam(System.String)">
            <summary>
            Returns Info.ServerStrategyParam instance for the specified param fullName or null if no params found. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.Info.ServerStrategyParamList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this list. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.Info.ServerStrategyParamList.ValueParams">
            <summary>
            Gets a sequence of value (that's terminal, not container) params. 
            The full name of a param can be used to get/set a value without iterating through a param tree. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.Info.ServerStrategyParamList.Item(System.String)">
            <summary>
            Returns Info.ServerStrategyParam instance for the specified paramName or null if no params found. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.Info.ServerStrategyParamList.Count">
            <summary>
            Gets the number of params contained in this list. 
            </summary>
        </member>
        <member name="T:OEC.API.Strategies.Info.ServerStrategy">
            <summary>
            Represents the information for ServerStrategy. 
            </summary>
            <exclude />
        </member>
        <member name="M:OEC.API.Strategies.Info.ServerStrategy.#ctor(OEC.Data.ServerStrategyInfo)">
            <summary>
            Deserializing constructor. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.Info.ServerStrategy.CreateParamList">
            <summary>
            Creates new Strategies.ServerStrategyParamList instance containing complete set of the strategy params with default values. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.Info.ServerStrategy.ValidateParamList(OEC.API.Strategies.ServerStrategyParamList)">
            <summary>
            Validates all params in the specified list. 
            If the validation failed, an exception is thrown. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.Info.ServerStrategy.Type">
            <summary>
            Gets the type of ServerStrategy. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.Info.ServerStrategy.Description">
            <summary>
            Gets the description of ServerStrategy. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.Info.ServerStrategy.Params">
            <summary>
            Gets a list of param informations for server strategy. 
            </summary>
        </member>
        <member name="T:OEC.API.Strategies.Info.ServerStrategyList">
            <summary>
            Represents a list of Info.ServerStrategy instances. 
            </summary>
            <exclude />
        </member>
        <member name="M:OEC.API.Strategies.Info.ServerStrategyList.#ctor(System.Collections.Generic.IEnumerable{OEC.Data.ServerStrategyInfo})">
            <summary>
            Deserializing constructor. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.Info.ServerStrategyList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this list. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.Info.ServerStrategyList.Item(System.String)">
            <summary>
            Returns ServerStrategy instance for the specified strategyType or null if no strategies found. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.Info.ServerStrategyList.Count">
            <summary>
            Gets the number of strategies contained in this list. 
            </summary>
        </member>
        <member name="T:OEC.API.Strategies.ServerStrategy">
            <summary>
            Represents a server-side strategy. 
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.Strategies.ServerStrategy.Type">
            <summary>
            Gets the type of this ServerStrategy. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.ServerStrategy.Params">
            <summary>
            Gets the param list of this ServerStrategy. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.ServerStrategy.RootOrder">
            <summary>
            Gets a root order of this ServerStrategy or null if no root order assigned to the ServerStrategy. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.ServerStrategy.State">
            <summary>
            Gets the state of this ServerStrategy. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.ServerStrategy.Orders">
            <summary>
            Gets a list of strategy orders. 
            </summary>
        </member>
        <member name="T:OEC.API.Strategies.ServerStrategyList">
            <summary>
            Represents a list of ServerStrategy instances. 
            </summary>
            <exclude />
        </member>
        <member name="T:OEC.API.Strategies.ServerStrategyChild">
            <summary>
            Represents an abstract child of ServerStrategy. 
            </summary>
            <exclude />
        </member>
        <member name="M:OEC.API.Strategies.ServerStrategyChild.#ctor(OEC.API.Strategies.ServerStrategy,System.Int32)">
            <summary>
            Initializes new ServerStrategyChild instance. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.ServerStrategyChild.#ctor">
            <summary>
            Initializes new ServerStrategyChild instance. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.ServerStrategyChild.Parent">
            <summary>
            Gets the parent ServerStrategy for this child. 
            </summary>
        </member>
        <member name="T:OEC.API.Strategies.ServerStrategyPhantomOrder">
            <summary>
            Represents a ServerStrategy phantom order. 
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.Strategies.ServerStrategyPhantomOrder.Quantity">
            <summary>
            Gets quantity of this strategy order. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.ServerStrategyPhantomOrder.Price">
            <summary>
            Gets price of this strategy order. 
            </summary>
        </member>
        <member name="T:OEC.API.Strategies.ServerStrategyPhantomOrderList">
            <summary>
            Represents a list of ServerStrategyPhantomOrder instances. 
            </summary>
            <exclude />
        </member>
        <member name="M:OEC.API.Strategies.ReadOnlyState.Check">
            <summary>
            Throws InvalidOperationException if an object is read-only. 
            </summary>
        </member>
        <member name="T:OEC.API.Strategies.ServerStrategyParam">
            <summary>
            Represents a param of ServerStrategy. 
            </summary>
            <exclude />
        </member>
        <member name="M:OEC.API.Strategies.ServerStrategyParam.#ctor(OEC.Data.ServerStrategyParam)">
            <summary>
            Deserializing constructor. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.ServerStrategyParam.Create(OEC.Data.ServerStrategyParamType,System.String,System.Object)">
            <summary>
            Creates new ServerStrategyParam instance. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.ServerStrategyParam.Create(System.String,System.Int32)">
            <summary>
            Creates new ServerStrategyParam instance. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.ServerStrategyParam.Create(System.String,System.Int64)">
            <summary>
            Creates new ServerStrategyParam instance. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.ServerStrategyParam.Create(System.String,System.Double)">
            <summary>
            Creates new ServerStrategyParam instance. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.ServerStrategyParam.Create(System.String,System.Boolean)">
            <summary>
            Creates new ServerStrategyParam instance. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.ServerStrategyParam.Create(System.String,System.String)">
            <summary>
            Creates new ServerStrategyParam instance. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.ServerStrategyParam.Create(System.String,System.DateTime)">
            <summary>
            Creates new ServerStrategyParam instance. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.ServerStrategyParam.Clone(System.Boolean)">
            <summary>
            Returns a copy of this ServerStrategyParam instance. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.ServerStrategyParam.ToString">
            <summary>
            Returns string representation of this object. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.ServerStrategyParam.Name">
            <summary>
            Gets the name of this ServerStrategyParam. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.ServerStrategyParam.Type">
            <summary>
            Gets the data type of this ServerStrategyParam. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.ServerStrategyParam.FullName">
            <summary>
            Gets the full name of this param. 
            Full name includes the param name with names of all parents. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.ServerStrategyParam.Parent">
            <summary>
            Gets the parent param or null if this param has no parent. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.ServerStrategyParam.Children">
            <summary>
            Gets a list of child params. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.ServerStrategyParam.ReadOnly">
            <summary>
            Gets a value indicating this ServerStrategyParam is read-only. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.ServerStrategyParam.Value">
            <summary>
            Gets or sets value of this ServerStrategyParam. 
            </summary>
        </member>
        <member name="T:OEC.API.Strategies.ServerStrategyParamList">
            <summary>
            Represents a list of ServerStrategyParam instances. 
            </summary>
            <exclude />
        </member>
        <member name="M:OEC.API.Strategies.ServerStrategyParamList.#ctor(OEC.Data.ServerStrategyParams,OEC.API.Strategies.ServerStrategyParam)">
            <summary>
            Deserializing constructor. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.ServerStrategyParamList.#ctor(OEC.API.Strategies.ServerStrategyParam[])">
            <summary>
            Initializes new ServerStrategyParamList instance. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.ServerStrategyParamList.SetParam(OEC.API.Strategies.ServerStrategyParam,OEC.API.Strategies.ServerStrategyParam)">
            <summary>
            Sets ServerStrategyParam to this list. 
            If the param with the same name already exists, it will be overridden. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.ServerStrategyParamList.ValueParam(System.String)">
            <summary>
            Returns ServerStrategyParam instance for the specified param fullName or null if no params found. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.ServerStrategyParamList.RemoveParam(System.String)">
            <summary>
            Removes ServerStrategyParam with the specified paramName. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.ServerStrategyParamList.Clear">
            <summary>
            Removes all params from this list. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.ServerStrategyParamList.ToString">
            <summary>
            Returns string representation of this object. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.ServerStrategyParamList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this list. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.ServerStrategyParamList.ReadOnly">
            <summary>
            Gets a value indicating this ServerStrategyParamList is read-only. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.ServerStrategyParamList.Item(System.String)">
            <summary>
            Returns ServerStrategyParam instance for the specified paramName or null if no params found. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.ServerStrategyParamList.Count">
            <summary>
            Gets the number of params contained in this list. 
            </summary>
        </member>
        <member name="T:OEC.API.PortfolioMargin">
            <summary>
            Portfolio margining
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.PortfolioMargin.Current">
            <summary>
            Current portfolio margining for open positions
            </summary>
        </member>
        <member name="P:OEC.API.PortfolioMargin.Hypo">
            <summary>
            Hypothetical portfolio margining for open positions and working orders
            </summary>
            <exclude />
        </member>
        <member name="T:OEC.API.PortfolioMargin.PortfolioMarginValues">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.PortfolioMargin.PortfolioMarginValues.InitialRisk">
            <summary>
            Initial Margin Risk
            </summary>
        </member>
        <member name="P:OEC.API.PortfolioMargin.PortfolioMarginValues.MaintenanceRisk">
            <summary>
            Maintenance Margin Risk
            </summary>
        </member>
        <member name="P:OEC.API.PortfolioMargin.PortfolioMarginValues.RiskValue">
            <summary>
            OEC Risk Value
            </summary>
        </member>
        <member name="P:OEC.API.PortfolioMargin.PortfolioMarginValues.NetOptionValue">
            <summary>
            Net Option Value
            </summary>
        </member>
        <member name="P:OEC.API.PortfolioMargin.PortfolioMarginValues.InitialReq">
            <summary>
            Initial Requirements (Initial Margin Risk less Net Option Value)
            </summary>
        </member>
        <member name="P:OEC.API.PortfolioMargin.PortfolioMarginValues.MaintenanceReq">
            <summary>
            Maintenance Requirements (Maintenance Margin Risk less Net Option Value)
            </summary>
        </member>
        <member name="T:OEC.API.Duration">
            <exclude />
        </member>
        <member name="T:OEC.API.SimpleSymbolLookupCriteria">
            <summary>
            Simple set of Symbol Lookup criteria
            </summary>
            <seealso cref="T:OEC.API.SymbolLookupCriteria"/>
            <seealso cref="M:OEC.API.OECClient.SymbolLookup(System.String)"/>
        </member>
        <member name="M:OEC.API.SimpleSymbolLookupCriteria.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:OEC.API.SimpleSymbolLookupCriteria.ContractKinds">
            <summary>
            List of contract kinds. Empty list can be used to search everywhere
            </summary>
        </member>
        <member name="M:OEC.API.SimpleSymbolLookupCriteria.ContractFilter(OEC.API.Contract)">
            <summary>
            Checks whether the contract satisfies the criteria
            </summary>
            <param name="contract">Contract</param>
            <returns></returns>
        </member>
        <member name="P:OEC.API.SimpleSymbolLookupCriteria.Exchange">
            <summary>
            Optional filter by exchange.
            </summary>
        </member>
        <member name="P:OEC.API.SimpleSymbolLookupCriteria.ContractGroup">
            <summary>
            Optional filter by contract group
            </summary>
        </member>
        <member name="P:OEC.API.SimpleSymbolLookupCriteria.ContractType">
            <summary>
            Filter by contract type
            </summary>
        </member>
        <member name="P:OEC.API.SimpleSymbolLookupCriteria.CompoundType">
            <summary>
            Filter by compound type
            </summary>
        </member>
        <member name="P:OEC.API.SimpleSymbolLookupCriteria.ByBaseContractsOnly">
            <summary>
            If ByBaseContractsOnly is true, searching will be performed inside Base Contracts only.
            Results will still contain Contracts and developer should use Contract.BaseContract to obtain actual BaseContract object
            </summary>
        </member>
        <member name="P:OEC.API.SimpleSymbolLookupCriteria.OptionsRequired">
            <summary>
            OptionsRequired = true will retrieve only contracts that have related options
            </summary>
        </member>
        <member name="P:OEC.API.SimpleSymbolLookupCriteria.OptionType">
            <summary>
            OptionType allows filtering put or call options.
            </summary>
        </member>
        <member name="P:OEC.API.SimpleSymbolLookupCriteria.ParentContract">
            <summary>
            ParentContract allows filtering options for defined contract
            </summary>
        </member>
        <member name="P:OEC.API.SimpleSymbolLookupCriteria.BaseContract">
            <summary>
            BaseContract allows filtering contracts for defined base contract
            </summary>
        </member>
        <member name="P:OEC.API.SimpleSymbolLookupCriteria.LockingType">
            <summary>
            Admin locking type
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.SimpleSymbolLookupCriteria.AdditionalExpression">
            <summary>
            Optional additional expression to build complex criteria like "CME or Electronic"
            </summary>
        </member>
        <member name="T:OEC.API.SymbolLookupCriteria">
            <summary>
            This class describes parameters of symbol lookup
            </summary>
        </member>
        <member name="F:OEC.API.SymbolLookupCriteria.SimpleSymbolSearch">
            <summary>
            Gets a value indicating that simple (exact) symbol lookup required. 
            </summary>
        </member>
        <member name="M:OEC.API.SymbolLookupCriteria.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OEC.API.SymbolLookupCriteria.ContractFilter(System.Collections.Generic.IEnumerable{OEC.API.Contract},System.Predicate{OEC.API.Contract},System.Int32)">
            <summary>
            Filters contracts according defined criteria
            </summary>
            <param name="originalList">Original lsit of contracts</param>
            <param name="additionalFilter">Optional additional filter</param>
            <param name="TakeN">Take no more than N contracts</param>
            <returns></returns>
        </member>
        <member name="M:OEC.API.SymbolLookupCriteria.ContractFilter(OEC.API.Contract)">
            <summary>
            Checks whether the contract satisfies the criteria
            </summary>
            <param name="contract">Contract</param>
            <returns></returns>
        </member>
        <member name="P:OEC.API.SymbolLookupCriteria.SearchText">
            <summary>
            Search Text
            </summary>
        </member>
        <member name="P:OEC.API.SymbolLookupCriteria.DesiredResultCount">
            <summary>
            Desired number of result contracts
            </summary>
        </member>
        <member name="P:OEC.API.SymbolLookupCriteria.Mode">
            <summary>
            Symbol Lookup Mode <seealso cref="T:OEC.Data.SymbolLookupMode"/>
            </summary>
        </member>
        <member name="F:OEC.API.SymbolLookupProcessor.MaxExpressionDepth">
            <summary>
            Max allowed depth of expressions
            </summary>
        </member>
        <member name="T:OEC.API.SymbolLookupExpression">
            <summary>
            SymbolLookupExpression should be used to create complex expressions of lookup criteria
            </summary>
        </member>
        <member name="M:OEC.API.SymbolLookupExpression.#ctor(OEC.Data.SymbolLookupOperator,OEC.API.SimpleSymbolLookupCriteria)">
            <summary>
            Constructor
            </summary>
            <param name="Operator"></param>
            <param name="RightOperand"></param>
        </member>
        <member name="P:OEC.API.SymbolLookupExpression.Operator">
            <summary>
            Boolean operator 
            </summary>
        </member>
        <member name="P:OEC.API.SymbolLookupExpression.RightOperand">
            <summary>
            Lookup criteria that should be used additionally to the main criteria
            </summary>
        </member>
        <member name="T:OEC.API.OECClient">
             <summary>
             This class represents a client connection to the OEC Server 
             and provides access to all API data and functionality.
             </summary>
             <remarks>
             <h5>Principles of work</h5>
             The OECClient component serves as a gateway to the OEC Server, 
             sending client requests and receiving server responses over the internet. 
             Client session data are represented in form of objects tree available as OECClient instance properies: 
             OECClient.<see cref="P:OEC.API.OECClient.Orders"/> is an collection of orders, for example. See "Data model" section below for details
             <br/><br/>
             Client requests are sent by calling component methods, such as <see cref="M:OEC.API.OECClient.CancelOrder(OEC.API.Order)"/>, 
             and any changes or additions to session data are visible to client as events (like <see cref="E:OEC.API.OECClient.OnUserMessage"/>) 
             <br/><br/>
             Network transmission is asynchronous (performed in background), so all method calls
             do not return immediate results - in most cases  client should wait for appropriate event to make sure
             that requested action succeeded (or failed).
             
             <h5>Data Model</h5>
             
             Primary object of OEC Data model is an <see cref="T:OEC.API.Order"/>. 
             This object contains all information about order lifetime, such as <see cref="T:OEC.API.Version"/>, <see cref="T:OEC.API.Command"/> and <see cref="T:OEC.API.State"/> history, 
             and order <see cref="T:OEC.API.Fill"/>s - remained or cancelled. OEC API loads all orders from current trading session on logon.
            	<br/> 
             Accounting information can be accessed by <see cref="T:OEC.API.Account"/> objects. There are open/closed <see cref="T:OEC.API.Position"/> statistics and account cash <see cref="T:OEC.API.Balance"/> 
             (or several balances for different currencies, if any). 
             <br/>
             Trading environment objects, such as contracts, currencies, exchanges provided easy access to fundamental data.
             Some additional object types, like <see cref="T:OEC.API.BaseContract"/>s and <see cref="T:OEC.API.ContractGroup"/>s were introduced to maintain 
             structured access.
             <br/>
             Dynamic data like currency conversion rate, contract last price and depth of market updates are stored 
             in corresponding objects - i.e. <see cref="T:OEC.API.Currency"/> and <see cref="T:OEC.API.Contract"/>. 
             Theoretical profit/loss for open positions is updated in real-time, when the price feed is avaliable for given contract.
             <br/>
             All objects can be found in their respective collections by ID or name, or retrieved from another object properties 
             - for example, an order contains references to its account and contract. 
             <br/>
             Note that any date/time values provided by API are in UTC time zone, except the opening/closing times for contracts 
             - which are local to contract exchange.
            
             <h5>Getting started</h5>
            
             To use the OEC system, first thing that client needs to do is to connect to the OEC Server:
             <code>
            		OECClient1.Connect(oechost, oecport, "username", "password", false);
             </code>
             After that, client app should need to wait for one of events: <see cref="E:OEC.API.OECClient.OnLoginComplete"/> or <see cref="E:OEC.API.OECClient.OnLoginFailed"/>
             In cause of succesfull login, all collections is already populated with session data (order states and fills, account positions),
             so application could display it on the GUI. 
             If by some reason connection is dropped, <see cref="E:OEC.API.OECClient.OnDisconnected"/> event would be fired immediately, notifying the client
             that requests couldn't be processed until connection is restored.<br/>
             On a successfull logon system is ready to process client requests: subscriptions to price feeds and order requests.
             </remarks>
             <example>
             This code creates and sends an order "Buy 1 ESZ6 MKT" 
             <code>
            		OrderDraft draft = OECClient1.CreateDraft()();
            		draft.Account = OECClient1.Accounts.First;
            		draft.Side = OrderSide.Buy;
            		draft.Quantity = 1;
            		draft.Contract = OECClient1.Contracts["ESZ6"];
            		draft.OrderType = OrderType.Market;
            		OECClient1.SendOrder(OEC.API.OrderDraft)(draft);
             </code>
             now client can expect events <see cref="E:OEC.API.OECClient.OnOrderConfirmed"/>, 
             <see cref="E:OEC.API.OECClient.OnOrderStateChanged"/> with <see cref="T:OEC.Data.OrderState"/> = <see cref="F:OEC.Data.OrderState.Working"/>, then 
             <see cref="E:OEC.API.OECClient.OnOrderFilled"/> and finally 
             <see cref="E:OEC.API.OECClient.OnOrderStateChanged"/> with <see cref="T:OEC.Data.OrderState"/> = <see cref="F:OEC.Data.OrderState.Completed"/>.
             <br/><br/>
             This code subscribes for a price feed using <see cref="M:OEC.API.OECClient.Subscribe(OEC.API.Contract)"/> method call
             <code>
             void SomeMethod()
             {
            		...
            		OECClient1.OnPriceChanged += OECPriceChanged;
            		...
            		OECClient1.Subscribe(OECClient1.Contracts["ZSPZ6"]);
            		...
             }
             void OECPriceChanged(Contract Contract, Price Price)
             {
            		string price = Contract.FormatPrice( Price.LastPrice );
            		...
             }
             </code>
             client will periodially receive <see cref="E:OEC.API.OECClient.OnPriceChanged"/> 
             event every time that market price data is updated, unless
             he will call OECClient.<see cref="M:OEC.API.OECClient.Unsubscribe(OEC.API.Contract)"/> method to cancel the subscription.
             </example>
        </member>
        <member name="M:OEC.API.OECClient.RequestCreateForward(OEC.API.BaseContract,System.DateTime)">
            <summary>
            </summary>
            <param name="baseContract"></param>
            <param name="settlementDate"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:OEC.API.OECClient.SubscribeDealQuote(OEC.API.Contract,System.Int32,OEC.API.Currency,OEC.Data.OrderSide,System.DateTime)">
            <summary>
            </summary>
            <param name="contract"></param>
            <param name="quantity"></param>
            <param name="currency"></param>
            <param name="side"></param>
            <param name="endDate"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:OEC.API.OECClient.SubscribeDealQuote(OEC.API.Contract,OEC.API.Contract,System.Int32,System.Int32,OEC.Data.OrderSide)">
            <summary>
            </summary>
            <param name="contract"></param>
            <param name="swapToContract"></param>
            <param name="quantity"></param>
            <param name="quantity2"></param>
            <param name="side"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:OEC.API.OECClient.RequestMarginCalculation(OEC.API.MarginCalculator.MarginCalculatorRequest)">
            <summary>
            </summary>
            <param name="request"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:OEC.API.OECClient.PostAllocate(OEC.API.Order,OEC.API.Contract,OEC.API.PostAllocationBlock)">
            <summary>
            Send post-allocation instructions for execution. Result of post-allocation can be checked in event <see cref="E:OEC.API.OECClient.OnPostAllocation"/>
            </summary>
            <param name="order"></param>
            <param name="contract"></param>
            <param name="allocationBlock"></param>
        </member>
        <member name="F:OEC.API.OECClient.m_EventsTimer">
            <summary>
            timer used to group events. <see cref="P:OEC.API.OECClient.EventBatchInterval"/>
            </summary>
        </member>
        <member name="F:OEC.API.OECClient.m_Hasher">
            <summary>
            Helper object intended for hashing modules loaded into process memory in order to certify calling application
            </summary>
        </member>
        <member name="F:OEC.API.OECClient.m_core">
            <summary>
            incapsulation of internal functionality of the OEC API 
            <see cref="T:OEC.API.Core"/>
            </summary>
        </member>
        <member name="M:OEC.API.OECClient.#ctor">
            <summary>
            Initializes the component. See <see cref="M:OEC.API.OECClient.Connect(System.String,System.Int32,System.String,System.String,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="M:OEC.API.OECClient.#ctor(OEC.API.ThreadingPolicy)">
            <summary>
            Initializes the component. See <see cref="M:OEC.API.OECClient.Connect(System.String,System.Int32,System.String,System.String,System.Boolean)"/> method.
            </summary>
            <exclude/>
        </member>
        <member name="M:OEC.API.OECClient.Dispose(System.Boolean)">
            <summary>
            Frees resources
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:OEC.API.OECClient.SetEventBatchInterval(System.Int32)">
            <summary>
            stores batch interval and calls internal implementation
            <see cref="P:OEC.API.OECClient.EventBatchInterval"/>
            </summary>
            <param name="val">interval in ms</param>
        </member>
        <member name="M:OEC.API.OECClient.Connect(System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Establishes new connection to the OEC server. 
            </summary>
            <remarks>
            Throws an exception if network connection couldn't be established or if already connected.
            Note that OECClient will be ready for operations only when <see cref="E:OEC.API.OECClient.OnLoginComplete"/> event was received.
            Client should also expect <see cref="E:OEC.API.OECClient.OnLoginFailed"/> event if supplied login information is incorrect.
            </remarks>
            <param name="Host">OEC Server host or address</param>
            <param name="Port">OEC Server port (usually 9200)</param>
            <param name="UserName">User name - case sensitive</param>
            <param name="Password">Password - case sensitive</param>
            <param name="AutoReconnect">If true, API will automatically restore connection when disconnected</param>
        </member>
        <member name="M:OEC.API.OECClient.Disconnect">
            <summary>
            Closes the connection to the OEC server. 
            </summary>
            <remarks>
            Note that all objects will still be available for viewing after disconnect, 
            but no order operations or subscriptions could be performed.
            </remarks>
        </member>
        <member name="M:OEC.API.OECClient.Reconnect">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="M:OEC.API.OECClient.SendOCOOrders(OEC.API.OrderDraft[])">
            <summary>
            Sends a group of orders as OCO - One cancels other
            </summary>
            <remarks>
            OCO orders sends as a group of mutually exclusive orders 
            - when one order is executed (filled), others are cancelled.
            </remarks>
            <seealso cref="T:OEC.API.Order"/>
            <seealso cref="T:OEC.API.OrderDraft"/>
            <seealso cref="M:OEC.API.OECClient.SendOrder(OEC.API.OrderDraft)"/>
            <param name="orders">OCO Orders</param>		
        </member>
        <member name="M:OEC.API.OECClient.SendLinkedOrders(OEC.API.OrderDraft,OEC.API.OrderDraft[])">
            <summary>
            Sends an chain of orders 
            </summary>
            <remarks>- when main order is filled, linked orders are activated as OCO orders</remarks>
            <seealso cref="T:OEC.API.OrderDraft"/>
            <seealso cref="M:OEC.API.OECClient.SendOrder(OEC.API.OrderDraft)"/>
            <seealso cref="M:OEC.API.OECClient.SendOCOOrders(OEC.API.OrderDraft[])"/>
            <param name="main">Main order</param>
            <param name="linked">Linked OCO orders</param>
        </member>
        <member name="M:OEC.API.OECClient.SendOrder(OEC.API.OrderDraft,System.Boolean)">
            <summary>
            Internal, sends an <see cref="T:OEC.API.Order"/> with forced route. 
            </summary>
            <remarks>
            Intended for administrative use, trader's orders could be rejected.
            </remarks>
            <seealso cref="T:OEC.API.OrderDraft"/>
            <seealso cref="M:OEC.API.OECClient.SendOrder(OEC.API.OrderDraft)"/>
            <param name="draft">New order parameters</param>
            <param name="pit">if true, order will be sent to pit, regardless of contract type</param>
            <returns>New order</returns>
        </member>
        <member name="M:OEC.API.OECClient.SendOrder(OEC.API.OrderDraft)">
            <summary>
            Sends a new <see cref="T:OEC.API.Order"/> with parameters supplied by <see cref="T:OEC.API.OrderDraft"/> instance. 
            </summary>
            <remarks>
            Order draft could be created using <see cref="M:OEC.API.OECClient.CreateDraft"/> call.
            The order will receive <see cref="E:OEC.API.OECClient.OnOrderConfirmed"/> event, meaning that server successfully 
            receives the order and assigns a ticket number to it. Then clint should monitor <see cref="E:OEC.API.OECClient.OnOrderStateChanged"/> event
            and/or check <see cref="P:OEC.API.Order.CurrentState"/> when order was accepted or rejected, become working and completed.
            to watch how order is filled client need to listen to <see cref="E:OEC.API.OECClient.OnOrderFilled"/> .
            </remarks>
            <seealso cref="T:OEC.API.Order"/>
            <seealso cref="T:OEC.API.State"/>
            <seealso cref="T:OEC.API.OrderDraft"/>
            <param name="draft">New order parameters</param>
            <returns>New order</returns>
        </member>
        <member name="M:OEC.API.OECClient.CreateOrder(OEC.API.OrderDraft)">
            <summary>
            Creates order, command, version and state for a new order.
            </summary>
            <param name="draft">Order draft</param>
        </member>
        <member name="M:OEC.API.OECClient.CreateOrder(OEC.API.OrderDraft,System.Boolean)">
            <summary>
            Creates order, command, version and state for a new order.
            </summary>
            <param name="draft">Order draft</param>
            <param name="addToOrdersList">Flag indicating the created order is added to the Orders list.</param>
        </member>
        <member name="M:OEC.API.OECClient.ModifyOrder(OEC.API.OrderDraft)">
            <summary>
            Modifies an existing <see cref="T:OEC.API.Order"/>
            </summary>
            <remarks>
            New order version is taked from <see cref="T:OEC.API.OrderDraft"/> created from this order by <see cref="M:OEC.API.OECClient.CreateDraft(OEC.API.Order)"/> call.
            The modification <see cref="T:OEC.API.Command"/> will be put in the <see cref="P:OEC.API.Order.Commands"/> list and 
            new order <see cref="T:OEC.API.Version"/> will be placed to the <see cref="P:OEC.API.Order.Versions"/>list.
            <br/>
            Note that the modification command will be initially in pending state, and the client should monitor <see cref="E:OEC.API.OECClient.OnCommandUpdated"/> event 
            and/or <see cref="P:OEC.API.Command.State"/> to see whether the command was executed or failed.
            </remarks>
            <seealso cref="T:OEC.API.Order"/>
            <seealso cref="T:OEC.API.Command"/>
            <seealso cref="T:OEC.API.Version"/>
            <param name="draft">Order with changed version parameters</param>
        </member>
        <member name="M:OEC.API.OECClient.SendModifyRequest(System.Int32,OEC.API.Command,OEC.API.Version)">
            <summary>
            Transmits modify command and version
            </summary>
            <param name="OrderID">Modifying order id </param>
            <param name="cmd">Modify command</param>
            <param name="version">New version</param>
        </member>
        <member name="M:OEC.API.OECClient.CancelOrder(OEC.API.Order)">
            <summary>
            Sends cancel request for an existing <see cref="T:OEC.API.Order"/>. 
            </summary>
            <remarks>
            Cancel <see cref="T:OEC.API.Command"/> will be 
            added to the <see cref="P:OEC.API.Order.Commands"/> list.
            Note that the cancel command will be initially in pending state, and the client should monitor <see cref="E:OEC.API.OECClient.OnCommandUpdated"/> event 
            and/or <see cref="P:OEC.API.Command.State"/> to see whether the command was executed or failed. Also order <see cref="T:OEC.API.State"/> will become
            <see cref="F:OEC.Data.OrderState.Cancelled"/> when cancel command succeed.
            </remarks>
            <param name="order">Order to cancel</param>
        </member>
        <member name="M:OEC.API.OECClient.SendCancelRequest(System.Int32,OEC.API.Command)">
            <summary>
            Transmits cancel command to server
            </summary>
            <param name="OrderID">Cancelling order ID</param>
            <param name="cmd">Cancel command</param>
        </member>
        <member name="M:OEC.API.OECClient.AcceptOrder(OEC.API.Order)">
            <summary>
            Accepts an incoming <see cref="T:OEC.API.Order"/>. 
            </summary>
            <remarks>
            This request is intended for broker interface and will be ignored for trader login
            Order to be accepted should be in <see cref="F:OEC.Data.OrderState.Held"/> state, and become <see cref="F:OEC.Data.OrderState.Working"/> after.
            </remarks>
            <seealso cref="T:OEC.API.State"/>
            <param name="order">Incoming order</param>
        </member>
        <member name="M:OEC.API.OECClient.RejectOrder(OEC.API.Order,System.String)">
            <summary>
            Rejects an incoming <see cref="T:OEC.API.Order"/>. 
            </summary>
            <remarks>
            Intended for broker interface - will be ignored for trader login.
             to be accepted should be in <see cref="F:OEC.Data.OrderState.Held"/> state, and become <see cref="F:OEC.Data.OrderState.Rejected"/> after.
            </remarks>
            <seealso cref="T:OEC.API.State"/>
            <param name="order">Order to reject</param>
            <param name="comments">Broker commens</param>
        </member>
        <member name="M:OEC.API.OECClient.CompleteOrder(OEC.API.Order,System.String)">
            <summary>
            Makes a working <see cref="T:OEC.API.Order"/> completed. 
            </summary>
            <remarks>
            Broker interface - will be ignored for trader login.
            Order to be completed should be in <see cref="F:OEC.Data.OrderState.Working"/> state, and will become 
            <see cref="F:OEC.Data.OrderState.Completed"/> or <see cref="F:OEC.Data.OrderState.Cancelled"/> if no fills present.
            </remarks>
            <seealso cref="T:OEC.API.State"/>
            <param name="order">Order to be completed</param>
            <param name="comments">optional comments</param>
        </member>
        <member name="M:OEC.API.OECClient.AcceptCommand(OEC.API.Command)">
            <summary>
            Accepts incomming <see cref="F:OEC.Data.CommandType.Modify"/> or <see cref="F:OEC.Data.CommandType.Cancel"/> <see cref="T:OEC.API.Command"/>. 
            </summary>
            <remarks>
            This command is intended for broker interface and will be ignored for trader logins.
            Command should be in <see cref="F:OEC.Data.CommandState.Sent"/> state and will become <see cref="F:OEC.Data.CommandState.Executed"/> after
            </remarks>
            <seealso cref="T:OEC.API.Order"/>
            <seealso cref="T:OEC.API.Command"/>
            <param name="command">Pending command</param>
        </member>
        <member name="M:OEC.API.OECClient.RejectCommand(OEC.API.Command,System.String)">
            <summary>
            Rejects incomming <see cref="F:OEC.Data.CommandType.Modify"/> or <see cref="F:OEC.Data.CommandType.Cancel"/> <see cref="T:OEC.API.Command"/>.
            </summary>
            <remarks>
            This command is intended for broker interface and will be ignored for trader logins.
            Command should be in <see cref="F:OEC.Data.CommandState.Sent"/> state and will become <see cref="F:OEC.Data.CommandState.Failed"/> after
            </remarks>
            <seealso cref="T:OEC.API.Order"/>
            <seealso cref="T:OEC.API.Command"/>
            <param name="command">Pending command</param>
            <param name="comments">Broker commens</param>
        </member>
        <member name="M:OEC.API.OECClient.AddFill(OEC.API.Order,System.Int32,System.Double,System.String)">
            <summary>
            Adds a new <see cref="T:OEC.API.Fill"/> to a working <see cref="T:OEC.API.Order"/>
            </summary>
            <remarks>
            This command is intended for broker interface and will be ignored for trader logins.
            New fill reports will be added to the <see cref="P:OEC.API.Order.Fills"/> list. If operation is failed,
            fill could be added with cancelled (<see cref="P:OEC.API.Fill.Active"/> = false) or just not be added at all.
            </remarks>
            <seealso cref="T:OEC.API.Fill"/>
            <seealso cref="T:OEC.API.Order"/>
            <param name="order">Order to fill</param>
            <param name="quantity">Filled quantity</param>
            <param name="price">Fill Price</param>
            <param name="comments">Fill comments</param>
        </member>
        <member name="M:OEC.API.OECClient.CancelFill(OEC.API.Fill)">
            <summary>
            Cancels existing <see cref="T:OEC.API.Fill"/>
            </summary>
            <remarks>
            This command is intended for broker interface and will be ignored for trader logins.
            Fill should becomes cancelled (<see cref="P:OEC.API.Fill.Active"/> = false). As a side effect, <see cref="T:OEC.API.Order"/>
            becomes working if it was already completed.
            </remarks>
            <seealso cref="T:OEC.API.Fill"/>
            <seealso cref="T:OEC.API.Order"/>
            <param name="fill">Fill needs to be cancelled</param>
        </member>
        <member name="M:OEC.API.OECClient.CreateDraft">
            <summary>
            Creates a new blank <see cref="T:OEC.API.OrderDraft"/>
            </summary>
            <remarks>
            Order draft is a placeholder for oreder parameters. To send an order, client needs to create an order 
            draft instance, fill its parameters and call <see cref="M:OEC.API.OECClient.SendOrder(OEC.API.OrderDraft)"/> method.
            It could be also stored (for example, as a template order)
            </remarks>
            <seealso cref="T:OEC.API.Order"/>
            <seealso cref="M:OEC.API.OECClient.SendOrder(OEC.API.OrderDraft)"/>
            <returns>Blank order draft</returns>
        </member>
        <member name="M:OEC.API.OECClient.CreateDraft(System.String)">
            <summary>
            Creates a new <see cref="T:OEC.API.OrderDraft"/> filled from template string.
            </summary>
            <remarks>
            Order draft can be converted to template string using (string) operator, or template string could be
            created manually. 
            If any order element cannot be parsed, it will be skipped and parsing continues.
            If template string couldn't be parsed at all, blank order draft will be returned.
            <br/>
            </remarks>
            <example>
            Template string syntax:
            <pre>
             <see cref="P:OEC.API.OrderDraft.Account"/>;<see cref="P:OEC.API.OrderDraft.Side"/>;<see cref="P:OEC.API.OrderDraft.Quantity"/>;<see cref="P:OEC.API.OrderDraft.Contract"/>;<see cref="P:OEC.API.OrderDraft.Type"/>;<see cref="P:OEC.API.OrderDraft.Flags"/>;<see cref="P:OEC.API.OrderDraft.Price"/>;<see cref="P:OEC.API.OrderDraft.Price2"/>
            </pre>
            </example>
            <seealso cref="T:OEC.API.Order"/>
            <seealso cref="M:OEC.API.OECClient.SendOrder(OEC.API.OrderDraft)"/>
            <param name="Template">string with order parameters</param>
            <returns>New order draft</returns>
        </member>
        <member name="M:OEC.API.OECClient.CreateDraft(OEC.API.Order)">
            <summary>
            Creates a <see cref="T:OEC.API.OrderDraft"/> for modification request.
            </summary>
            <remarks>
            Client can change only version-related properties (quantity, order type, price(s))
            New draft will not allow to change order properties - exception will be raised.
            The draft need to be passed to the <see cref="M:OEC.API.OECClient.ModifyOrder(OEC.API.OrderDraft)"/> method.
            </remarks>
            <seealso cref="T:OEC.API.Order"/>
            <seealso cref="M:OEC.API.OECClient.ModifyOrder(OEC.API.OrderDraft)"/>
            <param name="order">Order to be modified</param>
            <returns>Order draft object</returns>
        </member>
        <member name="M:OEC.API.OECClient.Subscribe(OEC.API.Contract)">
            <summary>
            Subscribes for realtime <see cref="T:OEC.API.Price"/> feed. 
            </summary>
            <remarks>
            Multiple subscription will require multiple unsubscription. <br/>
            Prices for existing (open or closed) position contracts are subscribed automatically and 
            couldn't be unsubscribed.
            </remarks>
            <seealso cref="T:OEC.API.Price"/>
            <seealso cref="E:OEC.API.OECClient.OnPriceChanged"/>
            <seealso cref="E:OEC.API.OECClient.OnPriceTick"/>
            <seealso cref="M:OEC.API.OECClient.Unsubscribe(OEC.API.Contract)"/>
            <param name="contract">Contract instance</param>
        </member>
        <member name="M:OEC.API.OECClient.Unsubscribe(OEC.API.Contract)">
            <summary>
            Unsubscribes for realtime price feed
            </summary>
            <remarks>
            Automatic subscriptions (for example, for existing positions) couldn't be unsubscribed
            </remarks>
            <seealso cref="M:OEC.API.OECClient.Subscribe(OEC.API.Contract)"/>
            <param name="contract"></param>
        </member>
        <member name="M:OEC.API.OECClient.SubscribeDOM(OEC.API.Contract)">
            <summary>
            Subscribes for Depth of Market (<see cref="T:OEC.API.DOM"/>) data.
            </summary>
            <remarks>
            Data can be accessed using <see cref="P:OEC.API.Contract.DOM"/> property.
            <br/>
            Note: Multiple subscriptions will require same number of UnsubscribeDOM calls
            </remarks>
            <seealso cref="E:OEC.API.OECClient.OnDOMChanged"/>
            <seealso cref="M:OEC.API.OECClient.UnsubscribeDOM(OEC.API.Contract)"/>
            <param name="contract">Contract for DOM subscription</param>
        </member>
        <member name="M:OEC.API.OECClient.UnsubscribeDOM(OEC.API.Contract)">
            <summary>
            Unsubscribes from DOM data for a given contract
            </summary>
            <seealso cref="M:OEC.API.OECClient.SubscribeDOM(OEC.API.Contract)"/>
            <param name="contract">contract to unsubscribe</param>
        </member>
        <member name="M:OEC.API.OECClient.SendMessage(OEC.API.User,System.String)">
            <summary>
            Sends a text message to a user
            </summary>
            <param name="Target"><see cref="T:OEC.API.User"/> whom to send to</param>
            <param name="Message">Message text</param>
        </member>
        <member name="M:OEC.API.OECClient.SendMessage(OEC.API.Trader,System.String)">
            <summary>
            Sends a text message to a user
            </summary>
            <param name="Target"><see cref="T:OEC.API.Trader"/> whom to send to</param>
            <param name="Message">Message text</param>
        </member>
        <member name="M:OEC.API.OECClient.SendNewsMessage(OEC.API.Channel,System.String)">
            <summary>
            Send news message to everybody subscribed for given channel. 
            </summary>
            <remarks>
            User should have rights to send news to the channel.
            </remarks>
            <param name="Channel">News channel</param>
            <param name="Message">Message text</param>
        </member>
        <member name="M:OEC.API.OECClient.RequestTicks(OEC.API.Contract,System.DateTime,System.DateTime)">
            <summary>
            Requests price ticks for given time range
            <seealso cref="E:OEC.API.OECClient.OnTicksReceived"/> <seealso cref="M:OEC.API.OECClient.RequestHistory(OEC.API.Contract,System.DateTime,System.DateTime)"/>
            </summary>
            <param name="contract">Contract to see ticks</param>
            <param name="StartDate">Start of time range</param>
            <param name="EndDate">End of time range</param>
        </member>
        <member name="M:OEC.API.OECClient.RequestTicks(OEC.API.Contract,System.DateTime,System.Int32)">
            <summary>
            Requests price ticks for given end timestamp and amount
            <seealso cref="E:OEC.API.OECClient.OnTicksReceived"/> <seealso cref="M:OEC.API.OECClient.RequestHistory(OEC.API.Contract,System.DateTime,System.DateTime)"/>
            </summary>
            <param name="contract">Contract to see ticks</param>
            <param name="EndDate">End of time range</param>
            <param name="Amount">Amount of ticks</param>
        </member>
        <member name="M:OEC.API.OECClient.SubscribeTicks(OEC.API.Contract,System.DateTime)">
            <summary>
            Subscribes for price ticks for given time range
            <seealso cref="E:OEC.API.OECClient.OnTicksReceived"/>
            <seealso cref="M:OEC.API.OECClient.RequestTicks(OEC.API.Contract,System.DateTime,System.DateTime)"/>
            </summary>
            <param name="contract">Contract to see ticks</param>
            <param name="StartDate">Start of time range</param>
        </member>
        <member name="M:OEC.API.OECClient.SubscribeTicks(OEC.API.Contract,System.Int32)">
            <summary>
            Subscribes for price ticks and loads given amount of ticks
            <seealso cref="E:OEC.API.OECClient.OnTicksReceived"/>
            <seealso cref="M:OEC.API.OECClient.RequestTicks(OEC.API.Contract,System.DateTime,System.Int32)"/>
            </summary>
            <param name="contract">Contract to see ticks</param>
            <param name="Amount">Amount of ticks</param>
        </member>
        <member name="M:OEC.API.OECClient.SubscribeTickBars(OEC.API.Contract,System.DateTime,System.Int32)">
            <summary>
            Subscribes for tick bars for given time range
            <seealso cref="E:OEC.API.OECClient.OnBarsReceived"/>
            </summary>
            <param name="contract">Contract to see ticks</param>
            <param name="StartDate">Start of time range</param>
            <param name="Ticks">Number of ticks per bar</param>
        </member>
        <member name="M:OEC.API.OECClient.SubscribeVolumeBars(OEC.API.Contract,System.DateTime,System.Int32)">
            <summary>
            Subscribes for volume bars for given time range
            <seealso cref="E:OEC.API.OECClient.OnBarsReceived"/>
            </summary>
            <param name="contract">Contract to see ticks</param>
            <param name="StartDate">Start of time range</param>
            <param name="Volume">Volume per Bar</param>
        </member>
        <member name="M:OEC.API.OECClient.SubscribeRangeBars(OEC.API.Contract,System.DateTime,System.Int32)">
            <summary>
            Subscribes for range bars for given time range
            <seealso cref="E:OEC.API.OECClient.OnBarsReceived"/>
            </summary>
            <param name="contract">Contract to see ticks</param>
            <param name="StartDate">Start of time range</param>
            <param name="Range">Range of Bars (tick sizes)</param>
        </member>
        <member name="M:OEC.API.OECClient.RequestHistory(OEC.API.Contract,System.DateTime,System.DateTime)">
            <summary>
            Requests price historical information in form of daily <see cref="T:OEC.API.Bar">bars</see>.
            </summary>
            <seealso cref="M:OEC.API.OECClient.RequestTicks(OEC.API.Contract,System.DateTime,System.DateTime)"/>
            <param name="contract">Contract to request bars</param>
            <param name="StartDate">Start of time range</param>
            <param name="EndDate">End of time range</param>
        </member>
        <member name="M:OEC.API.OECClient.SubscribeHistory(OEC.API.Contract,System.DateTime)">
            <summary>
            Subscribes for price historical information in form of daily <see cref="T:OEC.API.Bar">bars</see>.
            </summary>
            <seealso cref="M:OEC.API.OECClient.RequestHistory(OEC.API.Contract,System.DateTime,System.DateTime)"/>
            <param name="contract">Contract to request bars</param>
            <param name="StartDate">Start of time range</param>
        </member>
        <member name="M:OEC.API.OECClient.RequestBars(OEC.API.Contract,System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Requests price historical information in form of intra-day <see cref="T:OEC.API.Bar">bars</see>.
            </summary>
            <seealso cref="M:OEC.API.OECClient.RequestTicks(OEC.API.Contract,System.DateTime,System.DateTime)"/>
            <param name="contract">Contract to request bars</param>
            <param name="StartDate">Start of time range</param>
            <param name="EndDate">End of time range</param>
            <param name="Interval">Bar interval</param>
        </member>
        <member name="M:OEC.API.OECClient.RequestTickBars(OEC.API.Contract,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Requests price historical information in form of intra-day <see cref="T:OEC.API.Bar">bars</see>.
            </summary>
            <seealso cref="M:OEC.API.OECClient.RequestTicks(OEC.API.Contract,System.DateTime,System.DateTime)"/>
            <param name="contract">Contract to request bars</param>
            <param name="StartDate">Start of time range</param>
            <param name="EndDate">End of time range</param>
            <param name="Interval">interval in ticks</param>
        </member>
        <member name="M:OEC.API.OECClient.RequestVolumeBars(OEC.API.Contract,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Requests price historical information in form of intra-day <see cref="T:OEC.API.Bar">bars</see>.
            </summary>
            <seealso cref="M:OEC.API.OECClient.RequestTicks(OEC.API.Contract,System.DateTime,System.DateTime)"/>
            <param name="contract">Contract to request bars</param>
            <param name="StartDate">Start of time range</param>
            <param name="EndDate">End of time range</param>
            <param name="Volume">Bar volume</param>
            
        </member>
        <member name="M:OEC.API.OECClient.RequestRangeBars(OEC.API.Contract,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Requests price historical information in form of intra-day <see cref="T:OEC.API.Bar">bars</see>.
            </summary>
            <seealso cref="M:OEC.API.OECClient.RequestTicks(OEC.API.Contract,System.DateTime,System.DateTime)"/>
            <param name="contract">Contract to request bars</param>
            <param name="StartDate">Start of time range</param>
            <param name="EndDate">End of time range</param>
            <param name="Range">Bar range (tick sizes)</param>
        </member>
        <member name="M:OEC.API.OECClient.SubscribeBars(OEC.API.Contract,System.DateTime,System.TimeSpan)">
            <summary>
            Subscribes price historical information in form of intra-day <see cref="T:OEC.API.Bar">bars</see>.
            </summary>
            <seealso cref="M:OEC.API.OECClient.RequestBars(OEC.API.Contract,System.DateTime,System.DateTime,System.TimeSpan)"/>
            <param name="contract">Contract to request bars</param>
            <param name="StartDate">Start of time range</param>
            <param name="Interval">Bar interval</param>
        </member>
        <member name="M:OEC.API.OECClient.SubscribeBars(OEC.API.Contract,System.DateTime,OEC.Data.SubscriptionType,System.Int32)">
            <summary>
            Subscribes price historical information in form of various <see cref="T:OEC.API.Bar">bars</see>.
            </summary>
            <seealso cref="M:OEC.API.OECClient.RequestBars(OEC.API.Contract,System.DateTime,System.DateTime,System.TimeSpan)"/>
            <param name="contract">Contract to request bars</param>
            <param name="StartDate">Start of time range</param>
            <param name="Type">Type of bars</param>
            <param name="Interval">Bar interval</param>
        </member>
        <member name="M:OEC.API.OECClient.SubscribeBars(OEC.API.Contract,System.DateTime,OEC.Data.SubscriptionType,System.Int32,System.Boolean)">
            <summary>
            Subscribes price historical information in form of various <see cref="T:OEC.API.Bar">bars</see>.
            </summary>
            <seealso cref="M:OEC.API.OECClient.RequestBars(OEC.API.Contract,System.DateTime,System.DateTime,System.TimeSpan)"/>
            <param name="contract">Contract to request bars</param>
            <param name="StartDate">Start of time range</param>
            <param name="Type">Type of bars</param>
            <param name="Interval">Bar interval</param>
            <param name="IgnoreSessionBoundaries">Don't stop to build a bar at the end of sessions. It works with Range and Momentum Bars only</param>
        </member>
        <member name="M:OEC.API.OECClient.SubscribeBars(OEC.API.Contract,System.Int32,OEC.Data.SubscriptionType,System.Int32,System.Boolean)">
            <summary>
            Subscribes price historical information in form of various <see cref="T:OEC.API.Bar">bars</see>.
            </summary>
            <param name="contract">Contract to request bars</param>
            <param name="Amount">Amount to load from history (Not applicable for Range and Momentum bars when IgnoreSessionBoundaries = true)</param>
            <param name="Type">Type of bars</param>
            <param name="Interval">Bar interval</param>
            <param name="IgnoreSessionBoundaries">Don't stop to build a bar at the end of sessions. It works with Range and Momentum Bars only</param>
            <returns></returns>
        </member>
        <member name="M:OEC.API.OECClient.RequestBars(OEC.API.Contract,System.DateTime,System.DateTime,OEC.Data.SubscriptionType,System.Int32)">
            <summary>
            Requests price historical information in form of various <see cref="T:OEC.API.Bar">bars</see>.
            </summary>
            <seealso cref="M:OEC.API.OECClient.RequestTicks(OEC.API.Contract,System.DateTime,System.DateTime)"/>
            <param name="contract">Contract to request bars</param>
            <param name="StartDate">Start of time range</param>
            <param name="EndDate">End of time range</param>
            <param name="Type">Type of bars</param>
            <param name="Interval">Bar interval</param>
        </member>
        <member name="M:OEC.API.OECClient.RequestBars(OEC.API.Contract,System.DateTime,System.DateTime,OEC.Data.SubscriptionType,System.Int32,System.Boolean)">
            <summary>
            Requests price historical information in form of various <see cref="T:OEC.API.Bar">bars</see>.
            </summary>
            <seealso cref="M:OEC.API.OECClient.RequestTicks(OEC.API.Contract,System.DateTime,System.DateTime)"/>
            <param name="contract">Contract to request bars</param>
            <param name="StartDate">Start of time range</param>
            <param name="EndDate">End of time range</param>
            <param name="Type">Type of bars</param>
            <param name="Interval">Bar interval</param>
            <param name="IgnoreSessionBoundaries">Indicates whether to ignore session boundaries</param>
        </member>
        <member name="M:OEC.API.OECClient.RequestBars(OEC.API.Contract,System.DateTime,System.Int32,OEC.Data.SubscriptionType,System.Int32,System.Boolean)">
            <summary>
            Requests price historical information in form of various <see cref="T:OEC.API.Bar">bars</see>.
            </summary>
            <param name="contract">Contract to request bars</param>
            <param name="EndDate">End of time range for bars series</param>
            <param name="Amount">Amount of bars to load (Not applicable for Range and Momentum bars when IgnoreSessionBoundaries = true)</param>
            <param name="Type">Type of bars</param>
            <param name="Interval">Bar interval</param>
            <param name="IgnoreSessionBoundaries">Indicates whether to ignore session boundaries</param>
            <returns></returns>
        </member>
        <member name="M:OEC.API.OECClient.SubscribeHistogram(OEC.API.Contract)">
            <summary>
            Subscribes price historical information in form of price histogram.
            </summary>
        </member>
        <member name="M:OEC.API.OECClient.CancelSubscription(OEC.API.Subscription)">
            <summary>
            Cancels updatable historical subscription
            </summary>
            <param name="sub">Subscription to cancel</param>
        </member>
        <member name="M:OEC.API.OECClient.RequestContracts(OEC.API.BaseContract)">
            <summary>
            Request additional contracts - options and strategies (compounds)
            </summary>
            <seealso cref="E:OEC.API.OECClient.OnContractsChanged"/>
            <param name="bc">Base Contract</param>
        </member>
        <member name="M:OEC.API.OECClient.AddLayer(System.Reflection.Assembly)">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="M:OEC.API.OECClient.m_EventsTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            Calls internal method to process incoming data
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:OEC.API.OECClient.CreateInstance(System.Boolean)">
            <summary>
            Creates an instance of OECClient or connects remotely to exposed one, if searchRemoteAtFirst is true
            </summary>
            <param name="searchRemoteAtFirst">Tries to connect to exposed remote OECClient</param>
            <returns></returns>
        </member>
        <member name="M:OEC.API.OECClient.UpdateOsmAlgoList(OEC.API.OSM.Info.AlgoList)">
            <summary>
            Updates a list of OSM algorithms. 
            </summary>
            <remarks>
            This method is called by OSM broker, when it gets connected to or going to disconnect from OEC OrderServer. 
            </remarks>
            <param name="algoList">A list of OSM algorithms</param>
            <returns></returns>
        </member>
        <member name="M:OEC.API.OECClient.LoadOsmAlgoList">
            <summary>
            Loads a list of OSM algorithms. 
            </summary>
            <remarks>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:OEC.API.OECClient.CreateOsmChildDraft(OEC.API.Order)">
            <summary>
            Creates a draft for OSM child order. 
            </summary>
            <returns>OSM child draft, cloned from OSM root order</returns>
        </member>
        <member name="M:OEC.API.OECClient.SymbolLookup(OEC.API.SymbolLookupCriteria)">
            <summary>
            Sends symbol lookup request to server. Results will be available via event <see cref="E:OEC.API.OECClient.OnSymbolLookupReceived"/>
            <seealso cref="T:OEC.API.SymbolLookupCriteria"/>
            </summary>
            <param name="symbolLookup"></param>
        </member>
        <member name="M:OEC.API.OECClient.SymbolLookup(System.String)">
            <summary>
            Sends strict symbol lookup request to server. Results will be available via event <see cref="E:OEC.API.OECClient.OnSymbolLookupReceived"/>
            The result will contains only one contract with name that starts with Symbol
            </summary>
            <param name="Symbol"></param>
        </member>
        <member name="M:OEC.API.OECClient.RequestQuoteDetails(OEC.API.Contract)">
            <summary>
            Sends a request to retrieve Quote Details. Quote Details will be available in Contract.QuoteDetails after event OnQuoteDetailsChanged with defined contract
            </summary>
            <param name="Contract">Requested contract</param>
            <exclude />
        </member>
        <member name="M:OEC.API.OECClient.RequestIndexComponents(OEC.API.Contract)">
            <summary>
            Sends a request to retrieve Index Components. Index Components will be available in Contract.IndexComponents after event OnIndexComponentsReceived with defined contract
            </summary>
            <param name="Contract">Requested contract</param>
            <exclude />
        </member>
        <member name="M:OEC.API.OECClient.CreateCustomCompound(OEC.Data.CompoundType)">
            <summary>
            Creates a new blank <see cref="T:OEC.API.CustomCompound"/>
            </summary>
            <remarks>
            CustomCompound is a placeholder for contract parameters. To send a custom compound order, client needs to create a custom compound instance,
            adds its legs. The result should be used in <see cref="P:OEC.API.OrderDraft.CustomCompound"/>
            </remarks>
            <seealso cref="T:OEC.API.NewOrderDraft"/>
            <seealso cref="T:OEC.API.Contract"/>
            <seealso cref="T:OEC.API.CustomCompound"/>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:OEC.API.OECClient.SubmitContinuousContractRule(OEC.API.ContinuousContractRule)">
            <summary>
            Submits a continuous contract rule for logged user. When the rule is applied <see cref="E:OEC.API.OECClient.OnContinuousContractRuleChanged"/> will be occured 
            </summary>
            <param name="rule">Continuous Contract Rule</param>
            <returns>RequestID</returns>
        </member>
        <member name="M:OEC.API.OECClient.RemoveContinuousContractRule(OEC.API.ContinuousContractRule)">
            <summary>
            Removes a continuous contract rule for logged user. When the rule is applied <see cref="E:OEC.API.OECClient.OnContinuousContractRuleChanged"/> will be occured 
            </summary>
            <param name="rule">Continuous Contract Rule</param>
            <returns>RequestID</returns>
        </member>
        <member name="M:OEC.API.OECClient.SubmitAllocationBlocks(OEC.API.AllocationBlockList)">
            <summary>
            Submits new allocation block list for logged user. When the list is applied <see cref="E:OEC.API.OECClient.OnAllocationBlocksChanged"/> will be occured 
            </summary>
            <param name="allocationBlocks">New allocation block list</param>
        </member>
        <member name="M:OEC.API.OECClient.ValidateAllocationBlock(OEC.API.AllocationBlockList)">
            <summary>
            Validate allocation block
            </summary>
            <param name="allocationBlocks"></param>
        </member>
        <member name="M:OEC.API.OECClient.SetClientInfo(OEC.API.ClientInfo)">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="M:OEC.API.OECClient.DisconnectClient(OEC.API.LoggedUserClient)">
            <summary>
            Disconnects logged user session
            </summary>
            <param name="item">Logged user session</param>
        </member>
        <member name="M:OEC.API.OECClient.SetLoggingConfig(OEC.API.LoggingConfiguration)">
            <summary>
            Sets logging config of API
            </summary>
            <param name="config">Logging level</param>
        </member>
        <member name="M:OEC.API.OECClient.RequestProductCalendar(OEC.API.BaseContract)">
            <summary>
            Request product calendar for certain base contract (Futures only)
            </summary>
            <param name="baseContract">Base contract</param>
        </member>
        <member name="M:OEC.API.OECClient.RequestBars(OEC.API.Contract,OEC.API.Duration,OEC.API.BarDescription)">
            <summary>
            
            </summary>
            <param name="contract"></param>
            <param name="duration"></param>
            <param name="description"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="E:OEC.API.OECClient.OnContractCreated">
            <summary>
            Occurs when new custom contract are created in response to <see cref="M:OEC.API.OECClient.RequestCreateForward(OEC.API.BaseContract,System.DateTime)"/> call
            </summary>
            <exclude/>
        </member>
        <member name="E:OEC.API.OECClient.OnDealQuoteUpdated">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="E:OEC.API.OECClient.OnMarginCalculationCompleted">
            <summary>
            </summary>
            <exclude/>
        </member>
        <member name="E:OEC.API.OECClient.OnPortfolioMarginChanged">
            <summary>
            Occurs when portfolio margining changed 
            </summary>
            <exclude />
        </member>
        <member name="E:OEC.API.OECClient.OnPostAllocation">
            <summary>
            Result of post-allocation
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.Global">
            <summary>
            Global OECClient instance
            </summary>
            <remarks>
            Usually, clients will create one instance of this component, 
            which will be avaiable using this static propery.
            However, in is possible to create multiple instances 
            - in this case client should not use this property.
            </remarks>
        </member>
        <member name="E:OEC.API.OECClient.OnBeginEvents">
            <summary>
            Signaling start of events batch. See <see cref="P:OEC.API.OECClient.EventBatchInterval"/>.
            </summary>
        </member>
        <member name="E:OEC.API.OECClient.OnEndEvents">
            <summary>
            Signaling end of events batch. See <see cref="P:OEC.API.OECClient.EventBatchInterval"/>.
            </summary>
        </member>
        <member name="E:OEC.API.OECClient.OnError">
            <summary>
            Raised when unexpected error occurs
            </summary>
        </member>
        <member name="E:OEC.API.OECClient.OnLoginComplete">
            <summary>
            Raised when connection required data loaded to client and OECClient component is ready to work.
            </summary>
        </member>
        <member name="E:OEC.API.OECClient.OnLoginFailed">
            <summary>
            Raised when connection couldn't be establised, credentials are wrong or client API version is invalid
            </summary>
        </member>
        <member name="E:OEC.API.OECClient.OnDisconnected">
            <summary>
            Raised any time when connection to OEC Server is dropped.
            </summary>
        </member>
        <member name="E:OEC.API.OECClient.OnOrderConfirmed">
            <summary>
            Occurs when new <see cref="T:OEC.API.Order"/> was confirmed and order id was assigned by server
            </summary>
        </member>
        <member name="E:OEC.API.OECClient.OnOrderStateChanged">
            <summary>
            Occurs when any <see cref="T:OEC.API.Order"/> <see cref="T:OEC.Data.OrderState"/> is changed, for example, 
            when order become <see cref="F:OEC.Data.OrderState.Working"/>, completed or cancelled. 
            </summary>
            <seealso cref="M:OEC.API.OECClient.SendOrder(OEC.API.OrderDraft)"/>
        </member>
        <member name="E:OEC.API.OECClient.OnOrderFilled">
            <summary>
            Occurs when new <see cref="T:OEC.API.Fill"/> comes or old fill becomes cancelled. 
            </summary>
            <seealso cref="T:OEC.API.Order"/>
        </member>
        <member name="E:OEC.API.OECClient.OnCommandUpdated">
            <summary>
            Occurs when <see cref="T:OEC.API.Command"/> (such as cancel or modify) was either executed or failed
            </summary>
            <seealso cref="M:OEC.API.OECClient.CancelOrder(OEC.API.Order)"/>
            <seealso cref="M:OEC.API.OECClient.ModifyOrder(OEC.API.OrderDraft)"/>
        </member>
        <member name="E:OEC.API.OECClient.OnAvgPositionChanged">
            <summary>
            Occurs when one or more average <see cref="T:OEC.API.Position"/> values are changed
            </summary>
            <seealso cref="P:OEC.API.Account.AvgPositions"/>
        </member>
        <member name="E:OEC.API.OECClient.OnDetailedPositionChanged">
            <summary>
            Occurs when one or more detailed <see cref="T:OEC.API.Position"/> values are changed
            </summary>
            <seealso cref="P:OEC.API.Account.DetailedPositions"/>
        </member>
        <member name="E:OEC.API.OECClient.OnAccountSummaryChanged">
            <summary>
            Occurs when one or more position summary (<see cref="T:OEC.API.Balance"/>) values are changed
            </summary>
            <seealso cref="T:OEC.API.Account"/>
            <seealso cref="T:OEC.API.Balance"/>
        </member>
        <member name="E:OEC.API.OECClient.OnPriceChanged">
            <summary>
            Occurs when one or more contract <see cref="T:OEC.API.Price"/> values are changed. 
            </summary>
            <remarks>
            Unlike <see cref="E:OEC.API.OECClient.OnPriceTick"/>,
            this event could skip some price updates, if they come too often
            </remarks>
            <seealso cref="T:OEC.API.Price"/>
            <seealso cref="T:OEC.API.Contract"/>
        </member>
        <member name="E:OEC.API.OECClient.OnPriceTick">
            <summary>
            Occurs when one or more contract <see cref="T:OEC.API.Price"/> values are changed. 
            </summary>
            <remarks>
            Unlike <see cref="E:OEC.API.OECClient.OnPriceChanged"/>,
            this event raised every time when price update comes, so it is recommended not to perform any CPU 
            consuming operations (like GUI updates) in the event handler.
            </remarks>
            <seealso cref="T:OEC.API.Price"/>
            <seealso cref="T:OEC.API.Contract"/>
        </member>
        <member name="E:OEC.API.OECClient.OnCurrencyPriceChanged">
            <summary>
            Occurs when <see cref="T:OEC.API.Currency"/> price (conversion rate) is changed
            </summary>
        </member>
        <member name="E:OEC.API.OECClient.OnDOMChanged">
            <summary>
            Occurs when Depth of Market (<see cref="T:OEC.API.DOM"/>) data are changed
            </summary>
        </member>
        <member name="E:OEC.API.OECClient.OnBalanceChanged">
            <summary>
            Occurs when account cash <see cref="T:OEC.API.Balance"/> changed 
            </summary>
        </member>
        <member name="E:OEC.API.OECClient.OnUserStatusChanged">
            <summary>
            Occurs when some <see cref="T:OEC.API.User"/> becomes online or offline
            </summary>
            <seealso cref="P:OEC.API.OECClient.Users"/>
        </member>
        <member name="E:OEC.API.OECClient.OnUserMessage">
            <summary>
            Occurs when a chat message is received from some <see cref="T:OEC.API.User"/>
            </summary>
            <seealso cref="M:OEC.API.OECClient.SendMessage(OEC.API.User,System.String)"/>
        </member>
        <member name="E:OEC.API.OECClient.OnNewsMessage">
            <summary>
            Occurs when new message is received by some <see cref="T:OEC.API.Channel"/>.
            </summary>
        </member>
        <member name="E:OEC.API.OECClient.OnTicksReceived">
            <summary>
            Occurs when <see cref="T:OEC.API.Ticks"/> batch is received in response to <see cref="M:OEC.API.OECClient.RequestTicks(OEC.API.Contract,System.DateTime,System.DateTime)"/> 
            or <see cref="M:OEC.API.OECClient.RequestTicks(OEC.API.Contract,System.DateTime,System.Int32)"/> 
            </summary>
        </member>
        <member name="E:OEC.API.OECClient.OnHistoryReceived">
            <summary>
            Occurs when history <see cref="T:OEC.API.Bar">Bars</see> are received in response to <see cref="M:OEC.API.OECClient.RequestHistory(OEC.API.Contract,System.DateTime,System.DateTime)"/> call
            </summary>
        </member>
        <member name="E:OEC.API.OECClient.OnBarsReceived">
            <summary>
            Occurs when history <see cref="T:OEC.API.Bar">Bars</see> are received in response to <see cref="M:OEC.API.OECClient.RequestBars(OEC.API.Contract,System.DateTime,System.DateTime,System.TimeSpan)"/> call
            </summary>
        </member>
        <member name="E:OEC.API.OECClient.OnHistogramReceived">
            <summary>
            Occurs when traded price histogram is updated
            </summary>
            <seealso cref="M:OEC.API.OECClient.SubscribeHistogram(OEC.API.Contract)"/>
        </member>
        <member name="E:OEC.API.OECClient.OnRelationsChanged">
            <summary>
            Occurs when the list of related <see cref="P:OEC.API.OECClient.Users"/> is updated
            </summary>
        </member>
        <member name="E:OEC.API.OECClient.OnPitGroupsChanged">
            <summary>
            Occurs when the list of visible <see cref="P:OEC.API.OECClient.PitGroups"/> (routes) is updated
            </summary>
        </member>
        <member name="E:OEC.API.OECClient.OnTradersChanged">
            <summary>
            Occurs when the list of visible <see cref="P:OEC.API.OECClient.Traders"/> is changed.
            </summary>
            <remarks>
            Traders are visible only for TraderManager or Admin logins.
            </remarks>
        </member>
        <member name="E:OEC.API.OECClient.OnContractsChanged">
            <summary>
            Occurs when the list of options/compounds is updated
            </summary>
            <seealso cref="M:OEC.API.OECClient.RequestContracts(OEC.API.BaseContract)"/>
        </member>
        <member name="E:OEC.API.OECClient.OnOsmAlgoListUpdated">
            <summary>
            Occurs when OSM broker updates the list of available OSM algorithms. 
            </summary>
            <seealso cref="M:OEC.API.OECClient.UpdateOsmAlgoList(OEC.API.OSM.Info.AlgoList)"/>
        </member>
        <member name="E:OEC.API.OECClient.OnOsmAlgoListLoaded">
            <summary>
            Occurs when the list of OSM algorithms is loaded. 
            </summary>
            <seealso cref="M:OEC.API.OECClient.LoadOsmAlgoList"/>
        </member>
        <member name="E:OEC.API.OECClient.OnSymbolLookupReceived">
            <summary>
            Occurs when the results of Symbol Lookup is loaded
            </summary>
            <seealso cref="M:OEC.API.OECClient.SymbolLookup(System.String)"/>
        </member>
        <member name="E:OEC.API.OECClient.OnQuoteDetailsChanged">
            <summary>
            Occurs when <see cref="P:OEC.API.Contract.QuoteDetails"/> are received in response to <see cref="M:OEC.API.OECClient.RequestQuoteDetails(OEC.API.Contract)"/> call
            </summary>
            <exclude/>
        </member>
        <member name="E:OEC.API.OECClient.OnIndexComponentsReceived">
            <summary>
            Occurs when <see cref="P:OEC.API.Contract.IndexComponents"/> are received in response to <see cref="M:OEC.API.OECClient.RequestIndexComponents(OEC.API.Contract)"/> call
            </summary>
            <exclude/>
        </member>
        <member name="E:OEC.API.OECClient.OnCompoundPositionGroupChanged">
            <summary>
            Occurs when Occurs when any compound group or its leg position is changed or a new contract group created
            </summary>
            <seealso cref="T:OEC.API.CompoundPositionGroup"/>
            <seealso cref="P:OEC.API.CompoundPositionGroup.Positions"/>
            <exclude/>
        </member>
        <member name="E:OEC.API.OECClient.OnContractChanged">
            <summary>
            Occurs when the contract properties like tick and contract size are updated
            </summary>
        </member>
        <member name="E:OEC.API.OECClient.OnContinuousContractRuleChanged">
            <summary>
            Occurs when continuous contract rule was changed for logged user
            </summary>
        </member>
        <member name="E:OEC.API.OECClient.OnAllocationBlocksChanged">
            <summary>
            Occurs when allocation block list was changed for logged user
            </summary>
        </member>
        <member name="E:OEC.API.OECClient.OnLoggedUserClientsChanged">
            <summary>
            Occurs when list of user sessions changed. For example when user connected/disconnected from another location
            </summary>
        </member>
        <member name="E:OEC.API.OECClient.OnAccountRiskLimitChanged">
            <summary>
            Occurs when risk limit type is changed for account
            </summary>
        </member>
        <member name="E:OEC.API.OECClient.OnContractRiskLimitChanged">
            <summary>
            Occurs when risk limit type is changed for contract
            </summary>
        </member>
        <member name="E:OEC.API.OECClient.OnRiskLimitDetailsReceived">
            <summary>
            Occurs when new risk limits received and RiskLimits collection changed
            </summary>
        </member>
        <member name="E:OEC.API.OECClient.OnProductCalendarUpdated">
            <summary>
            Occurs when a product calendar is updated
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.EventBatchInterval">
            <summary>
            Interval for accumulating events to batch, in ms.
            <see cref="E:OEC.API.OECClient.OnBeginEvents"/>
            <see cref="E:OEC.API.OECClient.OnEndEvents"/>
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.ConnectionClosed">
            <summary>
            Checks is the connection to OEC Server closed
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.CompleteConnected">
            <summary>
            Checks whether connection is established and all data loaded. 
            See <see cref="E:OEC.API.OECClient.OnLoginComplete"/>.
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.InAutoReconnect">
            <summary>
            Checks whether auto-reconnect is in progress now
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.ServerStrategyManager">
            <summary>
            Gets ServerStrategyManager instance. 
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.OECClient.Accounts">
            <summary>
            List of available accounts for trade. See <see cref="T:OEC.API.Account"/>.
            </summary>
            <remarks>
            Usually trader has only one account, but it is possible to control several accounts from one logins.
            <br/>
            Trader manager will also have all accounts of underlying <see cref="T:OEC.API.Trader"/>s there.
            </remarks>
        </member>
        <member name="P:OEC.API.OECClient.AllocationBlocks">
            <summary>
            List of allocation blocks
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.Orders">
            <summary>
            List of orders in current trading session. See <see cref="T:OEC.API.Order"/>.
            </summary>
            <remarks>
            Note that orders are not deleted from this collection when trading session ends - they
            will still be available until client disconnects and connects again.
            </remarks>
        </member>
        <member name="P:OEC.API.OECClient.ContractGroups">
            <summary>
            List of available contract groups. See <see cref="T:OEC.API.ContractGroup"/>, <see cref="T:OEC.API.Contract"/>.
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.Contracts">
            <summary>
            List of available contracts. See <see cref="T:OEC.API.Contract"/> .
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.BaseContracts">
            <summary>
            List of available base symbols. See  <see cref="T:OEC.API.BaseContract"/>.
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.Exchanges">
            <summary>
            List of available <see cref="T:OEC.API.Exchange">exchanges</see>.
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.Currencies">
            <summary>
            List of available <see cref="T:OEC.API.Currency">currencies</see>.
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.Users">
            <summary>
            List of users available for chat. See <see cref="T:OEC.API.User"/>.
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.Channels">
            <summary>
            List of news channels available for writing. See <see cref="T:OEC.API.Channel"/>.
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.Traders">
            <summary>
            List of underlying traders 
            </summary>
            <remarks>
            Available only for TraderManager or Admin logins.
            </remarks>
            <seealso cref="T:OEC.API.Trader"/>
            <seealso cref="T:OEC.API.Account"/>
        </member>
        <member name="P:OEC.API.OECClient.TraderCategories">
            <summary>
            List of trader categories
            </summary>
            <remarks>
            Available only for TraderManager or Admin logins.
            </remarks>
            <seealso cref="T:OEC.API.Trader"/>
            <seealso cref="T:OEC.API.Account"/>
        </member>
        <member name="P:OEC.API.OECClient.PitGroups">
            <summary>
            List of available PitGroups (routes). 
            See <see cref="T:OEC.API.PitGroup"/>.
            </summary>
            <remarks>
            Available only for admins and brokers. 
            </remarks>
        </member>
        <member name="P:OEC.API.OECClient.Routes">
            <summary>
            List of available execution routes
            See <see cref="T:OEC.API.Route"/>
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.ClearingHouses">
            <summary>
            List of available Clearing houses
            </summary>
            <remarks>
            Available only for admins.
            </remarks>
        </member>
        <member name="P:OEC.API.OECClient.Properties">
            <summary>
            List of custom user properties
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.News">
            <summary>
            List of news messages for last 24 hours   
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.Chat">
            <summary>
            List of chat messages for last 24 hours.
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.Subscriptions">
            <summary>
            List of subscriptions
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.ServerHost">
            <summary>
            Last server host passed to Connect method
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.Username">
            <summary>
            Last username passed to Connect method
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.PasswordExpirationDate">
            <summary>
            Password Expiration Date
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.UUID">
            <summary>
            Unique Universal IDentifier (UUID)
            This value has to be set to identify application when OEC API is being used by 3rd parties.
            Remoting connections are required to specify UUID as well.
            UUID must be obtained from OEC by contacting support (support@openecry.com). 
            Obtaining the UUID and connecting your application to OEC with the UUID will enable your users 
            to leverage a single login to access both your application as well as OEC's Trading platform at the same time.
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.UseHypoPL">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.OECClient.InRemoting">
            <summary>
            </summary>
            <exclude/>
        </member>
        <member name="P:OEC.API.OECClient.LoggedUserClients">
            <summary>
            List of another sessions of current user
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.RiskLimits">
            <summary>
            List of all available risk limits
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.PriceHost">
            <summary>
            Sets price server host name
            </summary>
            <remarks>
            Only this price server will be used if setted
            </remarks>
        </member>
        <member name="P:OEC.API.OECClient.WashAccounts">
            <summary>
            Wash accounts 
            </summary>
            <remarks>
            Used for Allocation blocks <br/>
            Available for trader managers only.
            </remarks>
        </member>
        <member name="P:OEC.API.OECClient.LayerConfigurations">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.OECClient.RemoteHostingEnabled">
            <summary>
            Allows remoting access to this instance of OEC API
            See <see cref="M:OEC.API.OECClient.CreateInstance(System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.OsmAlgoList">
            <summary>
            The list of OSM algorithms. 
            </summary>
        </member>
        <member name="P:OEC.API.OECClient.Administrator">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.OECClient.AutoSubscribe">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="T:OEC.API.OnContractCreatedEvent">
            <summary>
            New custom contract created
            </summary>
            <param name="RequestID"></param>
            <param name="Contract"></param>
            <exclude />
        </member>
        <member name="T:OEC.API.OnDealQuoteUpdatedEvent">
            <summary>
            </summary>
            <param name="dealQuote"></param>
            <exclude />
        </member>
        <member name="T:OEC.API.OnMarginCalculationCompletedEvent">
            <summary>
            </summary>
            <param name="response"></param>
            <exclude />
        </member>
        <member name="T:OEC.API.OnPortfolioMarginChangedEvent">
            <summary>
            Portfolio margining changed
            </summary>
            <param name="account">affected account</param>
            <exclude />
        </member>
        <member name="T:OEC.API.OnPostAllocationEvent">
            <summary>
            Result of post-allocation
            </summary>
            <param name="order"></param>
            <param name="contract"></param>
            <param name="allocationBlock"></param>
            <param name="result"></param>
        </member>
        <member name="T:OEC.API.LoggingProperties">
            <summary>
            Property names used for Log.ThreadContext
            </summary>
        </member>
        <member name="F:OEC.API.LoggingProperties.LogSourceLevelPropertyName">
            <summary>
            Logger context stack property name for loggin level. The following code will get logging level <code>(OECClient)Log.ThreadContext.Stacks[OECClient.LogSourceClientPropertyName].Peek()</code>
            </summary>
        </member>
        <member name="F:OEC.API.LoggingProperties.LogSourceClientPropertyName">
            <summary>
            Logger context stack Property name for client instance. The following code will get logging client instance <code>(LogLevel)Log.ThreadContext.Stacks[OECClient.LogSourceLevelPropertyName].Peek()</code>
            </summary>
        </member>
        <member name="T:OEC.API.LoggingConfiguration">
            <summary>
            API Logging configuration
            </summary>
        </member>
        <member name="M:OEC.API.LoggingConfiguration.#ctor">
            <exclude/>
        </member>
        <member name="P:OEC.API.LoggingConfiguration.Level">
            <summary>
            Level of logging
            </summary>
        </member>
        <member name="P:OEC.API.LoggingConfiguration.DataFeedLoggingInterval">
            <summary>
            Gets or sets time interval meaning how often to log data feed messages. Every DataFeedLogIndexNumber messages will be logged not more often than DataFeedLoggingInterval
            </summary>
        </member>
        <member name="P:OEC.API.LoggingConfiguration.DataFeedLogIndexNumber">
            <summary>
            Sets or gets index number of data feed message to log. Every DataFeedLogIndexNumber message (1st, 2nd ... etc) will be logged
            </summary>
        </member>
        <member name="T:OEC.API.LogLevel">
            <summary>
            API log source layer
            </summary>
        </member>
        <member name="F:OEC.API.LogLevel.Core">
            <summary>
            Non-application and non-transport activity inside API
            </summary>
        </member>
        <member name="F:OEC.API.LogLevel.Datafeed">
            <summary>
            Incoming price connection activity (data feed)
            </summary>
        </member>
        <member name="F:OEC.API.LogLevel.Transport">
            <summary>
            Activity between API and servers, all except incoming price connection (data feed)
            </summary>
        </member>
        <member name="F:OEC.API.LogLevel.Application">
            <summary>
            Calls from application
            </summary>
        </member>
        <member name="F:OEC.API.LogLevel.All">
            <summary>
            All logging levels
            </summary>
        </member>
        <member name="T:OEC.API.OSM.IAlgoParam">
            <summary>
            Represents a parameter for an OSM algorithm. 
            </summary>
            <seealso cref="T:OEC.API.OSM.AlgoParam"/>
        </member>
        <member name="P:OEC.API.OSM.IAlgoParam.Name">
            <summary>
            Gets the name of a parameter. 
            </summary>
        </member>
        <member name="P:OEC.API.OSM.IAlgoParam.IntValue">
            <summary>
            Gets the value of a parameter as signed 32-bit integer. 
            </summary>
        </member>
        <member name="P:OEC.API.OSM.IAlgoParam.LongValue">
            <summary>
            Gets the value of a parameter as signed 64-bit integer. 
            </summary>
        </member>
        <member name="P:OEC.API.OSM.IAlgoParam.DoubleValue">
            <summary>
            Gets the value of a parameter as 64-bit floating-point value.
            </summary>
        </member>
        <member name="P:OEC.API.OSM.IAlgoParam.BoolValue">
            <summary>
            Gets the value of a parameter as boolean value.
            </summary>
        </member>
        <member name="P:OEC.API.OSM.IAlgoParam.StringValue">
            <summary>
            Gets the value of a parameter as string value.
            </summary>
        </member>
        <member name="P:OEC.API.OSM.IAlgoParam.DateTimeValue">
            <summary>
            Gets the value of a parameter as date/time value.
            </summary>
        </member>
        <member name="T:OEC.API.OSM.IAlgoParams">
            <summary>
            Represents an enumerable list of OSM algo parameters. 
            </summary>
            <seealso cref="T:OEC.API.OSM.AlgoParams"/>
        </member>
        <member name="P:OEC.API.OSM.IAlgoParams.Item(System.String)">
            <summary>
            Gets an OSM algo parameter by name. 
            </summary>
            <param name="paramName">The name of OSM algo parameter</param>
        </member>
        <member name="T:OEC.API.OSM.AlgoParam">
            <summary>
            Represents a parameter for an OSM algorithm. 
            </summary>
            <seealso cref="T:OEC.API.OSM.IAlgoParam"/>
            <seealso cref="T:OEC.API.OSM.AlgoParams"/>
        </member>
        <member name="M:OEC.API.OSM.AlgoParam.#ctor(System.String,System.Int32)">
            <summary>
            Creates an OSM algo parameter. 
            </summary>
            <param name="name">Name of a parameter</param>
            <param name="value">Value of a parameter</param>
        </member>
        <member name="M:OEC.API.OSM.AlgoParam.#ctor(System.String,System.Int64)">
            <summary>
            Creates an OSM algo parameter. 
            </summary>
            <param name="name">Name of a parameter</param>
            <param name="value">Value of a parameter</param>
        </member>
        <member name="M:OEC.API.OSM.AlgoParam.#ctor(System.String,System.Double)">
            <summary>
            Creates an OSM algo parameter. 
            </summary>
            <param name="name">Name of a parameter</param>
            <param name="value">Value of a parameter</param>
        </member>
        <member name="M:OEC.API.OSM.AlgoParam.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an OSM algo parameter. 
            </summary>
            <param name="name">Name of a parameter</param>
            <param name="value">Value of a parameter</param>
        </member>
        <member name="M:OEC.API.OSM.AlgoParam.#ctor(System.String,System.String)">
            <summary>
            Creates an OSM algo parameter. 
            </summary>
            <param name="name">Name of a parameter</param>
            <param name="value">Value of a parameter</param>
        </member>
        <member name="M:OEC.API.OSM.AlgoParam.#ctor(System.String,System.DateTime)">
            <summary>
            Creates an OSM algo parameter. 
            </summary>
            <param name="name">Name of a parameter</param>
            <param name="value">Value of a parameter</param>
        </member>
        <member name="M:OEC.API.OSM.AlgoParam.Clone">
            <summary>
            Clones OSM algo parameter. 
            </summary>
        </member>
        <member name="M:OEC.API.OSM.AlgoParam.ToString">
            <summary>
            Returns a string that represents the current instance. 
            </summary>
        </member>
        <member name="P:OEC.API.OSM.AlgoParam.Name">
            <summary>
            Gets the name of a parameter. 
            </summary>
        </member>
        <member name="P:OEC.API.OSM.AlgoParam.IntValue">
            <summary>
            Gets the value of a parameter as signed 32-bit integer. 
            </summary>
        </member>
        <member name="P:OEC.API.OSM.AlgoParam.LongValue">
            <summary>
            Gets the value of a parameter as signed 64-bit integer. 
            </summary>
        </member>
        <member name="P:OEC.API.OSM.AlgoParam.DoubleValue">
            <summary>
            Gets the value of a parameter as 64-bit floating-point value.
            </summary>
        </member>
        <member name="P:OEC.API.OSM.AlgoParam.BoolValue">
            <summary>
            Gets the value of a parameter as boolean value.
            </summary>
        </member>
        <member name="P:OEC.API.OSM.AlgoParam.StringValue">
            <summary>
            Gets the value of a parameter as string value.
            </summary>
        </member>
        <member name="P:OEC.API.OSM.AlgoParam.DateTimeValue">
            <summary>
            Gets the value of a parameter as date/time value.
            </summary>
        </member>
        <member name="T:OEC.API.OSM.AlgoParams">
            <summary>
            Represents an enumerable list of OSM algo parameters. 
            </summary>
            <seealso cref="T:OEC.API.OSM.AlgoParam"/>
            <seealso cref="T:OEC.API.OSM.IAlgoParams"/>
            <seealso cref="T:OEC.API.OSM.RootOrder"/>
        </member>
        <member name="M:OEC.API.OSM.AlgoParams.AddParams(OEC.API.OSM.AlgoParam[])">
            <summary>
            Adds OSM algo parameters. 
            </summary>
            <param name="Params">OSM algo parameters</param>
        </member>
        <member name="M:OEC.API.OSM.AlgoParams.AddParam(OEC.API.OSM.AlgoParam)">
            <summary>
            Adds OSM algo parameter. 
            </summary>
            <param name="param">OSM algo parameter</param>
        </member>
        <member name="M:OEC.API.OSM.AlgoParams.Remove(System.String)">
            <summary>
            Removes an OSM algo parameter.
            </summary>
            <param name="name">The name of the OSM algo parameter to remove</param>
        </member>
        <member name="M:OEC.API.OSM.AlgoParams.Clear">
            <summary>
            Clears the list of OSM algo parameters.
            </summary>
        </member>
        <member name="M:OEC.API.OSM.AlgoParams.Clone">
            <summary>
            Clones a list of OSM algo parameters.
            </summary>
        </member>
        <member name="M:OEC.API.OSM.AlgoParams.ToString">
            <summary>
            Returns the list of OSM algo parameters as a string.
            </summary>
        </member>
        <member name="M:OEC.API.OSM.AlgoParams.GetEnumerator">
            <summary>
            Returns enumerator.
            </summary>
        </member>
        <member name="P:OEC.API.OSM.AlgoParams.Item(System.String)">
            <summary>
            Gets an OSM algo parameter by name. 
            </summary>
            <param name="paramName">The name of OSM algo parameter</param>
        </member>
        <member name="T:OEC.API.OSM.RootOrder">
            <summary>
            Represents an OSM root order. 
            </summary>
            <remarks>
            OSM root order is stored as order extended data. 
            </remarks>
            <seealso cref="P:OEC.API.OSM.RootOrder.AlgoParams"/>
            <seealso cref="T:OEC.API.ExtendedData"/>
        </member>
        <member name="M:OEC.API.OSM.RootOrder.#ctor(System.String,OEC.API.OSM.AlgoParams)">
            <summary>
            Creates an OSM root order. 
            </summary>
            <param name="algoName">The name of OSM algorithm</param>
            <param name="algoParams">List of OSM algo parameters</param>
        </member>
        <member name="M:OEC.API.OSM.RootOrder.Clone">
            <summary>
            Clones OSM root order. 
            </summary>
        </member>
        <member name="M:OEC.API.OSM.RootOrder.ToString">
            <summary>
            Returns a string that represents the current instance. 
            </summary>
        </member>
        <member name="P:OEC.API.OSM.RootOrder.AlgoName">
            <summary>
            Gets the name of an OSM algorithm.
            </summary>
        </member>
        <member name="P:OEC.API.OSM.RootOrder.AlgoParams">
            <summary>
            Gets the tist of OSM algo parameters. 
            </summary>
        </member>
        <member name="T:OEC.API.OSM.ChildOrder">
            <summary>
            Represents an OSM child order. 
            </summary>
            <remarks>
            OSM child order is stored as order extended data. 
            </remarks>
            <seealso cref="T:OEC.API.ExtendedData"/>
        </member>
        <member name="M:OEC.API.OSM.ChildOrder.Clone">
            <summary>
            Clones OSM child order. 
            </summary>
        </member>
        <member name="M:OEC.API.OSM.ChildOrder.ToString">
            <summary>
            Returns a string that represents the current instance. 
            </summary>
        </member>
        <member name="P:OEC.API.OSM.ChildOrder.OsmRoot">
            <summary>
            Gets the OSM root order, which this child order belongs to. 
            </summary>
        </member>
        <member name="T:OEC.API.OSM.Info.DataDomain">
            <summary>
            Represents data domain for a value of OSM algo parameter. 
            </summary>
            <seealso cref="T:OEC.API.OSM.Info.AlgoParam"/>
        </member>
        <member name="M:OEC.API.OSM.Info.DataDomain.IntDomain(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Factory method that creates an instance of <see cref="T:OEC.API.OSM.Info.DataDomain"/> class. 
            </summary>
            <param name="units">Measure units for value</param>
            <param name="defaultValue">Default value</param>
            <param name="min">Minimal value</param>
            <param name="max">Maximal value</param>
            <returns>Data domain for signed 32-bit integer value</returns>
        </member>
        <member name="M:OEC.API.OSM.Info.DataDomain.IntDomain(System.String,System.Int32)">
            <summary>
            Factory method that creates an instance of <see cref="T:OEC.API.OSM.Info.DataDomain"/> class. 
            </summary>
            <param name="units">Measure units for value</param>
            <param name="defaultValue">Default value</param>
            <returns>Data domain for signed 32-bit integer value</returns>
        </member>
        <member name="M:OEC.API.OSM.Info.DataDomain.LongDomain(System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            Factory method that creates an instance of <see cref="T:OEC.API.OSM.Info.DataDomain"/> class. 
            </summary>
            <param name="units">Measure units for value</param>
            <param name="defaultValue">Default value</param>
            <param name="min">Minimal value</param>
            <param name="max">Maximal value</param>
            <returns>Data domain for signed 64-bit integer value</returns>
        </member>
        <member name="M:OEC.API.OSM.Info.DataDomain.LongDomain(System.String,System.Int64)">
            <summary>
            Factory method that creates an instance of <see cref="T:OEC.API.OSM.Info.DataDomain"/> class. 
            </summary>
            <param name="units">Measure units for value</param>
            <param name="defaultValue">Default value</param>
            <returns>Data domain for signed 64-bit integer value</returns>
        </member>
        <member name="M:OEC.API.OSM.Info.DataDomain.DoubleDomain(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Factory method that creates an instance of <see cref="T:OEC.API.OSM.Info.DataDomain"/> class. 
            </summary>
            <param name="units">Measure units for value</param>
            <param name="defaultValue">Default value</param>
            <param name="min">Minimal value</param>
            <param name="max">Maximal value</param>
            <returns>Data domain for 64-bit floating-point value</returns>
        </member>
        <member name="M:OEC.API.OSM.Info.DataDomain.DoubleDomain(System.String,System.Double)">
            <summary>
            Factory method that creates an instance of <see cref="T:OEC.API.OSM.Info.DataDomain"/> class. 
            </summary>
            <param name="units">Measure units for value</param>
            <param name="defaultValue">Default value</param>
            <returns>Data domain for 64-bit floating-point value</returns>
        </member>
        <member name="M:OEC.API.OSM.Info.DataDomain.BoolDomain(System.Boolean)">
            <summary>
            Factory method that creates an instance of <see cref="T:OEC.API.OSM.Info.DataDomain"/> class. 
            </summary>
            <param name="defaultValue">Default value</param>
            <returns>Data domain for boolean value</returns>
        </member>
        <member name="M:OEC.API.OSM.Info.DataDomain.BoolDomain(System.String,System.Boolean)">
            <summary>
            Factory method that creates an instance of <see cref="T:OEC.API.OSM.Info.DataDomain"/> class. 
            </summary>
            <param name="units">Measure units for value</param>
            <param name="defaultValue">Default value</param>
            <returns>Data domain for boolean value</returns>
        </member>
        <member name="M:OEC.API.OSM.Info.DataDomain.StringDomain(System.String,System.Int32,System.Int32)">
            <summary>
            Factory method that creates an instance of <see cref="T:OEC.API.OSM.Info.DataDomain"/> class. 
            </summary>
            <param name="defaultValue">Default value</param>
            <param name="minLength">Minimal length of a string</param>
            <param name="maxLength">Maximal length of a string</param>
            <returns>Data domain for string value</returns>
        </member>
        <member name="M:OEC.API.OSM.Info.DataDomain.StringDomain(System.String)">
            <summary>
            Factory method that creates an instance of <see cref="T:OEC.API.OSM.Info.DataDomain"/> class. 
            </summary>
            <param name="defaultValue">Default value</param>
            <returns>Data domain for string value</returns>
        </member>
        <member name="M:OEC.API.OSM.Info.DataDomain.DateTimeDomain(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Factory method that creates an instance of <see cref="T:OEC.API.OSM.Info.DataDomain"/> class. 
            </summary>
            <param name="defaultValue">Default value</param>
            <param name="min">Minimal value</param>
            <param name="max">Maximal value</param>
            <returns>Data domain for date/time value</returns>
        </member>
        <member name="M:OEC.API.OSM.Info.DataDomain.DateTimeDomain(System.DateTime)">
            <summary>
            Factory method that creates an instance of <see cref="T:OEC.API.OSM.Info.DataDomain"/> class. 
            </summary>
            <param name="defaultValue">Default value</param>
            <returns>Data domain for date/time value</returns>
        </member>
        <member name="M:OEC.API.OSM.Info.DataDomain.EnumDomain(System.String,System.String[])">
            <summary>
            Factory method that creates an instance of <see cref="T:OEC.API.OSM.Info.DataDomain"/> class. 
            </summary>
            <param name="defaultValue">Default value</param>
            <param name="values">Values of enumeration</param>
            <returns>Data domain for string-enumeration value</returns>
        </member>
        <member name="M:OEC.API.OSM.Info.DataDomain.Clone">
            <summary>
            Clones data domain. 
            </summary>
        </member>
        <member name="M:OEC.API.OSM.Info.DataDomain.ToString">
            <summary>
            Returns a string that represents the current instance. 
            </summary>
        </member>
        <member name="M:OEC.API.OSM.Info.DataDomain.ValidateParam(OEC.API.OSM.IAlgoParam)">
            <summary>
            Validates an OSM algo parameter to this data domain. 
            </summary>
            <remarks>
            Throws an exception <see cref="T:System.Exception"/> if validation failed. 
            </remarks>
            <param name="param">OSM algo parameter to be validated</param>
        </member>
        <member name="P:OEC.API.OSM.Info.DataDomain.DataType">
            <summary>
            Gets data type for data domain. 
            </summary>
        </member>
        <member name="P:OEC.API.OSM.Info.DataDomain.Default">
            <summary>
            Gets OSM algo parameter with default value. 
            </summary>
        </member>
        <member name="P:OEC.API.OSM.Info.DataDomain.Units">
            <summary>
            Gets measure units for data domain. 
            </summary>
        </member>
        <member name="T:OEC.API.OSM.Info.AlgoParam">
            <summary>
            Represents information about OSM algo parameter. 
            </summary>
        </member>
        <member name="M:OEC.API.OSM.Info.AlgoParam.#ctor(System.String,OEC.API.OSM.Info.DataDomain,System.Boolean,System.String)">
            <summary>
            Creates OSM algo parameter. 
            </summary>
            <param name="name">The name of OSM algo parameter</param>
            <param name="dataDomain">Data domain for the OSM algo parameter</param>
            <param name="enabled">Enable/disable the OSM algo parameter</param>
            <param name="description">Description of the OSM algo parameter</param>
            <seealso cref="P:OEC.API.OSM.Info.AlgoParam.DataDomain"/>
        </member>
        <member name="M:OEC.API.OSM.Info.AlgoParam.#ctor(System.String,OEC.API.OSM.Info.DataDomain,System.Boolean,System.String,System.Xml.XmlElement[])">
            <summary>
            Creates OSM algo parameter. 
            </summary>
            <param name="name">The name of OSM algo parameter</param>
            <param name="dataDomain">Data domain for the OSM algo parameter</param>
            <param name="enabled">Enable/disable the OSM algo parameter</param>
            <param name="description">Description of the OSM algo parameter</param>
            <param name="Others">For internal use only</param>
            <seealso cref="P:OEC.API.OSM.Info.AlgoParam.DataDomain"/>
        </member>
        <member name="M:OEC.API.OSM.Info.AlgoParam.#ctor(System.String,System.Boolean,OEC.API.OSM.Info.DataDomain,System.Boolean,System.String)">
            <summary>
            Creates OSM algo parameter. 
            </summary>
            <param name="name">The name of OSM algo parameter</param>
            <param name="modifiable">Specifies that the value of an OSM algo parameter can be changed in modify command for OSM root order.</param>
            <param name="dataDomain">Data domain for the OSM algo parameter</param>
            <param name="enabled">Enable/disable the OSM algo parameter</param>
            <param name="description">Description of the OSM algo parameter</param>
            <seealso cref="P:OEC.API.OSM.Info.AlgoParam.DataDomain"/>
        </member>
        <member name="M:OEC.API.OSM.Info.AlgoParam.#ctor(System.String,System.Boolean,OEC.API.OSM.Info.DataDomain,System.Boolean,System.String,System.Xml.XmlElement[])">
            <summary>
            Creates OSM algo parameter. 
            </summary>
            <param name="name">The name of OSM algo parameter</param>
            <param name="modifiable">Specifies that the value of an OSM algo parameter can be changed in modify command for OSM root order.</param>
            <param name="dataDomain">Data domain for the OSM algo parameter</param>
            <param name="enabled">Enable/disable the OSM algo parameter</param>
            <param name="description">Description of the OSM algo parameter</param>
            <param name="Others">Flexible part of description</param>
            <seealso cref="P:OEC.API.OSM.Info.AlgoParam.DataDomain"/>
        </member>
        <member name="F:OEC.API.OSM.Info.AlgoParam.Others">
            <summary>
            Flexible part of description. For internal use only.
            </summary>
            <exclude/>
        </member>
        <member name="M:OEC.API.OSM.Info.AlgoParam.Clone">
            <summary>
            Clones OSM algo parameter. 
            </summary>
        </member>
        <member name="P:OEC.API.OSM.Info.AlgoParam.Name">
            <summary>
            Gets the name of OSM algo parameter. 
            </summary>
        </member>
        <member name="P:OEC.API.OSM.Info.AlgoParam.Modifiable">
            <summary>
            Gets the flag specifying that the value of OSM algo parameter can be changed in modify commands. 
            </summary>
        </member>
        <member name="P:OEC.API.OSM.Info.AlgoParam.DataDomain">
            <summary>
            Gets data domain of OSM algo parameter. 
            </summary>
            <seealso cref="P:OEC.API.OSM.Info.AlgoParam.DataDomain"/>
        </member>
        <member name="P:OEC.API.OSM.Info.AlgoParam.Description">
            <summary>
            Gets description of OSM algo parameter. 
            </summary>
        </member>
        <member name="P:OEC.API.OSM.Info.AlgoParam.Enabled">
            <summary>
            Gets enabled/disabled state of OSM algo parameter. 
            </summary>
        </member>
        <member name="T:OEC.API.OSM.Info.IAlgoParams">
            <summary>
            Represents an enumerable list of OSM algo parameters. 
            </summary>
            <seealso cref="T:OEC.API.OSM.Info.AlgoParam"/>
        </member>
        <member name="P:OEC.API.OSM.Info.IAlgoParams.Item(System.String)">
            <summary>
            Gets an OSM algo parameter by name. 
            </summary>
            <param name="name">The name of OSM algo parameter</param>
            <seealso cref="T:OEC.API.OSM.Info.AlgoParam"/>
        </member>
        <member name="T:OEC.API.OSM.Info.IAlgo">
            <summary>
            Represents information about an OSM algorithm. 
            </summary>
            <seealso cref="T:OEC.API.OSM.Info.Algo"/>
        </member>
        <member name="M:OEC.API.OSM.Info.IAlgo.ValidateRootOrder(OEC.API.Order)">
            <summary>
            Validates an OSM root order to this OSM algo information. 
            </summary>
            <param name="rootOrder">OSM root order to be validated</param>
            <remarks>
            This method throws an exception <see cref="T:System.Exception"/> if validation failed. 
            </remarks>
        </member>
        <member name="M:OEC.API.OSM.Info.IAlgo.ValidateRootDraft(OEC.API.OrderDraft)">
            <summary>
            Validates an OSM root draft to this OSM algo information. 
            </summary>
            <param name="draft">OSM root draft to be validated</param>
            <remarks>
            This method throws an exception <see cref="T:System.Exception"/> if validation failed. 
            </remarks>
        </member>
        <member name="P:OEC.API.OSM.Info.IAlgo.AlgoName">
            <summary>
            Gets the name of OSM algorithm. 
            </summary>
        </member>
        <member name="P:OEC.API.OSM.Info.IAlgo.Params">
            <summary>
            Gets a list of OSM algo parameters. 
            </summary>
            <seealso cref="T:OEC.API.OSM.IAlgoParam"/>
        </member>
        <member name="P:OEC.API.OSM.Info.IAlgo.OrderTypes">
            <summary>
            Gets an enumerable list of order types, supported by OSM algorithm. 
            </summary>
            <seealso cref="T:OEC.Data.OrderType"/>
        </member>
        <member name="P:OEC.API.OSM.Info.IAlgo.OrderFlags">
            <summary>
            Gets an enumerable list of order flags, supported by OSM algorithm. 
            </summary>
            <seealso cref="T:OEC.Data.OrderFlags"/>
        </member>
        <member name="P:OEC.API.OSM.Info.IAlgo.OtherDetails">
            <summary>
            </summary>
            <exclude/>
        </member>
        <member name="T:OEC.API.OSM.Info.Algo">
            <summary>
            Represents information about an OSM algorithm. 
            </summary>
            <seealso cref="T:OEC.API.OSM.Info.IAlgo"/>
        </member>
        <member name="M:OEC.API.OSM.Info.Algo.#ctor(System.String,OEC.API.OSM.Info.Algo.AlgoParams,System.Xml.XmlElement[])">
            <summary>
            Creates OSM algorithm. 
            </summary>
            <param name="algoName">The name of OSM algorithm.</param>
            <param name="algoParams">List of OSM algo parameters</param>
            <param name="otherDetails">Flexible part of description</param>
            <seealso cref="T:OEC.API.OSM.Info.Algo.AlgoParams"/>
        </member>
        <member name="M:OEC.API.OSM.Info.Algo.SetOrderTypes(System.Collections.Generic.IEnumerable{OEC.Data.OrderType})">
            <summary>
            Sets a list of order types. 
            </summary>
            <param name="types">List of order types.</param>
            <seealso cref="T:OEC.Data.OrderType"/>
        </member>
        <member name="M:OEC.API.OSM.Info.Algo.SetOrderFlags(System.Collections.Generic.IEnumerable{OEC.Data.OrderFlags})">
            <summary>
            Sets a list of order flags. 
            </summary>
            <param name="flags">List of order flags.</param>
            <seealso cref="T:OEC.Data.OrderFlags"/>
        </member>
        <member name="M:OEC.API.OSM.Info.Algo.Clone">
            <summary>
            Clones OSM algorithm. 
            </summary>
        </member>
        <member name="M:OEC.API.OSM.Info.Algo.ValidateRootOrder(OEC.API.Order)">
            <summary>
            Validates an OSM root order to this OSM algo information. 
            </summary>
            <param name="rootOrder">OSM root order to be validated</param>
            <remarks>
            This method throws an exception <see cref="T:System.Exception"/> if validation failed. 
            </remarks>
        </member>
        <member name="M:OEC.API.OSM.Info.Algo.ValidateRootDraft(OEC.API.OrderDraft)">
            <summary>
            Validates an OSM root draft to this OSM algo information. 
            </summary>
            <param name="draft">OSM root draft to be validated</param>
            <remarks>
            This method throws an exception <see cref="T:System.Exception"/> if validation failed. 
            </remarks>
        </member>
        <member name="P:OEC.API.OSM.Info.Algo.AlgoName">
            <summary>
            Gets the name of OSM algorithm. 
            </summary>
        </member>
        <member name="P:OEC.API.OSM.Info.Algo.Params">
            <summary>
            Gets the list of OSM algo parameters. 
            </summary>
            <seealso cref="T:OEC.API.OSM.Info.IAlgoParams"/>
        </member>
        <member name="P:OEC.API.OSM.Info.Algo.OtherDetails">
            <summary>
            </summary>
            <exclude/>
        </member>
        <member name="P:OEC.API.OSM.Info.Algo.OrderTypes">
            <summary>
            Gets the list of order types, supported by OSM algorithm. 
            </summary>
            <seealso cref="T:OEC.Data.OrderType"/>
        </member>
        <member name="P:OEC.API.OSM.Info.Algo.OrderFlags">
            <summary>
            Gets the list of order flags, supported by OSM algorithm. 
            </summary>
        </member>
        <member name="T:OEC.API.OSM.Info.Algo.AlgoParams">
            <summary>
            Represents a list of OSM algo parameters. 
            </summary>
            <seealso cref="T:OEC.API.OSM.Info.IAlgoParams"/>
        </member>
        <member name="M:OEC.API.OSM.Info.Algo.AlgoParams.AddParam(System.String,OEC.API.OSM.Info.DataDomain,System.Boolean,System.String,System.Xml.XmlElement[])">
            <summary>
            Adds an OSM algo parameter.
            </summary>
            <param name="name">The name of OSM algo parameter</param>
            <param name="dataDomain">Data domain of OSM algo parameter</param>
            <param name="enabled">Enable/disable the OSM algo parameter</param>
            <param name="description">Description of the OSM algo parameter</param>
            <param name="Others"></param>
            <seealso cref="T:OEC.API.OSM.Info.DataDomain"/>
        </member>
        <member name="M:OEC.API.OSM.Info.Algo.AlgoParams.AddParam(OEC.API.OSM.Info.AlgoParam)">
            <summary>
            Adds an OSM algo parameter. 
            </summary>
            <param name="param">OSM algo parameter to be added</param>
            <seealso cref="T:OEC.API.OSM.Info.AlgoParam"/>
        </member>
        <member name="M:OEC.API.OSM.Info.Algo.AlgoParams.AddParams(OEC.API.OSM.Info.AlgoParam[])">
            <summary>
            Adds OSM algo parameters. 
            </summary>
            <param name="algoParams">OSM algo parameters to be added</param>
            <seealso cref="T:OEC.API.OSM.Info.AlgoParam"/>
        </member>
        <member name="M:OEC.API.OSM.Info.Algo.AlgoParams.Clear">
            <summary>
            Clears the list of OSM algo parameters. 
            </summary>
        </member>
        <member name="M:OEC.API.OSM.Info.Algo.AlgoParams.Remove(System.String)">
            <summary>
            Removes an OSM algo parameter by name. 
            </summary>
            <param name="name">The name of OSM algo parameter to be removed.</param>
        </member>
        <member name="M:OEC.API.OSM.Info.Algo.AlgoParams.Clone">
            <summary>
            Clones list of OSM algo parameters. 
            </summary>
        </member>
        <member name="M:OEC.API.OSM.Info.Algo.AlgoParams.GetEnumerator">
            <summary>
            Returns enumerator.
            </summary>
        </member>
        <member name="P:OEC.API.OSM.Info.Algo.AlgoParams.Item(System.String)">
            <summary>
            Gets an OSM algo parameter by name
            </summary>
            <param name="name">The name of OSM algo parameter</param>
            <seealso cref="T:OEC.API.OSM.Info.AlgoParam"/>
        </member>
        <member name="T:OEC.API.OSM.Info.IAlgoList">
            <summary>
            Represents a list of OSM algorithms. 
            </summary>
        </member>
        <member name="M:OEC.API.OSM.Info.IAlgoList.ValidateRootOrder(OEC.API.Order)">
            <summary>
            Validates an OSM root order to this list of OSM algorithms. 
            </summary>
            <param name="rootOrder">OSM root order to be validated.</param>
            <remarks>
            This method throws an exception <see cref="T:System.Exception"/> if validation failed. 
            </remarks>
        </member>
        <member name="M:OEC.API.OSM.Info.IAlgoList.ValidateRootDraft(OEC.API.OrderDraft)">
            <summary>
            Validates an OSM root draft to this list of OSM algorithms. 
            </summary>
            <param name="draft">OSM root draft to be validated.</param>
            <remarks>
            This method throws an exception <see cref="T:System.Exception"/> if validation failed. 
            </remarks>
        </member>
        <member name="P:OEC.API.OSM.Info.IAlgoList.Item(System.String)">
            <summary>
            Gets OSM algorithm by name. 
            </summary>
            <param name="algoName">The name of OSM algorithm</param>
            <seealso cref="T:OEC.API.OSM.Info.IAlgo"/>
        </member>
        <member name="P:OEC.API.OSM.Info.IAlgoList.Items">
            <summary>
            Gets an enumerable list of OSM algorithms. 
            </summary>
            <seealso cref="T:OEC.API.OSM.Info.IAlgo"/>
        </member>
        <member name="T:OEC.API.OSM.Info.AlgoList">
            <summary>
            Represents a list of OSM algorithms. 
            </summary>
            <seealso cref="T:OEC.API.OSM.Info.IAlgoList"/>
        </member>
        <member name="M:OEC.API.OSM.Info.AlgoList.AddAlgo(OEC.API.OSM.Info.Algo)">
            <summary>
            Adds an OSM algorithm. 
            </summary>
            <param name="algo">OSM algorithm to be added</param>
            <seealso cref="T:OEC.API.OSM.Info.Algo"/>
            <exlude/>
        </member>
        <member name="M:OEC.API.OSM.Info.AlgoList.Clear">
            <summary>
            Clears list of OSM algorithms. 
            </summary>
        </member>
        <member name="M:OEC.API.OSM.Info.AlgoList.Remove(System.String)">
            <summary>
            Removes OSM algorithm by name. 
            </summary>
            <param name="algoName">The name of OSM algorithm to be removed.</param>
        </member>
        <member name="M:OEC.API.OSM.Info.AlgoList.Clone">
            <summary>
            Clones list of OSM algorithms. 
            </summary>
        </member>
        <member name="M:OEC.API.OSM.Info.AlgoList.ValidateRootOrder(OEC.API.Order)">
            <summary>
            Validates an OSM root order to this list of OSM algorithms. 
            </summary>
            <param name="rootOrder">OSM root order to be validated.</param>
            <remarks>
            This method throws an exception <see cref="T:System.Exception"/> if validation failed. 
            </remarks>
        </member>
        <member name="M:OEC.API.OSM.Info.AlgoList.ValidateRootDraft(OEC.API.OrderDraft)">
            <summary>
            Validates an OSM root draft to this list of OSM algorithms. 
            </summary>
            <param name="draft">OSM root draft to be validated.</param>
            <remarks>
            This method throws an exception <see cref="T:System.Exception"/> if validation failed. 
            </remarks>
        </member>
        <member name="P:OEC.API.OSM.Info.AlgoList.Item(System.String)">
            <summary>
            Gets OSM algorithm by name. 
            </summary>
            <param algoName="">The name of OSM algorithm</param>
            <seealso cref="T:OEC.API.OSM.Info.IAlgo"/>
        </member>
        <member name="P:OEC.API.OSM.Info.AlgoList.Items">
            <summary>
            Gets an enumerable list of OSM algorithms. 
            </summary>
            <seealso cref="T:OEC.API.OSM.Info.IAlgo"/>
        </member>
        <member name="T:OEC.API.OrderParts">
            <summary>
            Bitmask representing order properties. See <see cref="M:OEC.API.OrderDraft.GetInvalidParts"/>.
            </summary>
            <remarks>
            This enum represents set of order properties, needs to be filled.
            </remarks>
        </member>
        <member name="F:OEC.API.OrderParts.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:OEC.API.OrderParts.Account">
            <summary>
            Order account
            </summary>
        </member>
        <member name="F:OEC.API.OrderParts.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="F:OEC.API.OrderParts.Quantity">
            <summary>
            Order quantity
            </summary>
        </member>
        <member name="F:OEC.API.OrderParts.Contract">
            <summary>
            Order contract
            </summary>
        </member>
        <member name="F:OEC.API.OrderParts.Type">
            <summary>
            Order type
            </summary>
        </member>
        <member name="F:OEC.API.OrderParts.Price">
            <summary>
            Order price
            </summary>
        </member>
        <member name="F:OEC.API.OrderParts.Price2">
            <summary>
            Order price 2
            </summary>
        </member>
        <member name="F:OEC.API.OrderParts.ExtendedParams">
            <summary>
            Extended Params
            </summary>
        </member>
        <member name="F:OEC.API.OrderParts.ExecutionTime">
            <summary>
            Order execution time
            </summary>
        </member>
        <member name="F:OEC.API.OrderParts.AllocationBlock">
            <summary>
            Order allocation block
            </summary>
        </member>
        <member name="F:OEC.API.OrderParts.Route">
            <summary>
            Execution route
            </summary>
        </member>
        <member name="F:OEC.API.OrderParts.CustomCompound">
            <summary>
            Custom Compound
            </summary>
        </member>
        <member name="T:OEC.API.OrderDraft">
            <summary>
            Abstract <see cref="T:OEC.API.Order"/> draft.
            </summary>
            <remarks>
            This class is intended for unified order parameters representation, so same code can be used to set up
            order parameters for a new order or existing order modification.
            See <see cref="T:OEC.API.NewOrderDraft"/> and <see cref="T:OEC.API.ModifyOrderDraft"/> for details.
            </remarks>
        </member>
        <member name="M:OEC.API.OrderDraft.ClearExtData">
            <summary>
            Clears extended order data
            </summary>
        </member>
        <member name="M:OEC.API.OrderDraft.SetTSData(System.Double,System.Double)">
            <summary>
            Sets TralingStop parameters.
            </summary>
            <remarks>
            Usually reference price is the last trade price, and delta is 0.
            </remarks>
            <param name="Reference">Reference price</param>
            <param name="Delta">Price change threshold</param>
        </member>
        <member name="M:OEC.API.OrderDraft.SetEquityTSData(System.Double,System.Boolean,OEC.Data.TriggerType)">
            <summary>
            Sets TralingStop parameters for equity orders
            </summary>
            <param name="Amount">Trailing amount</param>
            <param name="IsPercentAmount">Indicates that the trailing amount is in percentage</param>
            <param name="TriggerType">Trailing order trigger price type</param>
            <exclude />
        </member>
        <member name="M:OEC.API.OrderDraft.SetVBSData(System.Int32)">
            <summary>
            Sets volume-based stop parameters
            </summary>
            <param name="Volume">Trigger volume</param>
        </member>
        <member name="M:OEC.API.OrderDraft.SetIcebergData(System.Int32)">
            <summary>
            Sets Iceberg order displayed quantity(volume)
            </summary>
            <param name="volume">shown volume</param>
        </member>
        <member name="M:OEC.API.OrderDraft.SetGtxData(System.Int32,System.Int32,System.Int32,OEC.Data.PegScope,OEC.Data.TriggerPriceType,System.Boolean,OEC.Data.AvgPxLimitType)">
            <summary>
            Sets GTX-related parameters
            </summary>
            <param name="minQty">Partial Fill Restriction: order may only be matched in amounts of at least this quantity of CCY1</param>
            <param name="maxFloor">Reserve Size: only display this amount of CCY1. Upon any partial fill the amount will be replenished up to this amount until the full order quantity is exhausted</param>
            <param name="matchIncrement">Partial Fill Restriction: only allow partial fills in multiples of this amount</param>
            <param name="pegScope">The scope of the “related to” price of the peg</param>
            <param name="triggerPriceType">Identifies which side of the book will trigger a stop order</param>
            <param name="rightHand">Treats order quantity as CCY2</param>
            <param name="avgPxLimit">If AveragePriceLimit, then partial fills may occur at prices beyond the requested limit price if earlier partial fills occurred at a better price, as long as the overall average filled price remains better than the requested limit price</param>
            <exclude />
        </member>
        <member name="M:OEC.API.OrderDraft.ValidateExtData">
            <summary>
            Validates extended order data
            </summary>
            <returns>true if validation passed</returns>
        </member>
        <member name="M:OEC.API.OrderDraft.#ctor">
            <summary>
            to make sure instance couldn't be created by user
            </summary>
        </member>
        <member name="M:OEC.API.OrderDraft.GetInvalidParts">
            <summary>
            Checks order draft validity.
            </summary>
            <remarks>
            This method checks whether order draft properties are filled correctly and draft is ready to send.
            Object properties, such as <see cref="P:OEC.API.OrderDraft.Account"/> and <see cref="P:OEC.API.OrderDraft.Contract"/> needs to be assigned,
            <see cref="P:OEC.API.OrderDraft.Quantity"/> should be non-zero positive; <see cref="P:OEC.API.OrderDraft.Side"/> and <see cref="P:OEC.API.OrderDraft.Type"/> should 
            be set to valid values; <see cref="P:OEC.API.OrderDraft.Price"/> and <see cref="P:OEC.API.OrderDraft.Price2"/> must
            be assigned only if given <see cref="T:OEC.Data.OrderType">order type</see> requires price(s).
            </remarks>
            <returns>Set of parts that are invalid</returns>
        </member>
        <member name="M:OEC.API.OrderDraft.GetPriceCount(OEC.Data.OrderType)">
            <summary>
            Required order prices per type.
            </summary>
            <remarks>
            Number of price fields required for an order of given type.<br/>
            Market orders does not require any price,
            STPLMT orders require 2 price fields.
            </remarks>
            <param name="ordertype">order type</param>
            <returns>0,1,2</returns>
        </member>
        <member name="M:OEC.API.OrderDraft.GetPriceCount">
            <summary>
            Number of price fields required for an order of current type.
            See also <see cref="M:OEC.API.OrderDraft.GetPriceCount(OEC.Data.OrderType)"/>
            </summary>
            <returns>0,1,2</returns>
        </member>
        <member name="M:OEC.API.OrderDraft.ToString">
            <summary>
            Order as text
            </summary>
            <returns>String representation of order</returns>
        </member>
        <member name="P:OEC.API.OrderDraft.Account">
            <summary>
            Order account
            </summary>
        </member>
        <member name="P:OEC.API.OrderDraft.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:OEC.API.OrderDraft.Contract">
            <summary>
            Order contract
            </summary>
        </member>
        <member name="P:OEC.API.OrderDraft.Quantity">
            <summary>
            Order quantity
            </summary>
        </member>
        <member name="P:OEC.API.OrderDraft.Type">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:OEC.API.OrderDraft.Price">
            <summary>
            Limit price or stop price for STP and STPLMT orders
            </summary>
        </member>
        <member name="P:OEC.API.OrderDraft.Price2">
            <summary>
            Limit price for STPLMT orders
            </summary>
        </member>
        <member name="P:OEC.API.OrderDraft.Flags">
            <summary>
            Order execution flags
            </summary>
        </member>
        <member name="P:OEC.API.OrderDraft.CustomCompound">
            <summary>
            This property should be used instead of Contract for custom compound orders
            </summary>
            <seealso cref="T:OEC.API.Contract"/>
            <seealso cref="T:OEC.API.CustomCompound"/>
            <exclude/>
        </member>
        <member name="P:OEC.API.OrderDraft.ExecInst">
            <summary>
            Order execution instructions
            </summary>
        </member>
        <member name="P:OEC.API.OrderDraft.TradingSession">
            <summary>
            Trading Session (for equities only)
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.OrderDraft.Route">
            <summary>
            Order execution route
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.OrderDraft.Comments">
            <summary>
            Order comments - usually specified a way order was entered
            </summary>
        </member>
        <member name="P:OEC.API.OrderDraft.Start">
            <summary>
            Execution start time, UTC. Version.MinimumStart means immediate execution
            </summary>
        </member>
        <member name="P:OEC.API.OrderDraft.End">
            <summary>
            Execution end time, UTC. Version.MaximumEnd means no premature cancellation.
            </summary>
        </member>
        <member name="P:OEC.API.OrderDraft.PIN">
            <summary>
            PIN that must be passed for particualar equity contracts
            </summary>
        </member>
        <member name="P:OEC.API.OrderDraft.ExtData">
            <summary>
            Extended order data.
            </summary>
        </member>
        <member name="P:OEC.API.OrderDraft.AllocationBlock">
            <summary>
            Order Allocation Block 
            </summary>
        </member>
        <member name="P:OEC.API.OrderDraft.OsmRoot">
            <summary>
            Gets OSM root order
            </summary>
        </member>
        <member name="T:OEC.API.NewOrderDraft">
            <summary>
            An <see cref="T:OEC.API.Order"/> draft for a new order.
            </summary>
            <remarks>
            This order draft intended for creation of a new order. 
            All properties should be set up before <see cref="M:OEC.API.OECClient.SendOrder(OEC.API.OrderDraft)"/> is called.
            </remarks>
        </member>
        <member name="M:OEC.API.NewOrderDraft.#ctor">
            <summary>
            Construct new instance
            </summary>
        </member>
        <member name="M:OEC.API.NewOrderDraft.GetInvalidParts">
            <summary>
            Checks order draft validity.
            </summary>
        </member>
        <member name="M:OEC.API.NewOrderDraft.op_Explicit(OEC.API.NewOrderDraft)~System.String">
            <summary>
            Converts the draft to a string.
            </summary>
            <remarks>
            New order draft can be created from saved or constructed string using 
            <see cref="M:OEC.API.OECClient.CreateDraft(System.String)">OECClient.CreateDraft</see> method.
            <br/>
            Order parameters in the string are in following order:
            <pre>
             <see cref="P:OEC.API.OrderDraft.Account"/>;<see cref="P:OEC.API.OrderDraft.Side"/>;<see cref="P:OEC.API.OrderDraft.Quantity"/>;<see cref="P:OEC.API.OrderDraft.Contract"/>;<see cref="P:OEC.API.OrderDraft.Type"/>;<see cref="P:OEC.API.OrderDraft.Flags"/>;<see cref="P:OEC.API.OrderDraft.Price"/>;<see cref="P:OEC.API.OrderDraft.Price2"/>
            </pre>
            </remarks>
            <param name="d">Draft to be serialized</param>
            <returns>string-serialized draft</returns>
        </member>
        <member name="P:OEC.API.NewOrderDraft.DealQuote">
            <summary>
            Gets or sets DealQuote for NewOrderDraft. 
            </summary>
            <exclude />
        </member>
        <member name="T:OEC.API.ModifyOrderDraft">
            <summary>
            <see cref="T:OEC.API.Order"/> draft for modify requests
            </summary>
            <remarks>
            This order draft intended to set variable orders parameters (qty, type, prices, flags) for modification of an existing order. 
            <see cref="P:OEC.API.ModifyOrderDraft.Account"/>, <see cref="P:OEC.API.ModifyOrderDraft.Side"/> and 
            <see cref="P:OEC.API.ModifyOrderDraft.Contract"/> of an existing order could not be modified as well as <see cref="P:OEC.API.ModifyOrderDraft.Comments"/>.
            </remarks>
        </member>
        <member name="M:OEC.API.ModifyOrderDraft.#ctor(OEC.API.Order)">
            <summary>
            Constructs an instance of draft for given order
            </summary>
            <param name="order">order to be modified</param>
        </member>
        <member name="P:OEC.API.ModifyOrderDraft.Account">
            <summary>
            Returns original order account
            </summary>
            <remarks>
            Throws an exception if modification attempted
            </remarks>
        </member>
        <member name="P:OEC.API.ModifyOrderDraft.Side">
            <summary>
            Returns original order side
            </summary>
            <remarks>
            Throws an exception if modification attempted
            </remarks>
        </member>
        <member name="P:OEC.API.ModifyOrderDraft.Contract">
            <summary>
            Returns original order contract
            </summary>
            <remarks>
            Throws an exception if modification attempted
            </remarks>
        </member>
        <member name="P:OEC.API.ModifyOrderDraft.Route">
            <summary>
            Returns original order execution route
            </summary>
            <remarks>
            Throws an exception if modification attempted
            </remarks>
            <exclude />
        </member>
        <member name="P:OEC.API.ModifyOrderDraft.CustomCompound">
            <summary>
            Specifies a custom compound for this order. Modification is not allowed.
            </summary>
            <seealso cref="T:OEC.API.Contract"/>
            <seealso cref="T:OEC.API.CustomCompound"/>
            <seealso cref="P:OEC.API.OrderDraft.CustomCompound"/>
            <exclude/>
        </member>
        <member name="P:OEC.API.ModifyOrderDraft.Comments">
            <summary>
            Gets the modifying order comments
            </summary>
        </member>
        <member name="T:OEC.API.OnBeginEndEventsEvent">
            <summary>
            Event batch begin or end
            </summary>
        </member>
        <member name="T:OEC.API.OnErrorEvent">
            <summary>
            Error occured
            </summary>
            <param name="ex">exception</param>
        </member>
        <member name="T:OEC.API.OnLoginCompleteEvent">
            <summary>
            Occurs when client is logged on and data are loaded
            </summary>
        </member>
        <member name="T:OEC.API.OnLoginFailedEvent">
            <summary>
            Occurs when connection failed to be established
            </summary>
            <param name="Reason">Failure reason</param>
        </member>
        <member name="T:OEC.API.OnDisconnectedEvent">
            <summary>
            Occurs when connection is terminated
            </summary>
            <param name="Unexpected">false if disconnected by user request</param>
        </member>
        <member name="T:OEC.API.OnOrderConfirmedEvent">
            <summary>
            Order was confirmed by server
            </summary>
            <param name="Order">Order that was confirmed</param>
            <param name="OldOrderID">Local order id that was replaced</param>
        </member>
        <member name="T:OEC.API.OnOrderStateChangedEvent">
            <summary>
            Order state was changed
            </summary>
            <param name="Order">changed order</param>
            <param name="OldOrderState">Previous order state</param>
        </member>
        <member name="T:OEC.API.OnOrderFilledEvent">
            <summary>
            Order fill created or changed
            </summary>
            <param name="Order">changed order</param>
            <param name="Fill">new/changed fill</param>
        </member>
        <member name="T:OEC.API.OnCommandUpdatedEvent">
            <summary>
            Command executed or failed
            </summary>
            <param name="Order">affected order</param>
            <param name="Command">affected command</param>
        </member>
        <member name="T:OEC.API.OnPositionChangedEvent">
            <summary>
            Occurs when any position value is changed
            </summary>
            <param name="Account">changed account</param>
            <param name="ContractPosition">changed position</param>
        </member>
        <member name="T:OEC.API.OnAccountSummaryChangedEvent">
            <summary>
            Occurs when any summary value (p/l or balance related) is changed
            </summary>
            <param name="Account">changed account</param>
            <param name="Currency">changed currency</param>
        </member>
        <member name="T:OEC.API.OnPriceChangedEvent">
            <summary>
            Occurs when contract price changed
            </summary>
            <param name="Contract">affected contract</param>
            <param name="Price">new price values</param>
        </member>
        <member name="T:OEC.API.OnCurrencyPriceChangedEvent">
            <summary>
            Currency price (conversion rate) was changed
            </summary>
            <param name="Currency">affected currency</param>
            <param name="Price">Price values</param>
        </member>
        <member name="T:OEC.API.OnDOMChangedEvent">
            <summary>
            DOM data updated
            </summary>
            <param name="Contract">affected contract</param>
        </member>
        <member name="T:OEC.API.OnBalanceChangedEvent">
            <summary>
            Cash balance changed
            </summary>
            <param name="Account">affected account</param>
            <param name="Currency">balance currency</param>
        </member>
        <member name="T:OEC.API.OnUserStatusChangedEvent">
            <summary>
            User online status was changed
            </summary>
            <param name="Status">affected user</param>
        </member>
        <member name="T:OEC.API.OnUserMessageEvent">
            <summary>
            Chat message was received
            </summary>
            <param name="User">from User</param>
            <param name="Message">Message text</param>
        </member>
        <member name="T:OEC.API.OnNewsMessageEvent">
            <summary>
            News message was received
            </summary>
            <param name="Channel">News channel</param>
            <param name="Message">Message text</param>
        </member>
        <member name="T:OEC.API.OnTicksReceivedEvent">
            <summary>
            Ticks batch received
            </summary>
            <param name="Subscription">Subscription</param>
            <param name="Ticks">received ticks</param>
        </member>
        <member name="T:OEC.API.OnHistoryReceivedEvent">
            <summary>
            History data (bars) received
            </summary>
            <param name="Subscription">Subscription</param>
            <param name="Bars">Bar data</param>
        </member>
        <member name="T:OEC.API.OnBarsReceivedEvent">
            <summary>
            History data (bars) received
            </summary>
            <param name="Subscription">Subscription</param>
            <param name="Bars">Bar data</param>
        </member>
        <member name="T:OEC.API.OnHistogramReceivedEvent">
            <summary>
            Histogram data received
            </summary>
            <param name="Subscription">Subscription</param>
            <param name="Hist">Histogram data</param>
        </member>
        <member name="T:OEC.API.OnConfigChangedEvent">
            <summary>
            Environment data changed
            </summary>
        </member>
        <member name="T:OEC.API.OnContractsChangedEvent">
            <summary>
            New Contracts(Options) received
            </summary>
            <param name="bc">Base Contract changed (or null)</param>
        </member>
        <member name="T:OEC.API.OnContractChangedEvent">
            <summary>
            Contract info updated
            </summary>
            <param name="contract">Contract changed</param>
        </member>
        <member name="T:OEC.API.OnContinuousContractRuleChangedEvent">
            <summary>
            Continuous Contract Rule updated
            </summary>
            <param name="requestID">ID of source request</param>
            <param name="rule">ContinuousContractRule changed</param>
        </member>
        <member name="T:OEC.API.OnAllocationBlocksChangedEvent">
            <summary>
            Allocation blocks updated
            </summary>
            <param name="allocationBlocks">New allocation block list</param>
        </member>
        <member name="T:OEC.API.OnLoggedUserClientsChangedEvent">
            <summary>
            Logged user sessions updated
            </summary>
            <param name="loggedUserClientList">New logged user sessions list</param>
        </member>
        <member name="T:OEC.API.OnOsmAlgoListUpdatedEvent">
            <summary>
            The list of OSM algorithms is updated. 
            </summary>
        </member>
        <member name="T:OEC.API.OnOsmAlgoListLoadedEvent">
            <summary>
            The list of OSM algorithms is loaded. 
            </summary>
            <param name="algoList">The list of OSM algorithms</param>
        </member>
        <member name="T:OEC.API.OnSymbolLookupEvent">
            <summary>
            The list of found symbols for symbol lookup request
            </summary>
            <param name="SymbolLookup"></param>
            <param name="Contracts"></param>
        </member>
        <member name="T:OEC.API.OnQuoteDetailsChangedEvent">
            <summary>
            QuoteDetails updated
            </summary>
            <param name="Contract">affected contract</param>
            <exclude />
        </member>
        <member name="T:OEC.API.OnIndexComponentsReceivedEvent">
            <summary>
            IndexComponents updated
            </summary>
            <param name="Contract">affected contract</param>
            <exclude />
        </member>
        <member name="T:OEC.API.OnCompoundPositionGroupChangedEvent">
            <summary>
            Occurs when any compound group or its leg position is changed or a new contract group created
            </summary>
            <param name="CompoundPositionGroup">changed or created group</param>
            <param name="CompoundLegPosition">changed leg position. null, if all group changed or a new group created</param>
            <exclude />
        </member>
        <member name="T:OEC.API.OnAccountRiskLimitChangedEvent">
            <summary>
            Occurs when account risk limit changed
            </summary>
            <param name="Account">affected account</param>
            <seealso cref="P:OEC.API.Account.RiskLimitsType"/>
        </member>
        <member name="T:OEC.API.OnContractRiskLimitChangedEvent">
            <summary>
            Occurs when contract risk limit changed
            </summary>
            <param name="Contract">affected contract</param>
            <seealso cref="!:OEC.API.Contract.RiskLimitsType"/>
        </member>
        <member name="T:OEC.API.OnRiskLimitDetailsReceivedEvent">
            <summary>
            Occurs when risk limit changed
            </summary>
            <param name="RiskLimitDetailList">list of changed risk limits</param>
            <seealso cref="T:OEC.API.RiskLimitDetail"/>
        </member>
        <member name="T:OEC.API.OnProductCalendarUpdatedEvent">
            <summary>
            Occurs when a product calendar updated
            </summary>
            <param name="baseContract">Base contract of product calendar</param>
        </member>
        <member name="T:OEC.API.OnDashboardChangedEvent">
            <summary>
            Occurs when admin messages dashboard changed
            </summary>
            <exclude />
        </member>
        <member name="T:OEC.API.Exchange">
            <summary>
            Exchange. 
            </summary>
            <seealso cref="P:OEC.API.Contract.Exchange"/>
        </member>
        <member name="T:OEC.API.ExchangeList">
            <summary>
            List of <see cref="T:OEC.API.Exchange"/> items - see <see cref="P:OEC.API.OECClient.Exchanges">OECClient.Exchanges</see>
            </summary>
            <remarks>
            The list is indexed by ID and Name
            </remarks>
        </member>
        <member name="T:OEC.API.Fill">
            <summary>
            <see cref="T:OEC.API.Order"/> fill data.
            </summary>
            <remarks>
            When order is executed on exchange, it receives one or more fills. 
            Fill contains <see cref="P:OEC.API.Fill.Quantity"/> and <see cref="P:OEC.API.Fill.Price"/> of execution. When amount of fills
            of an order is equal to order total quantity, order can considered as 'Filled'. 
            <br/>
            However, fill could be cancelled by broker - in this situation <see cref="P:OEC.API.Fill.Active"/> flag is set to false,
            and this fill will not be taken in account in <see cref="P:OEC.API.FillList.TotalQuantity">filled quantity</see> 
            and <see cref="P:OEC.API.FillList.AvgPrice">average filled price</see> calculations. 
            <br/><br/>
            Each fill causes the <see cref="T:OEC.API.Position"/> of order contract to change. Cancelled fills revert position to previous value.
            <br/><br/>
            Usually, fills are not changed after order gets <see cref="F:OEC.Data.OrderState.Completed"/> state.
            </remarks>
            <seealso cref="P:OEC.API.Order.Fills"/>
        </member>
        <member name="M:OEC.API.Fill.#ctor(OEC.API.Order,OEC.Data.Fill,OEC.API.Contract)">
            <summary>
            Decodes fill for given order
            </summary>
            <param name="order">Order of fill</param>
            <param name="fill">serializable fill data</param>
            <param name="contract">contract</param>
        </member>
        <member name="M:OEC.API.Fill.Serialize">
            <summary>
            Serializes a fill
            </summary>
            <returns>serializable fill data</returns>
        </member>
        <member name="M:OEC.API.Fill.ToString">
            <summary>
            Fill formatted as {qty} @ {price} {state} {comments}
            </summary>
            <returns>text representation of fill</returns>
        </member>
        <member name="P:OEC.API.Fill.Quantity">
            <summary>
            Filled quantity
            </summary>
        </member>
        <member name="P:OEC.API.Fill.Price">
            <summary>
            Fill price
            </summary>
        </member>
        <member name="P:OEC.API.Fill.Comments">
            <summary>
            Broker comments
            </summary>
        </member>
        <member name="P:OEC.API.Fill.Timestamp">
            <summary>
            Fill timestamp, UTC
            </summary>
        </member>
        <member name="P:OEC.API.Fill.Active">
            <summary>
            
            Checks whether fill was not cancelled
            </summary>
        </member>
        <member name="P:OEC.API.Fill.Commission">
            <summary>
            Commission taken for this particular fill.
            </summary>
        </member>
        <member name="P:OEC.API.Fill.Type">
            <summary>
            Type of fill
            </summary>
        </member>
        <member name="P:OEC.API.Fill.Contract">
            <summary>
            Contract of fill
            </summary>
        </member>
        <member name="P:OEC.API.Fill.OsmChild">
            <summary>
            Gets the OSM child that caused this fill. 
            </summary>
        </member>
        <member name="P:OEC.API.Fill.ExtData">
            <summary>
            Fill extended data. 
            </summary>
        </member>
        <member name="T:OEC.API.FillList">
            <summary>
            List of <see cref="T:OEC.API.Order"/> fills - see <see cref="P:OEC.API.Order.Fills">Order.Fills</see>
            </summary>
            <remarks>
            Note: <see cref="P:OEC.API.FillList.AvgPrice">average weighted price</see> and <see cref="P:OEC.API.FillList.TotalQuantity">total filled quantity</see> is calculated only for active fills.
            </remarks>
        </member>
        <member name="M:OEC.API.FillList.Add(OEC.API.Fill)">
            <summary>
            Adds a fill or updates existing
            </summary>
            <param name="fill"></param>
        </member>
        <member name="M:OEC.API.FillList.GetQuantity">
            <summary>
            Calculates total quantity of active fills
            </summary>
            <returns>total filled quantity</returns>
        </member>
        <member name="M:OEC.API.FillList.GetAvgPrice">
            <summary>
            Calculates average price of active fills
            </summary>
            <returns>Avg.Price</returns>
        </member>
        <member name="M:OEC.API.FillList.ToString">
            <summary>
            Total Quantity formatted as {total} or {first-leg}-{second-leg}
            </summary>
            <returns>text representation of total quantity</returns>
        </member>
        <member name="M:OEC.API.FillList.ToString(OEC.MyFunc{System.Int32,System.String})">
            <summary>
            Total Quantity formatted as {total} or {first-leg}-{second-leg}
            </summary>
            <returns>text representation of total quantity</returns>
        </member>
        <member name="P:OEC.API.FillList.AvgPrice">
            <summary>
            Average weighted filled price
            </summary>
        </member>
        <member name="P:OEC.API.FillList.TotalQuantity">
            <summary>
            Total filled quantity
            </summary>
        </member>
        <member name="T:OEC.API.FillDateComparer">
            <summary>
            Compares fills by timestamp
            </summary>
        </member>
        <member name="T:OEC.API.Histogram">
            <summary>
            Histogram for price/volume values
            </summary>
        </member>
        <member name="M:OEC.API.Histogram.GetPriceAt(System.Int32)">
            <summary>
            returns price at given level
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:OEC.API.Histogram.GetVolumeAt(System.Int32)">
            <summary>
            returns volume at given level
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:OEC.API.Histogram.GetVolumeAtPrice(System.Single)">
            <summary>
            returns volume for given price
            </summary>
            <param name="price"></param>
            <returns></returns>
        </member>
        <member name="P:OEC.API.Histogram.Count">
            <summary>
            count of histogram levels
            </summary>
        </member>
        <member name="P:OEC.API.Histogram.TotalVolume">
            <summary>
            Total volume
            </summary>
        </member>
        <member name="P:OEC.API.Histogram.WeighedAverage">
            <summary>
            Weighed Average
            </summary>
        </member>
        <member name="P:OEC.API.Histogram.MaxVolume">
            <summary>
            Maximum Volume
            </summary>
        </member>
        <member name="T:OEC.API.Ticks">
            <summary>
            Ticks object - contains array of timestamps and array of prices - one price per one timestamp.
            See <see cref="M:OEC.API.OECClient.RequestTicks(OEC.API.Contract,System.DateTime,System.DateTime)"/> and <see cref="M:OEC.API.OECClient.RequestTicks(OEC.API.Contract,System.DateTime,System.Int32)"/>
            </summary>
        </member>
        <member name="F:OEC.API.Ticks.Timestamps">
            <summary>
            Timestamps of ticks
            </summary>
        </member>
        <member name="F:OEC.API.Ticks.Prices">
            <summary>
            Price values of ticks
            </summary>
        </member>
        <member name="F:OEC.API.Ticks.BidPrices">
            <summary>
            Price values of ticks
            </summary>
        </member>
        <member name="F:OEC.API.Ticks.AskPrices">
            <summary>
            Price values of ticks
            </summary>
        </member>
        <member name="F:OEC.API.Ticks.Volumes">
            <summary>
            Volumes of ticks
            </summary>
        </member>
        <member name="F:OEC.API.Ticks.Volumes32">
            <summary>
            Volumes of ticks (32-bit values)
            </summary>
        </member>
        <member name="F:OEC.API.Ticks.Types">
            <summary>
            Types of ticks.
            </summary>
        </member>
        <member name="F:OEC.API.Ticks.Exchanges">
            <summary>
            Exchanges of ticks.
            </summary>
        </member>
        <member name="P:OEC.API.Ticks.TimestampList">
            <summary>
            Timestamps as a list
            </summary>
        </member>
        <member name="P:OEC.API.Ticks.PriceList">
            <summary>
            Prices as a list
            </summary>
        </member>
        <member name="P:OEC.API.Ticks.BidPriceList">
            <summary>
            Bid prices as a list
            </summary>
        </member>
        <member name="P:OEC.API.Ticks.AskPriceList">
            <summary>
            Ask prices as a list
            </summary>
        </member>
        <member name="P:OEC.API.Ticks.VolumeList">
            <summary>
            Volumes as a list
            </summary>
        </member>
        <member name="P:OEC.API.Ticks.ExchangeList">
            <summary>
            Exchanges as a list
            </summary>
        </member>
        <member name="T:OEC.API.Bar">
            <summary>
            Price bar - Open, High, Low, Close, Volume values and Timestamp.
            See <see cref="M:OEC.API.OECClient.RequestHistory(OEC.API.Contract,System.DateTime,System.DateTime)"/>
            </summary>
        </member>
        <member name="F:OEC.API.Bar.Timestamp">
            <summary>
            Bar open timestamp, UTC
            </summary>
        </member>
        <member name="F:OEC.API.Bar.Open">
            <summary>
            Bar open value
            </summary>
        </member>
        <member name="F:OEC.API.Bar.High">
            <summary>
            Bar high value
            </summary>
        </member>
        <member name="F:OEC.API.Bar.Low">
            <summary>
            Bar low value
            </summary>
        </member>
        <member name="F:OEC.API.Bar.Close">
            <summary>
            Bar close value
            </summary>
        </member>
        <member name="F:OEC.API.Bar.Volume">
            <summary>
            Bar volume
            </summary>
        </member>
        <member name="F:OEC.API.Bar.Volume64">
            <summary>
            Bar volume 64-bit value
            </summary>
        </member>
        <member name="F:OEC.API.Bar.Ticks">
            <summary>
            Number of ticks
            </summary>
        </member>
        <member name="F:OEC.API.Bar.UpTicks">
            <summary>
            Number of ticks going up
            </summary>
        </member>
        <member name="F:OEC.API.Bar.UpVolume">
            <summary>
            Volume of ticks going up
            </summary>
        </member>
        <member name="F:OEC.API.Bar.DownTicks">
            <summary>
            Number of ticks going down
            </summary>
        </member>
        <member name="F:OEC.API.Bar.DownVolume">
            <summary>
            Volume of ticks going down
            </summary>
        </member>
        <member name="F:OEC.API.Bar.CloseTimestamp">
            <summary>
            Bar close timestamp, UTC
            </summary>
        </member>
        <member name="M:OEC.API.Bar.ToString">
            <summary>
            Text representation of the Bar
            </summary>
            <returns></returns>
        </member>
        <member name="T:OEC.API.SubscriptionList">
            <summary>
            List of subscriptions
            </summary>
        </member>
        <member name="T:OEC.API.ChatMessage">
            <summary>
            A chat message. 
            </summary>
            <remarks>
            Intended for future storage of text messages
            </remarks>
        </member>
        <member name="P:OEC.API.ChatMessage.User">
            <summary>
            User who sent the message
            </summary>
        </member>
        <member name="P:OEC.API.ChatMessage.Message">
            <summary>
            Message text
            </summary>
        </member>
        <member name="P:OEC.API.ChatMessage.Timestamp">
            <summary>
            Timestamp, UTC
            </summary>
        </member>
        <member name="P:OEC.API.ChatMessage.Incoming">
            <summary>
            True, if message was received and False if sent by current user
            </summary>
        </member>
        <member name="T:OEC.API.ChatMessages">
            <summary>
            List of chat messages in chronological order
            </summary>
        </member>
        <member name="T:OEC.API.DashboardMessages">
            <summary>
            List of admin dashboard messages
            </summary>
            <exclude />
        </member>
        <member name="M:OEC.API.DashboardMessages.#ctor(System.Collections.Generic.IEnumerable{OEC.API.DashboardMessage})">
            <summary>
            Creates list of dashboard messages
            </summary>
        </member>
        <member name="T:OEC.API.DashboardMessage">
            <summary>
            Admin dashboard message
            </summary>
            <exclude />
        </member>
        <member name="M:OEC.API.DashboardMessage.#ctor">
            <summary>
            Creates empty message
            </summary>
        </member>
        <member name="P:OEC.API.DashboardMessage.Message">
            <summary>
            Dashboard message
            </summary>
        </member>
        <member name="P:OEC.API.DashboardMessage.Expiration">
            <summary>
            Messagae expiration time
            </summary>
        </member>
        <member name="T:OEC.API.NewsMessage">
            <summary>
            A news message.
            </summary>
            <remarks>
            Intended for future storage of news messages
            </remarks>
        </member>
        <member name="P:OEC.API.NewsMessage.Channel">
            <summary>
            News channel name
            </summary>
        </member>
        <member name="P:OEC.API.NewsMessage.Message">
            <summary>
            Message text
            </summary>
        </member>
        <member name="P:OEC.API.NewsMessage.Timestamp">
            <summary>
            Timestamp, UTC
            </summary>
        </member>
        <member name="T:OEC.API.NewsMessages">
            <summary>
            List of news messages in chronological order
            </summary>
        </member>
        <member name="T:OEC.API.PropertyList">
            <summary>
            list of custom properties
            </summary>
        </member>
        <member name="T:OEC.API.ClientInfo">
            <exclude/>
        </member>
        <member name="T:OEC.API.Order">
            <summary>
            A client order.
            </summary>
            <remarks>
            When order is created, its placed to <see cref="P:OEC.API.OECClient.Orders"/> collection with a local ID (always negative). 
            As server receives the order, it confirms it and assigns a global unique order ID, then client is notified by <see cref="E:OEC.API.OECClient.OnOrderConfirmed"/> event.
            At this point, order current state is <see cref="F:OEC.Data.OrderState.Sent"/>, it has one <see cref="T:OEC.API.State"/> in its <see cref="P:OEC.API.Order.States"/> collection,
            a create <see cref="T:OEC.API.Command"/> with initial order <see cref="T:OEC.API.Version"/> in <see cref="P:OEC.API.Order.Commands"/> and <see cref="P:OEC.API.Order.Versions"/> respectively. 
            <br/><br/>
            Some orders, especially pit or <see cref="F:OEC.Data.OrderType.MarketOnOpen">MOO</see>/<see cref="F:OEC.Data.OrderType.MarketOnClose">MOC</see> ones, could then change their state to <see cref="F:OEC.Data.OrderState.Held"/> - this means that
            they are not active yet and waiting of activation. MOO/MOC orders
            <br/><br/>
            Prior to activation, order can be rejected at different stages by risk system, live broker or electronic execution system. 
            In this case it becomes <see cref="F:OEC.Data.OrderState.Rejected"/>
            <br/><br/>
            When order is accepted by system, broker and/or electronic execution system, it becomes <see cref="F:OEC.Data.OrderState.Working"/> - this means that order is active and could be filled.
            <see cref="F:OEC.Data.OrderType.Market"/> orders usually get filled and completed in a few milliseconds, if trading session is now active for order <see cref="P:OEC.API.Order.Contract"/>. Other orders
            will wait until order condition is satisfied.
            <br/><br/>
            Client can request order cancellation - see <see cref="M:OEC.API.OECClient.CancelOrder(OEC.API.Order)"/>, or modification - in this case he needs to
            create a <see cref="T:OEC.API.ModifyOrderDraft"/>, change values he wants to modify and call <see cref="M:OEC.API.OECClient.ModifyOrder(OEC.API.OrderDraft)"/> method.
            Both of these actions creates a <see cref="T:OEC.API.Command"/>, and modification also creates a new order version. 
            <br/><br/>
            Finally, order becomes <see cref="F:OEC.Data.OrderState.Completed"/> or <see cref="F:OEC.Data.OrderState.Cancelled"/> - note, that 
            cancellation of a partially filled order makes the order completed, so client should look at 
            <see cref="P:OEC.API.FillList.TotalQuantity">filled quantity</see> instead of <see cref="P:OEC.API.Order.Quantity">order quantity</see> to see
            whether order was fully completed or not.
            </remarks>
            <seealso cref="P:OEC.API.OECClient.Orders"/>
            <seealso cref="T:OEC.API.Command"/>
            <seealso cref="T:OEC.API.Version"/>
            <seealso cref="T:OEC.API.State"/>
            <seealso cref="T:OEC.API.Fill"/>
            <seealso cref="M:OEC.API.OECClient.SendOrder(OEC.API.OrderDraft)"/>
            <seealso cref="T:OEC.API.OrderDraft"/>
        </member>
        <member name="M:OEC.API.Order.#ctor(System.Int32)">
            <summary>
            constructs an empty order
            </summary>
        </member>
        <member name="M:OEC.API.Order.Clone">
            <summary>
            Constructs a copy of an order
            </summary>
            <returns></returns>
        </member>
        <member name="M:OEC.API.Order.Serialize">
            <summary>
            Serializes order
            </summary>
            <returns>serialized order data</returns>
        </member>
        <member name="M:OEC.API.Order.ToString">
            <summary>
            creates a string like "Buy 1 ESH6 LMT 123 GTC"
            </summary>
            <returns>String representation of an order</returns>
        </member>
        <member name="P:OEC.API.Order.Account">
            <summary>
            Order account
            </summary>
        </member>
        <member name="P:OEC.API.Order.Side">
            <summary>
            Order Side (Buy/Sell)
            </summary>
        </member>
        <member name="P:OEC.API.Order.IsBuySide">
            <summary>
            Helper property that evaluates Side property
            </summary>
        </member>
        <member name="P:OEC.API.Order.Contract">
            <summary>
            Order contract
            </summary>
        </member>
        <member name="P:OEC.API.Order.Timestamp">
            <summary>
            Order creation timestamp
            </summary>
        </member>
        <member name="P:OEC.API.Order.Comments">
            <summary>
            Order comments
            </summary>
        </member>
        <member name="P:OEC.API.Order.Trader">
            <summary>
            Trader, to whose account order belongs (for admins) or null (for traders)
            </summary>
        </member>
        <member name="P:OEC.API.Order.Group">
            <summary>
            Routing group for admins, null for traders
            </summary>
        </member>
        <member name="P:OEC.API.Order.ABChildren">
            <summary>
            Children orders for allocation block order
            </summary>
        </member>
        <member name="P:OEC.API.Order.ABParent">
            <summary>
            Parent order for allocation block child order
            </summary>
        </member>
        <member name="P:OEC.API.Order.Route">
            <summary>
            Execution route
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.Order.CustomCompound">
            <summary>
            Custom Compound: detailed declaration of the legs
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.Order.DealQuote">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.Order.TradingSession">
            <summary>
            Represents a specific market trading session
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.Order.AllocationBlock">
            <summary>
            Order allocation block
            </summary>
        </member>
        <member name="P:OEC.API.Order.ReadOnly">
            <summary>
            Order cannot be cancelled or modified
            </summary>
        </member>
        <member name="P:OEC.API.Order.CurrentState">
            <summary>
            Currest state of order
            </summary>
        </member>
        <member name="P:OEC.API.Order.ServerStrategy">
            <summary>
            Gets the active server strategy, which the order belongs to, 
            or null if no active server strategy is associated with the order. 
            </summary>
            <exclude />
        </member>
        <member name="P:OEC.API.Order.OsmRoot">
            <summary>
            Gets OSM root order. If this property is not null, that means the order is an OSM child order. 
            </summary>
        </member>
        <member name="P:OEC.API.Order.ExtData">
            <summary>
            Extended data
            </summary>
        </member>
        <member name="P:OEC.API.Order.IsOsmRoot">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.Order.IsOsmChild">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.Order.IsIceberg">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.Order.IsTrailingStop">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.Order.IsVolumeBasedStop">
            <summary>
            </summary>
        </member>
        <member name="P:OEC.API.Order.TicketNumber">
            <summary>
            ID of last active version of order
            </summary>
        </member>
        <member name="P:OEC.API.Order.Quantity">
            <summary>
            Total order quantity 
            </summary>
        </member>
        <member name="P:OEC.API.Order.Type">
            <summary>
            Current order type
            </summary>
        </member>
        <member name="P:OEC.API.Order.Price">
            <summary>
            Current order limit/stop price
            </summary>
        </member>
        <member name="P:OEC.API.Order.Price2">
            <summary>
            Current order limit price for STPLMT orders
            </summary>
        </member>
        <member name="P:OEC.API.Order.Flags">
            <summary>
            Order execution flags of last active version
            </summary>
        </member>
        <member name="P:OEC.API.Order.TypePriceString">
            <summary>
            Gets type and (optionally) price as "MKT", "LMT 1234.0", "STP 123 07.25 LMT 120 31.75"
            </summary>
        </member>
        <member name="P:OEC.API.Order.PostAllocationInstructions">
            <summary>
            Post-allocation instructions. See <see cref="M:OEC.API.OECClient.PostAllocate(OEC.API.Order,OEC.API.Contract,OEC.API.PostAllocationBlock)"/> for details how to submit post-allocation instructions
            </summary>
        </member>
        <member name="P:OEC.API.Order.Fills">
            <summary>
            Order fills, active and cancelled.
            </summary>
        </member>
        <member name="P:OEC.API.Order.States">
            <summary>
            Order states history
            </summary>
            <remarks>
            Each time when order <see cref="P:OEC.API.Order.CurrentState"/> is changed, a new <see cref="T:OEC.API.State"/> item is added
            to states collection. 
            </remarks>
        </member>
        <member name="P:OEC.API.Order.Versions">
            <summary>
            Order version history 
            </summary>
            <remarks>
            This list contains at least one (initial) version, and can contain versions from modification commands, even 
            if they are pending or already failed.
            </remarks>
        </member>
        <member name="P:OEC.API.Order.Commands">
            <summary>
            Order commands 
            </summary>
            <remarks>
            Contains at least one creation command with initial version, and can contain cancel and replace commands,
            even if they still pending or already failed.
            </remarks>
        </member>
        <member name="P:OEC.API.Order.IsMarketOrder">
            <summary>
            Checks whether the order is market
            </summary>
        </member>
        <member name="P:OEC.API.Order.IsFinalState">
            <summary>
            Checks whenther order is Completed, Cancelled or Rejected
            so no state changes are expected
            </summary>
        </member>
        <member name="P:OEC.API.Order.IsFilled">
            <summary>
            Checks whether order is fully filled (filled quantity = total quantity)
            </summary>
        </member>
        <member name="P:OEC.API.Order.Parent">
            <summary>
            Link to main OSO order
            </summary>
        </member>
        <member name="P:OEC.API.Order.Linked">
            <summary>
            Link to leg of main OSO order
            </summary>
        </member>
        <member name="P:OEC.API.Order.OCO">
            <summary>
            Link to paired OCO order
            </summary>
        </member>
        <member name="T:OEC.API.OrderList">
            <summary>
            List of orders - see <see cref="P:OEC.API.OECClient.Orders">OECClient.Orders</see>.
            </summary>
            The list indexed by order ID
        </member>
        <member name="T:OEC.API.PitGroup">
            <summary>
            Routing group - see <see cref="P:OEC.API.Order.Group">Order.Group</see>.
            </summary>
            <remarks>
            Routing groups are visible only to Admin and Broker logins.
            </remarks>
        </member>
        <member name="T:OEC.API.PitGroupList">
            <summary>
            List of routing groups - see <see cref="P:OEC.API.OECClient.PitGroups">OECClient.PitGroups</see>
            </summary>
            <remarks>
            The list is indexed by ID and Name
            </remarks>
        </member>
        <member name="T:OEC.API.VolPrice">
            <summary>
            Volume/Price pair with a timestamp
            </summary>
        </member>
        <member name="M:OEC.API.VolPrice.#ctor(System.Int32,System.Double)">
            <summary>
            Creates a new Volume/Price pair
            </summary>
            <param name="volume">New Volume</param>
            <param name="price">New Price</param>
        </member>
        <member name="M:OEC.API.VolPrice.Set(System.Int32,System.Double)">
            <summary>
            sets new values
            clears price if quantity is zero
            </summary>
            <param name="volume">new volume</param>
            <param name="price">new price</param>
        </member>
        <member name="M:OEC.API.VolPrice.Set(OEC.Data.Position)">
            <summary>
            set new values from position data
            </summary>
            <param name="position">serialized position data</param>
        </member>
        <member name="M:OEC.API.VolPrice.Clear">
            <summary>
            clears values and reset timestamp
            </summary>
        </member>
        <member name="P:OEC.API.VolPrice.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="P:OEC.API.VolPrice.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:OEC.API.VolPrice.TimeStamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:OEC.API.PositionList">
            <summary>
            List of detailed <see cref="T:OEC.API.Position">Positions</see>. See <see cref="T:OEC.API.DetailedPositionList"/>
            </summary>
        </member>
        <member name="T:OEC.API.Price">
            <summary>
            Realtime price data for a contract
            </summary>
            <remarks>
            Data from r/t price feed are stored in form of a Price object. It contains momentary values, like <see cref="P:OEC.API.Price.LastPrice"/>,
            and daily stats, such as <see cref="P:OEC.API.Price.HighPrice"/> and <see cref="P:OEC.API.Price.LowPrice"/>.<br/>
            Subscription for price data is controlled by <see cref="M:OEC.API.OECClient.Subscribe(OEC.API.Contract)"/> and <see cref="M:OEC.API.OECClient.Unsubscribe(OEC.API.Contract)"/> methods.
            Client notified of price update by <see cref="E:OEC.API.OECClient.OnPriceChanged"/>, and 
            latest update is also availabe in <see cref="P:OEC.API.Contract.CurrentPrice">Contract.CurrentPrice</see> property.<br/>
            See also <see cref="T:OEC.API.DOM"/> for depth of market information.
            </remarks>
            <seealso cref="P:OEC.API.Contract.CurrentPrice"/>
        </member>
        <member name="P:OEC.API.Price.LastPrice">
            <summary>
            Last traded price
            </summary>
        </member>
        <member name="P:OEC.API.Price.LastVol">
            <summary>
            Volume of last trade
            </summary>
        </member>
        <member name="P:OEC.API.Price.CumLastVol">
            <summary>
            Cumulative volume of last same price trades
            </summary>
        </member>
        <member name="P:OEC.API.Price.AskPrice">
            <summary>
            Best ask price
            </summary>
        </member>
        <member name="P:OEC.API.Price.AskVol">
            <summary>
            Best ask volume
            </summary>
        </member>
        <member name="P:OEC.API.Price.BidPrice">
            <summary>
            Best bid price
            </summary>
        </member>
        <member name="P:OEC.API.Price.BidVol">
            <summary>
            Best bid volume
            </summary>
        </member>
        <member name="P:OEC.API.Price.TotalVol">
            <summary>
            Total daily volume
            </summary>
        </member>
        <member name="P:OEC.API.Price.LastDateTime">
            <summary>
            Last trade timestamp
            </summary>
        </member>
        <member name="P:OEC.API.Price.OpenPrice">
            <summary>
            Daily open price
            </summary>
        </member>
        <member name="P:OEC.API.Price.HighPrice">
            <summary>
            Daily high price
            </summary>
        </member>
        <member name="P:OEC.API.Price.LowPrice">
            <summary>
            Daily lov price
            </summary>
        </member>
        <member name="P:OEC.API.Price.Change">
            <summary>
            last price - prev.settlement
            </summary>
        </member>
        <member name="P:OEC.API.Price.ChangePercent">
            <summary>
            price change in percents
            </summary>
        </member>
        <member name="P:OEC.API.Price.PrevPrice">
            <summary>
            Previous price (obsolete)
            </summary>
        </member>
        <member name="P:OEC.API.Price.Settlement">
            <summary>
            Settlement of previous dat
            </summary>
        </member>
        <member name="P:OEC.API.Price.SettlementDateTime">
            <summary>
            Settlement of previous dat
            </summary>
        </member>
        <member name="P:OEC.API.Price.OpenInterest">
            <summary>
            Open interest
            </summary>
        </member>
        <member name="P:OEC.API.Price.Hidden">
            <summary>
            Flag: Don't update UI
            </summary>
        </member>
        <member name="P:OEC.API.Price.ImpliedVolatility">
            <summary>
            Greeks, ImpliedVolatility
            </summary>
        </member>
        <member name="P:OEC.API.Price.Vega">
            <summary>
            Greeks, Vega
            </summary>
        </member>
        <member name="P:OEC.API.Price.Theta">
            <summary>
            Greeks, Theta
            </summary>
        </member>
        <member name="P:OEC.API.Price.Gamma">
            <summary>
            Greeks, Gamma
            </summary>
        </member>
        <member name="P:OEC.API.Price.Delta">
            <summary>
            Greeks, Delta
            </summary>
        </member>
        <member name="P:OEC.API.Price.Fields">
            <summary>
            Valid fields
            </summary>
        </member>
        <member name="T:OEC.API.Bases.ValueList`1">
            <summary>
            Read-only list of any values
            </summary>
            <typeparam name="T">value type</typeparam>
        </member>
        <member name="P:OEC.API.Bases.ValueList`1.Length">
            <summary>
            List length
            </summary>
        </member>
        <member name="P:OEC.API.Bases.ValueList`1.Item(System.Int32)">
            <summary>
            List element
            </summary>
            <param name="index">0-based index</param>
            <returns>element</returns>
        </member>
        <member name="T:OEC.API.Bases.UintList">
            <summary>
            Read-only list of unsigned ints (32bit)
            </summary>
        </member>
        <member name="T:OEC.API.Bases.FloatList">
            <summary>
            Read-only list of float values
            </summary>
        </member>
        <member name="T:OEC.API.Bases.DateTimeList">
            <summary>
            Read-only list of datetime values
            </summary>
        </member>
        <member name="T:OEC.API.Bases.IntList">
            <summary>
            Read-only list of int values
            </summary>
        </member>
        <member name="P:OEC.API.Bases.IntList.Length">
            <summary>
            List length
            </summary>
        </member>
        <member name="P:OEC.API.Bases.IntList.Item(System.Int32)">
            <summary>
            List element
            </summary>
            <param name="index">0-based index</param>
            <returns>element</returns>
        </member>
        <member name="T:OEC.API.Bases.StringList">
            <summary>
            Read-only list of int values
            </summary>
        </member>
        <member name="P:OEC.API.Bases.StringList.Length">
            <summary>
            List length
            </summary>
        </member>
        <member name="P:OEC.API.Bases.StringList.Item(System.Int32)">
            <summary>
            List element
            </summary>
            <param name="index">0-based index</param>
            <returns>element</returns>
        </member>
        <member name="T:OEC.API.DOM">
            <summary>
            Depth of Market data for a <see cref="T:OEC.API.Contract"/>. See <see cref="P:OEC.API.Contract.DOM">Contract.DOM</see>.
            </summary>
            <remarks>
            For ask and bid sides, there are two arrays with same number of items. First one,
            named [Ask|Bid]Levels, contains price values of "price ladder". Second, named [Ask|Bid]Sizes,
            contains volumes per corresponding level.<br/>
            To control subscription, client should use <see cref="M:OEC.API.OECClient.SubscribeDOM(OEC.API.Contract)"/>/<see cref="M:OEC.API.OECClient.UnsubscribeDOM(OEC.API.Contract)"/> methods.
            </remarks>
            <seealso cref="P:OEC.API.Contract.DOM"/>
        </member>
        <member name="M:OEC.API.DOM.Update(OEC.Data.DOM)">
            <summary>
            Update values
            </summary>
            <param name="response">serialized DOM data</param>
        </member>
        <member name="P:OEC.API.DOM.BidSizes">
            <summary>
            List of bid sizes per level. 
            See also <see cref="P:OEC.API.DOM.BidLevels"/>
            </summary>
        </member>
        <member name="P:OEC.API.DOM.AskSizes">
            <summary>
            List of ask sizes per level.
            See also <see cref="P:OEC.API.DOM.AskLevels"/>.
            </summary>
        </member>
        <member name="P:OEC.API.DOM.BidLevels">
            <summary>
            List of bid price levels.
            See also <see cref="P:OEC.API.DOM.BidSizes"/>.
            </summary>
        </member>
        <member name="P:OEC.API.DOM.AskLevels">
            <summary>
            List of ask price levels.
            See also <see cref="P:OEC.API.DOM.AskSizes"/>.
            </summary>
        </member>
        <member name="P:OEC.API.DOM.LastUpdate">
            <summary>
            Last update time, UTC
            </summary>
        </member>
        <member name="P:OEC.API.DOM.AskExchanges">
            <summary>
            List of ask exchanges.
            See also <see cref="P:OEC.API.DOM.AskLevels"/>.
            </summary>
        </member>
        <member name="P:OEC.API.DOM.BidExchanges">
            <summary>
            List of bid exchanges.
            See also <see cref="P:OEC.API.DOM.BidLevels"/>.
            </summary>
        </member>
        <member name="T:OEC.API.State">
            <summary>
            <see cref="T:OEC.API.Order"/> state history item. 
            </summary>
            <remarks>
            Order has a history of its state changes in <see cref="P:OEC.API.Order.States"/> collection.
            For each state change, there is a <see cref="P:OEC.API.State.Timestamp"/> and <see cref="P:OEC.API.State.Comments"/> - for example, 
            for <see cref="F:OEC.Data.OrderState.Rejected"/> state comments will contain the reason of rejection.
            </remarks>
        </member>
        <member name="M:OEC.API.State.#ctor(OEC.Data.OrderState,OEC.API.Order)">
            <summary>
            Construct a new state with blank id
            </summary>
            <param name="NewOrderState">State</param>
            <param name="order">Parent order</param>
        </member>
        <member name="M:OEC.API.State.#ctor(OEC.Data.State,OEC.API.Order)">
            <summary>
            construct state change object from serialized data
            </summary>
            <param name="state">serialized data</param>
            <param name="order">Order of this state</param>
        </member>
        <member name="M:OEC.API.State.ToString">
            <summary>
            formats state name and comments if present
            </summary>
            <returns>verbal state representation</returns>
        </member>
        <member name="P:OEC.API.State.OrderState">
            <summary>
            State of order
            </summary>
        </member>
        <member name="P:OEC.API.State.Timestamp">
            <summary>
            Timestamp of state change, UTC
            </summary>
        </member>
        <member name="P:OEC.API.State.Comments">
            <summary>
            Comments/reason of state change
            </summary>
        </member>
        <member name="T:OEC.API.StateList">
            <summary>
            <see cref="T:OEC.API.State"/> history of an <see cref="T:OEC.API.Order"/> - see <see cref="P:OEC.API.Order.States">Order.States</see>.
            </summary>
            <remarks>
            <see cref="P:OEC.API.StateList.Current"/> property holds most recent <see cref="T:OEC.Data.OrderState">state</see> of the order. 
            </remarks>
        </member>
        <member name="P:OEC.API.StateList.Current">
            <summary>
            Last order state change, containing current order state.
            </summary>
        </member>
        <member name="T:OEC.API.PriceRestraints">
            <summary>
            </summary>
            <exclude/>
        </member>
        <member name="M:OEC.API.Remoting.SyncDelegateQueue.#ctor">
            <summary>
            Intializes a new queue object
            </summary>
        </member>
        <member name="M:OEC.API.Remoting.SyncDelegateQueue.Enqueue(OEC.API.Remoting.SimpleDelegate)">
            <summary>
            Writes object in the queue
            </summary>
            <param name="item">object to write</param>
        </member>
        <member name="M:OEC.API.Remoting.SyncDelegateQueue.Dequeue(System.Int32)">
            <summary>
            waits for data available and extract first item
            </summary>
            <param name="TimeoutMs"></param>
            <returns>null if no data in the queue and timeout expired</returns>
        </member>
        <member name="M:OEC.API.Remoting.SyncDelegateQueue.DequeueNoWait(System.Boolean)">
            <summary>
            extracts first available item returns immediatelly. 
            </summary>
            <returns>null if no data in the queue</returns>
        </member>
        <member name="P:OEC.API.Remoting.SyncDelegateQueue.WaitHandle">
            <summary>
            
            </summary>
        </member>
        <member name="P:OEC.API.Remoting.SyncDelegateQueue.Count">
            <summary>
            number of items in the queue
            </summary>
        </member>
        <member name="T:OEC.API.Strategies.ServerStrategyManager">
            <summary>
            Represents a manager of ServerStrategy instances. 
            </summary>
            <exclude />
        </member>
        <member name="M:OEC.API.Strategies.ServerStrategyManager.StartStrategy(System.String,OEC.API.Strategies.ServerStrategyParamList,OEC.API.OrderDraft)">
            <summary>
            Starts new ServerStrategy instance. 
            </summary>
        </member>
        <member name="M:OEC.API.Strategies.ServerStrategyManager.StopStrategy(OEC.API.Strategies.ServerStrategy)">
            <summary>
            Stops executing the specified ServerStrategy. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.ServerStrategyManager.Strategies">
            <summary>
            Gets a list of active strategies. 
            </summary>
        </member>
        <member name="P:OEC.API.Strategies.ServerStrategyManager.InfoStrategies">
            <summary>
            Gets a list of available strategies and their features. 
            </summary>
        </member>
        <member name="E:OEC.API.Strategies.ServerStrategyManager.OnServerStrategyStarted">
            <summary>
            Occurs when ServerStrategy execution started. 
            </summary>
        </member>
        <member name="E:OEC.API.Strategies.ServerStrategyManager.OnServerStrategyStopped">
            <summary>
            Occurs when ServerStrategy execution stopped or ServerStrategy was not accepted by server. 
            The actual reason of stopping is provided. 
            </summary>
        </member>
        <member name="E:OEC.API.Strategies.ServerStrategyManager.OnServerStrategyConfirmed">
            <summary>
            Occurs when ServerStrategy is confirmed by server and global ID is assigned. 
            Initial local ID of the ServerStrategy is provided. 
            </summary>
        </member>
        <member name="E:OEC.API.Strategies.ServerStrategyManager.OnServerStrategyChanged">
            <summary>
            Occurs when anything changed in strategy except its state (orders added, phantom one became actual, etc)
            </summary>
        </member>
        <member name="T:OEC.API.Strategies.OnServerStrategyStartedEvent">
            <summary>
            Represents ServerStrategyStarted event handler. 
            </summary>
            <exclude />
        </member>
        <member name="T:OEC.API.Strategies.OnServerStrategyStoppedEvent">
            <summary>
            Represents ServerStrategyStopped event handler. 
            </summary>
            <exclude />
        </member>
        <member name="T:OEC.API.Strategies.OnServerStrategyConfirmedEvent">
            <summary>
            Represents ServerStrategyConfirmed event handler. 
            </summary>
            <exclude />
        </member>
        <member name="T:OEC.API.Strategies.OnServerStrategyPhantomOrdersChangedEvent">
            <summary>
            Represents ServerStrategyPhantomOrdersChanged event handler. 
            </summary>
            <exclude />
        </member>
        <member name="T:OEC.API.Strategies.OnServerStrategyChangedEvent">
            <summary>
            Represents ServerStrategyChanged event handler. 
            </summary>
            <exclude />
        </member>
        <member name="T:OEC.API.Strings">
            <summary>
            Helper class with string transformations and formatting
            </summary>
        </member>
        <member name="F:OEC.API.Strings.ContractMonths">
            <summary>
            symbol names of contract months F for Jan, G for Feb etc.
            </summary>
        </member>
        <member name="F:OEC.API.Strings.OrderTypeNames">
            <summary>
            Full names of order types
            </summary>
        </member>
        <member name="F:OEC.API.Strings.OrderTypeFmts">
            <summary>
            Short names of order types with price placeholders 
            </summary>
        </member>
        <member name="F:OEC.API.Strings.ContractTypeName">
            <summary>
            Contract type names
            </summary>
        </member>
        <member name="M:OEC.API.Strings.GetPriceMask(System.Int32,System.Double)">
            <summary>
            Returns a string representing input mask for given format and tick
            <see cref="P:OEC.API.Contract.PriceFormat"/>
            <see cref="P:OEC.API.Contract.TickSize"/>
            </summary>
            <param name="PriceFormat">Price format value</param>
            <param name="TickSize">Tick size</param>
            <returns>format mask, like #.## or # ##.##</returns>
        </member>
        <member name="M:OEC.API.Strings.PriceToString(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Formats price using given format specifiers
            <see cref="P:OEC.API.Contract.PriceFormat"/>
            </summary>
            <param name="PriceFormat">Price format value</param>
            <param name="PriceMultiplier">multiplier (power of ten)</param>
            <param name="TickSize">Tick size</param>
            <param name="Price">Price to format</param>
            <returns>formatter price</returns>
        </member>
        <member name="M:OEC.API.Strings.PriceToString(System.Int32,System.Int32,System.Double,System.Double,System.Globalization.CultureInfo)">
            <summary>
            Formats price using given format specifiers
            <see cref="P:OEC.API.Contract.PriceFormat"/>
            </summary>
            <param name="PriceFormat">Price format value</param>
            <param name="PriceMultiplier">multiplier (power of ten)</param>
            <param name="TickSize">Tick size</param>
            <param name="Price">Price to format</param>
            <param name="culture">Culture for price format</param>
            <returns>formatter price</returns>
        </member>
        <member name="M:OEC.API.Strings.AvgPriceToString(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Formats price deriving tick size from the price format or by using given ticksize it is less.
            </summary>
            <param name="PriceFormat">Price format</param>
            <param name="PriceMultiplier">multiplier (power of ten)</param>
            <param name="TickSize">Tick size</param>
            <param name="Price">Price to format</param>
            <returns>formatted price</returns>
        </member>
        <member name="M:OEC.API.Strings.Head(System.String,System.String)">
            <summary>
            Cuts out the part before the first occurence of separator 
            </summary>
            <seealso cref="M:OEC.API.Strings.Tail(System.String,System.String)"/>
            <param name="str">string to split</param>
            <param name="separator">Separator string</param>
            <returns>Cut part or empty string</returns>
        </member>
        <member name="M:OEC.API.Strings.Tail(System.String,System.String)">
            <summary>
            Cut out the part before the first occurence of separator, if any
            </summary>
            <seealso cref="M:OEC.API.Strings.Head(System.String,System.String)"/>
            <param name="str">string to split</param>
            <param name="separator">Separator string</param>
            <returns>remainder or whole string</returns>
        </member>
        <member name="M:OEC.API.Strings.UTCExecutionTimeToText(System.DateTime)">
            <summary>
            Formats order execution time (UTC) to normal string presentation. 
            </summary>
            <param name="value">UTC Time to format</param>
            <returns></returns>
        </member>
        <member name="M:OEC.API.Strings.ExecutionTimeToText(System.DateTime)">
            <summary>
            Formats order execution time to normal string presentation. 
            </summary>
            <param name="value">Local Time to format</param>
            <returns></returns>
        </member>
        <member name="M:OEC.API.Strings.IsDefaultTime(System.DateTime)">
            <summary>
            Checks whether value is default time
            </summary>
            <param name="value">Start/End time</param>
            <returns></returns>
        </member>
        <member name="M:OEC.API.Strings.TextToExecutionTime(System.String,System.DateTime,System.DateTime)">
            <summary>
            Parses a string to order execution time.
            </summary>
            <param name="text">text to parse</param>
            <param name="defaultvalue">value if text cannot be parsed</param>
            <param name="minimumtime">minimum value</param>
            <returns></returns>
        </member>
        <member name="M:OEC.API.Strings.FormatSide(OEC.API.Contract,OEC.Data.OrderSide)">
            <summary>
            Gets order side string formatted according to contract kind
            </summary>
            <param name="contract">Contract used for formatting</param>
            <param name="Side">Side being formatted</param>
            <returns>Appropriate formatted string</returns>
        </member>
        <member name="M:OEC.API.Strings.FormatQuantity(OEC.API.Contract,System.Int32)">
            <summary>
            Gets order quantity string formatted according to contract kind
            </summary>
            <param name="contract">Contract used for formatting</param>
            <param name="quantity">Quantity being formatted</param>
            <returns>Appropriate formatted string</returns>
        </member>
        <member name="M:OEC.API.Strings.QuantityFormattingRequired(OEC.API.Contract)">
            <summary>
            Returns a value indicating that quantity formatting should be used to represent quantity values of the specified contract. 
            </summary>
        </member>
        <member name="M:OEC.API.Strings.FormatEquityOptionSide(OEC.Data.OrderSide)">
            <summary>
            Gets side formatted for equity options
            </summary>
            <param name="Side">Side being formatted</param>
            <returns>Appropriate formatted string</returns>
        </member>
        <member name="M:OEC.API.Strings.FormatShortEquityOptionSide(OEC.Data.OrderSide)">
            <summary>
            Gets side formatted in short form for Equity Options
            </summary>
            <param name="Side">Side being formatted</param>
            <returns>Appropriate formatted string</returns>
        </member>
        <member name="M:OEC.API.Strings.FormatShortEquitySide(OEC.Data.OrderSide)">
            <summary>
            Gets side formatted in short form for Stocks
            </summary>
            <param name="Side">Side being formatted</param>
            <returns>Appropriate formatted string</returns>
        </member>
        <member name="M:OEC.API.Strings.FormatTradingSession(OEC.Data.TradingSession)">
            <summary>
            Gets traiding session short formatted string
            </summary>
            <param name="tradingSession">Traiding session being formatted</param>
            <returns>Appropriate formatted string</returns>
            <exclude />
        </member>
        <member name="T:OEC.API.Strings.KiloNumberFormatter">
            <summary>
            Formatter for big integer values, provides collapsed representation like "300K" or "5.25M". 
            </summary>
        </member>
        <member name="M:OEC.API.Strings.KiloNumberFormatter.Format(System.Int64)">
            <summary>
            Formats integer value. 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OEC.API.Strings.KiloNumberFormatter.Parse(System.String)">
            <summary>
            Parses (collapsed) integer value. 
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:OEC.API.PriceIntern">
            <summary>
            Utility class for formatting and parsing prices
            </summary>
            <remarks>
            This class using special notation for price format:
            <ul>
            <li>positive values specifies number of digits after decimal point (2 = 0.00)</li>
            <li>negative - divisor of fraction (-32 = 1/32)</li>
            </ul>
            </remarks>
        </member>
        <member name="M:OEC.API.PriceIntern.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct the formatter using given format specifiers, value and min/max value
            </summary>
            <param name="pPriceFormat"><see cref="P:OEC.API.Contract.PriceFormat"/></param>
            <param name="pPriceMultiplier">Multiplier, power of 10</param>
            <param name="tickSize">Tick size - mimimal price increment</param>
            <param name="value">Price value</param>
            <param name="minvalue">Minimum</param>
            <param name="maxvalue">Maximum</param>
        </member>
        <member name="M:OEC.API.PriceIntern.#ctor(OEC.API.Contract,System.Double,System.Double,System.Double)">
            <summary>
            Contruct formatter using contract format specifiers and given value
            </summary>
            <param name="contract"></param>
            <param name="value"></param>
            <param name="maxvalue"></param>
            <param name="minvalue"></param>
        </member>
        <member name="M:OEC.API.PriceIntern.#ctor(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Constructs formatter using given format specifiers value and defaiult min/max values (0, 1e9)
            </summary>
            <param name="priceFormat"><see cref="P:OEC.API.Contract.PriceFormat"/></param>
            <param name="priceMultiplier">Multiplier, power of 10</param>
            <param name="tickSize">Tick size - mimimal price increment</param>
            <param name="value">Price value</param>
        </member>
        <member name="M:OEC.API.PriceIntern.fromString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parse formatted price
            </summary>
            <param name="value">string price</param>
            <returns>false, if price doesn't match expected pattern</returns>
        </member>
        <member name="M:OEC.API.PriceIntern.fromString(System.String)">
            <summary>
            Parse formatted price
            </summary>
            <param name="value">string price</param>
            <returns>false, if price doesn't match expected pattern</returns>
        </member>
        <member name="M:OEC.API.PriceIntern.ToString(System.Globalization.CultureInfo)">
            <summary>
            Format current value 
            </summary>
            <returns>formatted price</returns>
        </member>
        <member name="M:OEC.API.PriceIntern.ToString">
            <summary>
            Format current value 
            </summary>
            <returns>formatted price</returns>
        </member>
        <member name="M:OEC.API.PriceIntern.Inc">
            <summary>
            increase value by 1 tick
            </summary>
        </member>
        <member name="M:OEC.API.PriceIntern.Dec">
            <summary>
            decrease value by 1 tick
            </summary>
        </member>
        <member name="M:OEC.API.PriceIntern.getPriceMask">
            <summary>
            Returns a string representing input mask for given format and tick
            <see cref="P:OEC.API.Contract.PriceFormat"/>
            <see cref="P:OEC.API.Contract.TickSize"/>
            </summary>
            <returns>string mask</returns>
        </member>
        <member name="M:OEC.API.PriceIntern.getPriceFormatString">
            <summary>
            builds format string for using with string.Format(integer part, fractional part)
            </summary>
            <returns>price format string</returns>
        </member>
        <member name="P:OEC.API.PriceIntern.Value">
            <summary>
            get or set current price value
            when assigning, value will be aligned by tick size and min/max boundaries.
            </summary>
        </member>
        <member name="P:OEC.API.PriceIntern.MinValue">
            <summary>
            get/set min value
            </summary>
        </member>
        <member name="P:OEC.API.PriceIntern.MaxValue">
            <summary>
            get/set maxvalue
            </summary>
        </member>
        <member name="T:OEC.API.Trader">
            <summary>
            Represents underlying trader, his accounts and orders
            </summary>
            <remarks>
            Underlying traders are available for Admin or TraderManager accounts.
            </remarks>
        </member>
        <member name="P:OEC.API.Trader.Accounts">
            <summary>
            Accounts of trader
            </summary>
        </member>
        <member name="P:OEC.API.Trader.Orders">
            <summary>
            Orders of trader
            </summary>
        </member>
        <member name="P:OEC.API.Trader.Category">
            <summary>
            Trader category
            </summary>
        </member>
        <member name="P:OEC.API.Trader.Properties">
            <summary>
            Trader properties
            </summary>
        </member>
        <member name="T:OEC.API.TraderList">
            <summary>
            List of <see cref="T:OEC.API.Trader">traders</see> - see <see cref="P:OEC.API.OECClient.Traders">OECClient.Traders</see>
            </summary>
            <remarks>
            The list is indexed by ID and Name
            </remarks>
        </member>
        <member name="T:OEC.API.TraderCategory">
            <summary>
            Trader category
            </summary>
        </member>
        <member name="T:OEC.API.CategoryList">
            <summary>
            List of trader categories
            </summary>
        </member>
        <member name="T:OEC.API.Layers.DataProviderLayer`1">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:OEC.API.Layers.ExecutionLayer">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="M:OEC.API.Layers.ExecutionLayer.#ctor(OEC.API.Layers.ExecutionLayer)">
            <summary>
            Creates the provider as a section of the executing chain
            </summary>
            <param name="NextLayer"></param>
        </member>
        <member name="M:OEC.API.Layers.ExecutionLayer.OnUpstreamResponseReceived(OEC.Protocol.ClientResponse)">
            <summary>
            Processes the response from NextProvider. By default, sends it up
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:OEC.API.Layers.ExecutionLayer.SendResponseUp(OEC.Protocol.ClientResponse)">
            <summary>
            Sends the response up
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:OEC.API.Layers.ExecutionLayer.ExecuteRequest(OEC.Protocol.ClientRequest)">
            <summary>
            Executes request
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:OEC.API.Layers.ExecutionLayer.MainThreadPump">
            <summary>
            pumps messages from the connection
            called by winforms timer to make processing and events happen in the main thread
            </summary>
        </member>
        <member name="M:OEC.API.Layers.ExecutionLayer.GetConfiguration(System.Type)">
            <summary>
            Returns configuration object
            </summary>
            <param name="ConfigurationType"></param>
            <returns></returns>
        </member>
        <member name="M:OEC.API.Layers.ExecutionLayer.GetConfiguration``1">
            <summary>
            Templated version of GetConfiguration(Type ConfigurationType)
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:OEC.API.Layers.ExecutionLayer.NextLayer">
            <summary>
            Next execution layer
            </summary>
        </member>
        <member name="E:OEC.API.Layers.ExecutionLayer.ResponseReceived">
            <summary>
            Occurs when response received
            </summary>
        </member>
        <member name="M:OEC.API.Layers.DataProviderLayer`1.HistoryRequest(`0,OEC.Protocol.PriceRequest)">
            <summary>
            Processes historical requests
            </summary>
            <param name="ci"></param>
            <param name="r"></param>
        </member>
        <member name="M:OEC.API.Layers.DataProviderLayer`1.Subscribe(`0,OEC.Data.SubscriptionType)">
            <summary>
            Subscibes to some time of data subscription
            </summary>
            <param name="ci"></param>
            <param name="subscriptionType"></param>
        </member>
        <member name="M:OEC.API.Layers.DataProviderLayer`1.Unsubscribe(`0,OEC.Data.SubscriptionType)">
            <summary>
            Unsubscibes to some time of data subscription
            </summary>
            <param name="ci"></param>
            <param name="subscriptionType"></param>
        </member>
        <member name="M:OEC.API.Layers.DataProviderLayer`1.IsFakeContract(System.Int32,System.Boolean)">
            <summary>
            Indicates the contract is a fake one and created by this layer
            </summary>
            <param name="contractID"></param>
            <param name="pit"></param>
            <returns></returns>
        </member>
        <member name="M:OEC.API.Layers.DataProviderLayer`1.UnsubscribeAll">
            <summary>
            Initiates unsubscribing of all subscriptions
            </summary>
        </member>
        <member name="T:OEC.API.Layers.DataProviderContractInfo">
            <summary>
            General contract properties
            <exclude/>
            </summary>
        </member>
        <member name="F:OEC.API.Layers.DataProviderContractInfo.Fake">
            <summary>
            Contract has been created as a fake. No trading is available
            </summary>
        </member>
        <member name="F:OEC.API.Layers.DataProviderContractInfo.RTSubscribed">
            <summary>
            Real=Time prices subscribed
            </summary>
        </member>
        <member name="T:OEC.API.Layers.IExecutionLayerConfig">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:OEC.API.Layers.ResponseReceivedEvent">
            <summary>
            <exclude/>
            </summary>
            <param name="response"></param>
        </member>
        <member name="T:OEC.API.Layers.InitiateReconnect">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:OEC.API.Layers.LayerPriorityAttribute">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:OEC.HashTools.HashHelper`1">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:OEC.HashTools.ProcessHasher">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:OEC.API.User">
            <summary>
            Representation of another user in OEC system
            </summary>
            <remarks>
            This class can be used to check <see cref="P:OEC.API.User.Online"/> status of another user or <see cref="M:OEC.API.OECClient.SendMessage(OEC.API.User,System.String)">send</see> him a message
            </remarks>
        </member>
        <member name="M:OEC.API.User.#ctor(OEC.Data.UserStatus)">
            <summary>
            decodes data and creates an instance 
            </summary>
            <param name="user">serialized user data</param>
        </member>
        <member name="M:OEC.API.User.#ctor(OEC.Data.Trader)">
            <summary>
            creates a stub
            </summary>
            <param name="user"></param>
        </member>
        <member name="P:OEC.API.User.Online">
            <summary>
            Checks online status
            </summary>
        </member>
        <member name="T:OEC.API.UserList">
            <summary>
            List of related <see cref="T:OEC.API.User">users</see> - see <see cref="P:OEC.API.OECClient.Users">OECClient.Users</see>.
            </summary>
            <remarks>
            List is indexed by ID and Name.
            </remarks>
        </member>
        <member name="T:OEC.API.LoggedUserClientList">
            <summary>
            List of another sessions of current user
            </summary>
        </member>
        <member name="T:OEC.API.LoggedUserClient">
            <summary>
            Describes logged user session
            </summary>
        </member>
        <member name="P:OEC.API.LoggedUserClient.ApplicationName">
            <summary>
            Sessions application
            </summary>
        </member>
        <member name="P:OEC.API.LoggedUserClient.LoginTime">
            <summary>
            Session start time
            </summary>
        </member>
        <member name="P:OEC.API.LoggedUserClient.Host">
            <summary>
            Session host
            </summary>
        </member>
        <member name="P:OEC.API.LoggedUserClient.UUID">
            <summary>
            Session UUID
            </summary>
        </member>
        <member name="T:OEC.API.Version">
            <summary>
            <see cref="T:OEC.API.Order"/> version - contains variable parameters of an order.
            </summary>
            <remarks>
            Order can have multiple versions, if it was modified. Initial version
            of order is associated with create <see cref="P:OEC.API.Version.Command"/>, all others - with their modify commands.
            <br/>
            Version of last successful modify command, or initial version is an order current version.
            <br/>
            All the variable order properties are retrieved from order current version, so <see cref="P:OEC.API.Order.Quantity"/>
            has the same value as <see cref="P:OEC.API.VersionList.Current">Order.Versions</see>.<see cref="P:OEC.API.Version.Quantity"/>.
            </remarks>
        </member>
        <member name="F:OEC.API.Version.MinimumStart">
            <summary>
            Minimum execution start time. Flag of default behaviour
            </summary>
        </member>
        <member name="F:OEC.API.Version.MaximumEnd">
            <summary>
            Maximum execution stop time. Flag of default behaviour
            </summary>
        </member>
        <member name="M:OEC.API.Version.#ctor(OEC.API.Order,OEC.Data.OrderVersion,OEC.API.Command)">
            <summary>
            constructs version from serialized data
            </summary>
            <param name="order">parent order</param>
            <param name="version">serialized data</param>
            <param name="command">associated command</param>
        </member>
        <member name="M:OEC.API.Version.Clone">
            <summary>
            Create a copy of version (for modification)
            </summary>
            <returns></returns>
        </member>
        <member name="M:OEC.API.Version.Clone(OEC.API.Order)">
            <summary>
            Create a copy of version with new Order (for modification)
            </summary>
            <returns></returns>
        </member>
        <member name="M:OEC.API.Version.Serialize">
            <summary>
            Create serializable version
            </summary>
            <returns>serializable data</returns>
        </member>
        <member name="M:OEC.API.Version.GetTypePriceString">
            <summary>
            returns order type, price and flags as string (STP 1 LMT 2 GTC)
            </summary>
            <returns>string representation version</returns>
        </member>
        <member name="M:OEC.API.Version.ToString">
            <summary>
            returns this version string representation in form "Buy 1 ESH6 STP 1 LMT 2 GTC"
            </summary>
            <returns>order as string</returns>
        </member>
        <member name="P:OEC.API.Version.Quantity">
            <summary>
            Order quantity
            </summary>
        </member>
        <member name="P:OEC.API.Version.Type">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:OEC.API.Version.Price">
            <summary>
            Order limit/stop price
            </summary>
        </member>
        <member name="P:OEC.API.Version.Price2">
            <summary>
            Current order limit price for STPLMT orders
            </summary>
        </member>
        <member name="P:OEC.API.Version.Comments">
            <summary>
            Version comments (not used)
            </summary>
        </member>
        <member name="P:OEC.API.Version.Flags">
            <summary>
            Order execution flags
            </summary>
        </member>
        <member name="P:OEC.API.Version.ExecInst">
            <summary>
            ExecInst: All Or Nothing
            </summary>
        </member>
        <member name="P:OEC.API.Version.TradingSession">
            <summary>
            Trading Session can be used to represent a specific market trading session
            </summary>
        </member>
        <member name="P:OEC.API.Version.Command">
            <summary>
            associated create or modify command
            </summary>
        </member>
        <member name="P:OEC.API.Version.ExtData">
            <summary>
            Extended data
            </summary>
        </member>
        <member name="P:OEC.API.Version.OsmRoot">
            <summary>
            Gets OSM root order
            </summary>
        </member>
        <member name="P:OEC.API.Version.Start">
            <summary>
            Execution start time, UTC
            </summary>
            <remarks>
            if value &lt;= Now, execution starts immediately, otherwise order would be held until specified time.
            </remarks>
        </member>
        <member name="P:OEC.API.Version.End">
            <summary>
            Execution stop time, UTC
            </summary>
            <remarks>
            Order will be cancelled at this time. Value later than normal order end time (end of session for day orders or expiration date for GTC) would be ignored
            </remarks>
        </member>
        <member name="T:OEC.API.VersionList">
            <summary>
            <see cref="T:OEC.API.Version"/> history of an <see cref="T:OEC.API.Order"/> - see <see cref="P:OEC.API.Order.Versions">Order.Versions</see>.
            </summary>
            <remarks>
            Last version that have associated command in executed state is active. <br/>
            Order has at least one active version
            </remarks>
        </member>
        <member name="P:OEC.API.VersionList.Current">
            <summary>
            Current (active) version of order
            </summary>
            <remarks>
            Active version is defined as a version associated with last executed create/modify command. 
            Pending or failed modification commands do not affect active order version.
            </remarks>
        </member>
        <member name="T:OEC.API.APIAction">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="T:OEC.API.ThreadingPolicy">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="T:OEC.API.WinFormsThreadingPolicy">
            <summary>
            </summary>
            <exclude />
        </member>
    </members>
</doc>
