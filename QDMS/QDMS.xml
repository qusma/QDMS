<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QDMS</name>
    </assembly>
    <members>
        <member name="T:QDMS.DataSourceStatus">
            <summary>
            Information on the connection status of a datasource
            </summary>
        </member>
        <member name="M:QDMS.DataSourceStatus.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.DataSourceStatus.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:QDMS.DataSourceStatus.RealtimeConnected">
            <summary>
            Set to true if connected, false is not, null if N/A
            </summary>
        </member>
        <member name="P:QDMS.DataSourceStatus.HistoricalConnected">
            <summary>
            Set to true if connected, false is not, null if N/A
            </summary>
        </member>
        <member name="P:QDMS.DataSourceStatus.EconReleasesConnected">
            <summary>
            Set to true if connected, false is not, null if N/A
            </summary>
        </member>
        <member name="T:QDMS.ContinuousFuture">
            <summary>
            Represents a composite instrument, which strings together futures of different maturities to create a continuous one
            </summary>
        </member>
        <member name="M:QDMS.ContinuousFuture.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.ContinuousFuture.ID">
            <summary>
            Continuous future ID
            </summary>
        </member>
        <member name="P:QDMS.ContinuousFuture.InstrumentID">
            <summary>
            Instrument ID
            </summary>
        </member>
        <member name="P:QDMS.ContinuousFuture.Instrument">
            <summary>
            Instrument
            </summary>
        </member>
        <member name="P:QDMS.ContinuousFuture.UnderlyingSymbolID">
            <summary>
            Underlying symbol ID
            </summary>
        </member>
        <member name="P:QDMS.ContinuousFuture.UnderlyingSymbol">
            <summary>
            The underlying symbol that the continuous future is based on.
            </summary>
        </member>
        <member name="P:QDMS.ContinuousFuture.Month">
            <summary>
            Which contract month to use to construct the continuous prices.
            For example, Month = 1 uses the "front" future, Month = 2 uses the next one and so forth.
            </summary>
        </member>
        <member name="P:QDMS.ContinuousFuture.RolloverType">
            <summary>
            What criteria should be used when determining whether to roll over to the next contract.
            </summary>
        </member>
        <member name="P:QDMS.ContinuousFuture.RolloverDays">
            <summary>
            Number of days that the criteria will use to determine rollover.
            </summary>
        </member>
        <member name="P:QDMS.ContinuousFuture.AdjustmentMode">
            <summary>
            How to adjust prices from one contract to the next
            </summary>
        </member>
        <member name="P:QDMS.ContinuousFuture.UseJan">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.ContinuousFuture.UseFeb">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.ContinuousFuture.UseMar">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.ContinuousFuture.UseApr">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.ContinuousFuture.UseMay">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.ContinuousFuture.UseJun">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.ContinuousFuture.UseJul">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.ContinuousFuture.UseAug">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.ContinuousFuture.UseSep">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.ContinuousFuture.UseOct">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.ContinuousFuture.UseNov">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.ContinuousFuture.UseDec">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.ContinuousFuture.MonthIsUsed(System.Int32)">
            <summary>
            
            </summary>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:QDMS.ContinuousFuture.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:QDMS.Country">
            <summary>
            Country
            </summary>
        </member>
        <member name="P:QDMS.Country.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.Country.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.Country.CountryCode">
            <summary>
            ISO 3166 2-letter country code
            </summary>
        </member>
        <member name="P:QDMS.Country.CurrencyCode">
            <summary>
            ISO 4217 3-letter currency code
            </summary>
        </member>
        <member name="T:QDMS.Currency">
            <summary>
            Currency
            </summary>
        </member>
        <member name="P:QDMS.Currency.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.Currency.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.Currency.Code">
            <summary>
            ISO 4217 3-letter currency code
            </summary>
        </member>
        <member name="P:QDMS.Currency.NumericCode">
            <summary>
            3 digit numeric code, useful when currency codes need to be understood in countries that do not use Latin scripts and for computerised systems
            </summary>
        </member>
        <member name="T:QDMS.Datasource">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.Datasource.ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.Datasource.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.Datasource.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:QDMS.Datasource.Equals(QDMS.Datasource)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:QDMS.Datasource.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:QDMS.Datasource.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:QDMS.DataUpdateJobSettings">
            <summary>
            Holds instructions on how a data update job is to be performed.
            </summary>
        </member>
        <member name="P:QDMS.DataUpdateJobSettings.ID">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:QDMS.DataUpdateJobSettings.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:QDMS.DataUpdateJobSettings.UseTag">
            <summary>
            If true, all instruments with the given tag are matched. If false, a specific instrument is matched.
            </summary>
        </member>
        <member name="P:QDMS.DataUpdateJobSettings.InstrumentID">
            <summary>
            If UseTag = false, this instrument's data gets updated.
            </summary>
        </member>
        <member name="P:QDMS.DataUpdateJobSettings.Instrument">
            <summary>
            Instrument.
            </summary>
        </member>
        <member name="P:QDMS.DataUpdateJobSettings.TagID">
            <summary>
            If UseTag = true, instruments having this tag are updated.
            </summary>
        </member>
        <member name="P:QDMS.DataUpdateJobSettings.Tag">
            <summary>
            Tag.
            </summary>
        </member>
        <member name="P:QDMS.DataUpdateJobSettings.WeekDaysOnly">
            <summary>
            If true, updates will only happen monday through friday.
            </summary>
        </member>
        <member name="P:QDMS.DataUpdateJobSettings.Time">
            <inheritdoc />
        </member>
        <member name="P:QDMS.DataUpdateJobSettings.Frequency">
            <summary>
            The data frequency to be updated.
            </summary>
        </member>
        <member name="E:QDMS.DataUpdateJobSettings.PropertyChanged">
            <summary>
            Property changed event
            </summary>
        </member>
        <member name="M:QDMS.DataUpdateJobSettings.OnPropertyChanged(System.String)">
            <summary>
            Invoke proprtychanged
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="T:QDMS.Dividend">
            <summary>
            Holds data on one particular dividend payout
            </summary>
        </member>
        <member name="P:QDMS.Dividend.Amount">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.Dividend.Currency">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.Dividend.DeclarationDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.Dividend.ExDate">
            <summary>
            Cut-off date for receiving the dividend
            </summary>
        </member>
        <member name="P:QDMS.Dividend.ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.Dividend.PaymentDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.Dividend.RecordDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.Dividend.Symbol">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.Dividend.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.Dividend.ToString">
            <inheritdoc />
        </member>
        <member name="T:QDMS.EarningsAnnouncement">
            <summary>
            Holds data for a specific earnings announcement
            </summary>
        </member>
        <member name="P:QDMS.EarningsAnnouncement.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.EarningsAnnouncement.Forecast">
            <summary>
            Average estimation of the earnings per share before release
            </summary>
        </member>
        <member name="P:QDMS.EarningsAnnouncement.EarningsPerShare">
            <summary>
            The actual reported value of earnings per share
            </summary>
        </member>
        <member name="P:QDMS.EarningsAnnouncement.Symbol">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.EarningsAnnouncement.CompanyName">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.EarningsAnnouncement.Date">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.EarningsAnnouncement.EarningsCallTime">
            <summary>
            When the earnings are released
            </summary>
        </member>
        <member name="P:QDMS.EarningsAnnouncement.EarningsTime">
            <summary>
            If EarningsCallTime is set to SpecificTime, this property will contain the precise time
            </summary>
        </member>
        <member name="M:QDMS.EarningsAnnouncement.ToString">
            <inheritdoc />
        </member>
        <member name="T:QDMS.EconomicRelease">
            <summary>
            Holds data on a release of economic data, eg GDP figures
            </summary>
        </member>
        <member name="P:QDMS.EconomicRelease.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.EconomicRelease.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.EconomicRelease.Country">
            <summary>
            ISO 3166 2-letter country code
            </summary>
        </member>
        <member name="P:QDMS.EconomicRelease.Currency">
            <summary>
            ISO 4217 3-letter currency code
            </summary>
        </member>
        <member name="P:QDMS.EconomicRelease.DateTime">
            <summary>
            Date and time in UTC
            </summary>
        </member>
        <member name="P:QDMS.EconomicRelease.Expected">
            <summary>
            Expected value
            </summary>
        </member>
        <member name="P:QDMS.EconomicRelease.Previous">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.EconomicRelease.Actual">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.EconomicRelease.Importance">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.EconomicRelease.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.EconomicRelease.#ctor(System.String,System.String,System.String,System.DateTime,QDMS.Importance,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="country"></param>
            <param name="currency"></param>
            <param name="dateTime"></param>
            <param name="importance"></param>
            <param name="expected"></param>
            <param name="previous"></param>
            <param name="actual"></param>
        </member>
        <member name="M:QDMS.EconomicRelease.ToString">
            <inheritdoc />
        </member>
        <member name="T:QDMS.Exchange">
            <summary>
            Represents a trading venue
            </summary>
        </member>
        <member name="P:QDMS.Exchange.ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.Exchange.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.Exchange.Timezone">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.Exchange.Sessions">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.Exchange.LongName">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.Exchange.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:QDMS.Exchange.ToString">
            <inheritdoc />
        </member>
        <member name="M:QDMS.Exchange.Equals(QDMS.Exchange)">
            <inheritdoc />
        </member>
        <member name="M:QDMS.Exchange.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:QDMS.Exchange.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:QDMS.ExchangeSession">
            <summary>
            A trading session (opening and closing times) for a particular trading venue
            </summary>
        </member>
        <member name="P:QDMS.ExchangeSession.ID">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:QDMS.ExchangeSession.OpeningTime">
            <inheritdoc />
        </member>
        <member name="P:QDMS.ExchangeSession.ClosingTime">
            <inheritdoc />
        </member>
        <member name="P:QDMS.ExchangeSession.ExchangeID">
            <summary>
            Exchange Id
            </summary>
        </member>
        <member name="P:QDMS.ExchangeSession.Exchange">
            <summary>
            Exchange
            </summary>
        </member>
        <member name="P:QDMS.ExchangeSession.OpeningAsSeconds">
            <inheritdoc />
        </member>
        <member name="P:QDMS.ExchangeSession.ClosingAsSeconds">
            <inheritdoc />
        </member>
        <member name="P:QDMS.ExchangeSession.IsSessionEnd">
            <inheritdoc />
        </member>
        <member name="P:QDMS.ExchangeSession.OpeningDay">
            <inheritdoc />
        </member>
        <member name="P:QDMS.ExchangeSession.ClosingDay">
            <inheritdoc />
        </member>
        <member name="M:QDMS.ExchangeSession.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:QDMS.ExpirationRule">
            <summary>
            This class holds a set of rules that collectively can be used to deduce the expiration date of a futures or options contract.
            </summary>
        </member>
        <member name="P:QDMS.ExpirationRule.DaysBefore">
            <summary>
            The future expires this many days before the Reference day.
            </summary>
        </member>
        <member name="P:QDMS.ExpirationRule.DayType">
            <summary>
            Use calendar days or business days for the calculation.
            </summary>
        </member>
        <member name="P:QDMS.ExpirationRule.ReferenceUsesDays">
            <summary>
            If true, the reference point is set at a specified number of calendar days of a specified month.
            If false, we use a set number of elapsed days of the week to set the reference point.
            </summary>
        </member>
        <member name="P:QDMS.ExpirationRule.ReferenceDays">
            <summary>
            If ReferenceUsesDays is true, this sets the day of the month on which the reference day is.
            </summary>
        </member>
        <member name="P:QDMS.ExpirationRule.ReferenceRelativeMonth">
            <summary>
            The month that the reference day is in: previous/current/next.
            </summary>
        </member>
        <member name="P:QDMS.ExpirationRule.ReferenceWeekDayCount">
            <summary>
            When using a weekday-based reference day, this sets the number of weeks that must have passed for the reference day to be set.
            </summary>
        </member>
        <member name="P:QDMS.ExpirationRule.ReferenceWeekDay">
            <summary>
            The weekday of the reference day.
            </summary>
        </member>
        <member name="P:QDMS.ExpirationRule.ReferenceDayIsLastBusinessDayOfMonth">
            <summary>
            If this is true, the reference day is set to the last business day of the relevant month.
            </summary>
        </member>
        <member name="P:QDMS.ExpirationRule.ReferenceDayMustBeBusinessDay">
            <summary>
            If this is true, if the reference day happens to be a holiday, it is moved back until it falls on a business day.
            </summary>
        </member>
        <member name="P:QDMS.ExpirationRule.ReferenceDayType">
            <summary>
            Rule for setting the reference day
            </summary>
        </member>
        <member name="T:QDMS.Instrument">
            <summary>
            A financial instrument
            </summary>
        </member>
        <member name="P:QDMS.Instrument.ID">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:QDMS.Instrument.Symbol">
            <summary>
            Instrument symbol
            </summary>
        </member>
        <member name="P:QDMS.Instrument.UnderlyingSymbol">
            <summary>
            Typically used for derivatives, this is the underlying instrument symbol
            </summary>
        </member>
        <member name="P:QDMS.Instrument.Name">
            <summary>
            Descriptive name of the security
            </summary>
        </member>
        <member name="P:QDMS.Instrument.PrimaryExchangeID">
            <summary>
            Primary exchange id
            </summary>
        </member>
        <member name="P:QDMS.Instrument.ExchangeID">
            <summary>
            Exchange id
            </summary>
        </member>
        <member name="P:QDMS.Instrument.Type">
            <summary>
            Instrument type
            </summary>
        </member>
        <member name="P:QDMS.Instrument.Multiplier">
            <summary>
            When an instrument's value is based on some multiple of the displayed price (eg futures)
            </summary>
        </member>
        <member name="P:QDMS.Instrument.Expiration">
            <summary>
            Expiration date for instruments that expire
            </summary>
        </member>
        <member name="P:QDMS.Instrument.OptionType">
            <summary>
            Type of option
            </summary>
        </member>
        <member name="P:QDMS.Instrument.Strike">
            <summary>
            For options
            </summary>
        </member>
        <member name="P:QDMS.Instrument.Currency">
            <summary>
            Currency
            </summary>
        </member>
        <member name="P:QDMS.Instrument.MinTick">
            <summary>
            Minimum allowed increment
            </summary>
        </member>
        <member name="P:QDMS.Instrument.Industry">
            <summary>
            Industry classification
            </summary>
        </member>
        <member name="P:QDMS.Instrument.Category">
            <summary>
            Industry sub-classification
            </summary>
        </member>
        <member name="P:QDMS.Instrument.Subcategory">
            <summary>
            Industry sub-sub-classification
            </summary>
        </member>
        <member name="P:QDMS.Instrument.IsContinuousFuture">
            <summary>
            Whether the instrument is a computed "continuous" future combining multiple futures series
            </summary>
        </member>
        <member name="P:QDMS.Instrument.ValidExchanges">
            <summary>
            Allowed exchanges
            </summary>
        </member>
        <member name="P:QDMS.Instrument.Tags">
            <summary>
            Tags
            </summary>
        </member>
        <member name="P:QDMS.Instrument.DatasourceID">
            <summary>
            Datasource id
            </summary>
        </member>
        <member name="P:QDMS.Instrument.Exchange">
            <summary>
            Exchange
            </summary>
        </member>
        <member name="P:QDMS.Instrument.PrimaryExchange">
            <summary>
            Primary exchange
            </summary>
        </member>
        <member name="P:QDMS.Instrument.Datasource">
            <summary>
            Datasource
            </summary>
        </member>
        <member name="P:QDMS.Instrument.ContinuousFutureID">
            <summary>
            Id for continuous futures
            </summary>
        </member>
        <member name="P:QDMS.Instrument.SessionsSource">
            <summary>
            How should the sessions of this instrument be determined?
            </summary>
        </member>
        <member name="P:QDMS.Instrument.Sessions">
            <summary>
            Instrument sessions, when the instrument is available for trading
            </summary>
        </member>
        <member name="P:QDMS.Instrument.SessionTemplateID">
            <summary>
            Session template id
            </summary>
        </member>
        <member name="P:QDMS.Instrument.DatasourceSymbol">
            <summary>
            Symbol of the datasource
            </summary>
        </member>
        <member name="P:QDMS.Instrument.ContinuousFuture">
            <summary>
            Continuous futures settings
            </summary>
        </member>
        <member name="P:QDMS.Instrument.TradingClass">
            <summary>
            For example, GBL Dec '13 future's trading class is "FGBL".
            </summary>
        </member>
        <member name="P:QDMS.Instrument.TagsAsString">
            <summary>
            Tags
            </summary>
        </member>
        <member name="M:QDMS.Instrument.GetTZInfo">
            <summary>
            Get timezone info for this instrument.
            </summary>
            <returns>Returns TimeZoneInfo for this instrument's exchange's timezone. If it's null, it returns UTC.</returns>
        </member>
        <member name="M:QDMS.Instrument.Equals(QDMS.Instrument)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:QDMS.Instrument.ToString">
            <inheritdoc />
        </member>
        <member name="M:QDMS.Instrument.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:QDMS.InstrumentSession">
            <summary>
            A session (opening and closing times) belonging to an instrument
            </summary>
        </member>
        <member name="P:QDMS.InstrumentSession.ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.InstrumentSession.OpeningTime">
            <inheritdoc />
        </member>
        <member name="P:QDMS.InstrumentSession.ClosingTime">
            <inheritdoc />
        </member>
        <member name="P:QDMS.InstrumentSession.InstrumentID">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.InstrumentSession.Instrument">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.InstrumentSession.OpeningAsSeconds">
            <inheritdoc />
        </member>
        <member name="P:QDMS.InstrumentSession.ClosingAsSeconds">
            <inheritdoc />
        </member>
        <member name="P:QDMS.InstrumentSession.IsSessionEnd">
            <inheritdoc />
        </member>
        <member name="P:QDMS.InstrumentSession.OpeningDay">
            <inheritdoc />
        </member>
        <member name="P:QDMS.InstrumentSession.ClosingDay">
            <inheritdoc />
        </member>
        <member name="M:QDMS.InstrumentSession.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:QDMS.InstrumentSession.ToString">
            <inheritdoc />
        </member>
        <member name="T:QDMS.OHLCBar">
            <summary>
            An open-high-low-close bar
            </summary>
        </member>
        <member name="P:QDMS.OHLCBar.Open">
            <summary>
            Opening price
            </summary>
        </member>
        <member name="P:QDMS.OHLCBar.High">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:QDMS.OHLCBar.Low">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:QDMS.OHLCBar.Close">
            <summary>
            Closing price
            </summary>
        </member>
        <member name="P:QDMS.OHLCBar.AdjOpen">
            <summary>
            Adjusted opening price
            </summary>
        </member>
        <member name="P:QDMS.OHLCBar.AdjHigh">
            <summary>
            Adjusted high price
            </summary>
        </member>
        <member name="P:QDMS.OHLCBar.AdjLow">
            <summary>
            Adjusted low price
            </summary>
        </member>
        <member name="P:QDMS.OHLCBar.AdjClose">
            <summary>
            Adjusted closing price
            </summary>
        </member>
        <member name="P:QDMS.OHLCBar.Date">
            <summary>
            Closing datetime
            </summary>
        </member>
        <member name="P:QDMS.OHLCBar.LongDate">
            <summary>
            Closing datetime in ticks
            </summary>
        </member>
        <member name="P:QDMS.OHLCBar.LongOpenDate">
            <summary>
            Opening datetime in ticks
            </summary>
        </member>
        <member name="P:QDMS.OHLCBar.DTOpen">
            <summary>
            Date/Time of the bar open. Should be in UTC.
            </summary>
        </member>
        <member name="P:QDMS.OHLCBar.DT">
            <summary>
            Date/Time of the bar close. Should be in UTC.
            </summary>
        </member>
        <member name="P:QDMS.OHLCBar.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="P:QDMS.OHLCBar.OpenInterest">
            <summary>
            Total number of outstanding contracts for this instrument
            </summary>
        </member>
        <member name="P:QDMS.OHLCBar.InstrumentID">
            <summary>
            Instrument ID
            </summary>
        </member>
        <member name="P:QDMS.OHLCBar.Dividend">
            <summary>
            Dividend on this day
            </summary>
        </member>
        <member name="P:QDMS.OHLCBar.Split">
            <summary>
            Stock splits
            </summary>
        </member>
        <member name="P:QDMS.OHLCBar.Frequency">
            <summary>
            Frequency
            </summary>
        </member>
        <member name="M:QDMS.OHLCBar.ToString">
            <inheritdoc />
        </member>
        <member name="T:QDMS.SessionTemplate">
            <summary>
            A template from which instruments can inherit their trading sessions
            </summary>
        </member>
        <member name="P:QDMS.SessionTemplate.ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.SessionTemplate.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.SessionTemplate.Sessions">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.SessionTemplate.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:QDMS.Tag">
            <summary>
            Instrument tags used for categorization etc
            </summary>
        </member>
        <member name="P:QDMS.Tag.ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.Tag.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.Tag.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:QDMS.Tag.Equals(QDMS.Tag)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:QDMS.Tag.ToString">
            <inheritdoc />
        </member>
        <member name="T:QDMS.TemplateSession">
            <summary>
            A session (opening and closing times) belonging to a session template
            </summary>
        </member>
        <member name="P:QDMS.TemplateSession.ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.TemplateSession.OpeningTime">
            <inheritdoc />
        </member>
        <member name="P:QDMS.TemplateSession.ClosingTime">
            <inheritdoc />
        </member>
        <member name="P:QDMS.TemplateSession.TemplateID">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.TemplateSession.Template">
            <summary>
            The parent template
            </summary>
        </member>
        <member name="P:QDMS.TemplateSession.OpeningAsSeconds">
            <inheritdoc />
        </member>
        <member name="P:QDMS.TemplateSession.ClosingAsSeconds">
            <inheritdoc />
        </member>
        <member name="P:QDMS.TemplateSession.IsSessionEnd">
            <inheritdoc />
        </member>
        <member name="P:QDMS.TemplateSession.OpeningDay">
            <inheritdoc />
        </member>
        <member name="P:QDMS.TemplateSession.ClosingDay">
            <inheritdoc />
        </member>
        <member name="M:QDMS.TemplateSession.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:QDMS.TemplateSession.ToString">
            <inheritdoc />
        </member>
        <member name="T:QDMS.UnderlyingSymbol">
            <summary>
            Represents a futures contract specification, including the root symbol and expiration date rules
            </summary>
        </member>
        <member name="P:QDMS.UnderlyingSymbol.ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.UnderlyingSymbol.Symbol">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.UnderlyingSymbol.ExpirationRule">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.UnderlyingSymbol.Rule">
            <summary>
            The rules that determine the expiration date for future contracts of this class
            </summary>
        </member>
        <member name="M:QDMS.UnderlyingSymbol.ExpirationDate(System.Int32,System.Int32,System.String)">
            <summary>
            Returns the expiration date for a future expiring in a particular year/month.
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="countryCode"></param>
            <returns></returns>
        </member>
        <member name="M:QDMS.UnderlyingSymbol.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:QDMS.UnderlyingSymbol.ToString">
            <inheritdoc />
        </member>
        <member name="M:QDMS.UnderlyingSymbol.Equals(QDMS.UnderlyingSymbol)">
            <inheritdoc />
        </member>
        <member name="M:QDMS.UnderlyingSymbol.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:QDMS.UnderlyingSymbol.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:QDMS.BarSize">
            <summary>
            Historical Bar Size Requests
            </summary>
        </member>
        <member name="F:QDMS.BarSize.Tick">
            <summary>
            Tick bars
            </summary>
        </member>
        <member name="F:QDMS.BarSize.OneSecond">
            <summary>
            1 second bars
            </summary>
        </member>
        <member name="F:QDMS.BarSize.FiveSeconds">
            <summary>
            5 second bars
            </summary>
        </member>
        <member name="F:QDMS.BarSize.FifteenSeconds">
            <summary>
            15 second bars
            </summary>
        </member>
        <member name="F:QDMS.BarSize.ThirtySeconds">
            <summary>
            30 second bars
            </summary>
        </member>
        <member name="F:QDMS.BarSize.OneMinute">
            <summary>
            1 minute bars
            </summary>
        </member>
        <member name="F:QDMS.BarSize.TwoMinutes">
            <summary>
            2 minute bars
            </summary>
        </member>
        <member name="F:QDMS.BarSize.FiveMinutes">
            <summary>
            5 minute bars
            </summary>
        </member>
        <member name="F:QDMS.BarSize.FifteenMinutes">
            <summary>
            15 minute bars
            </summary>
        </member>
        <member name="F:QDMS.BarSize.ThirtyMinutes">
            <summary>
            30 minute bars
            </summary>
        </member>
        <member name="F:QDMS.BarSize.OneHour">
            <summary>
            1 hour bars
            </summary>
        </member>
        <member name="F:QDMS.BarSize.OneDay">
            <summary>
            1 day bars
            </summary>
        </member>
        <member name="F:QDMS.BarSize.OneWeek">
            <summary>
            1 week bars
            </summary>
        </member>
        <member name="F:QDMS.BarSize.OneMonth">
            <summary>
            1 month bars
            </summary>
        </member>
        <member name="F:QDMS.BarSize.OneQuarter">
            <summary>
            1 quarter bars
            </summary>
        </member>
        <member name="F:QDMS.BarSize.OneYear">
            <summary>
            1 year bars
            </summary>
        </member>
        <member name="T:QDMS.ContinuousFuturesAdjustmentMode">
            <summary>
            How to adjust underlying data in order to form continuous futures
            </summary>
        </member>
        <member name="F:QDMS.ContinuousFuturesAdjustmentMode.NoAdjustment">
            <summary>
            No Adjustment
            </summary>
        </member>
        <member name="F:QDMS.ContinuousFuturesAdjustmentMode.Ratio">
            <summary>
            Ratio
            </summary>
        </member>
        <member name="F:QDMS.ContinuousFuturesAdjustmentMode.Difference">
            <summary>
            Difference
            </summary>
        </member>
        <member name="T:QDMS.ContinuousFuturesRolloverType">
            <summary>
            How to determine the rollover point between different futures for a continuous future
            </summary>
        </member>
        <member name="F:QDMS.ContinuousFuturesRolloverType.Time">
            <summary>
            Time
            </summary>
        </member>
        <member name="F:QDMS.ContinuousFuturesRolloverType.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="F:QDMS.ContinuousFuturesRolloverType.OpenInterest">
            <summary>
            Open Interest
            </summary>
        </member>
        <member name="F:QDMS.ContinuousFuturesRolloverType.VolumeAndOpenInterest">
            <summary>
            Volume And Open Interest
            </summary>
        </member>
        <member name="F:QDMS.ContinuousFuturesRolloverType.VolumeOrOpenInterest">
            <summary>
            Volume Or Open Interest
            </summary>
        </member>
        <member name="T:QDMS.DataLocation">
            <summary>
            Used to set where the historical data will be sourced from.
            </summary>
        </member>
        <member name="F:QDMS.DataLocation.Both">
            <summary>
            Both external and local data may be returned.
            </summary>
        </member>
        <member name="F:QDMS.DataLocation.ExternalOnly">
            <summary>
            Forces a fresh download from the external data source.
            </summary>
        </member>
        <member name="F:QDMS.DataLocation.LocalOnly">
            <summary>
            Only data from the local database will be returned. 
            External datasource will be bypassed.
            </summary>
        </member>
        <member name="T:QDMS.DayOfTheWeek">
            <summary>
            
            </summary>
        </member>
        <member name="F:QDMS.DayOfTheWeek.Monday">
            <summary>
            Monday
            </summary>
        </member>
        <member name="F:QDMS.DayOfTheWeek.Tuesday">
            <summary>
            Tuesday
            </summary>
        </member>
        <member name="F:QDMS.DayOfTheWeek.Wednesday">
            <summary>
            Wednesday
            </summary>
        </member>
        <member name="F:QDMS.DayOfTheWeek.Thursday">
            <summary>
            Thursday
            </summary>
        </member>
        <member name="F:QDMS.DayOfTheWeek.Friday">
            <summary>
            Friday
            </summary>
        </member>
        <member name="F:QDMS.DayOfTheWeek.Saturday">
            <summary>
            Saturday
            </summary>
        </member>
        <member name="F:QDMS.DayOfTheWeek.Sunday">
            <summary>
            Sunday
            </summary>
        </member>
        <member name="T:QDMS.DayType">
            <summary>
            Calendar vs business day
            </summary>
        </member>
        <member name="F:QDMS.DayType.Calendar">
            <summary>
            Calendar Day
            </summary>
        </member>
        <member name="F:QDMS.DayType.Business">
            <summary>
            Business Day
            </summary>
        </member>
        <member name="T:QDMS.EarningsCallTime">
            <summary>
            The timing of an earnings release
            </summary>
        </member>
        <member name="F:QDMS.EarningsCallTime.BeforeMarketOpen">
            <summary>
            
            </summary>
        </member>
        <member name="F:QDMS.EarningsCallTime.AfterMarketClose">
            <summary>
            
            </summary>
        </member>
        <member name="F:QDMS.EarningsCallTime.SpecificTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:QDMS.EarningsCallTime.NotAvailable">
            <summary>
            
            </summary>
        </member>
        <member name="T:QDMS.Importance">
            <summary>
            How important an economic announcement is expected to be
            </summary>
        </member>
        <member name="F:QDMS.Importance.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:QDMS.Importance.Low">
            <summary>
            Low expected impact
            </summary>
        </member>
        <member name="F:QDMS.Importance.Mid">
            <summary>
            Mid expected impact
            </summary>
        </member>
        <member name="F:QDMS.Importance.High">
            <summary>
            High expected impact
            </summary>
        </member>
        <member name="T:QDMS.InstrumentType">
            <summary>
            Order type.
            </summary>
        </member>
        <member name="F:QDMS.InstrumentType.Stock">
            <summary>
            Stock
            </summary>
        </member>
        <member name="F:QDMS.InstrumentType.Option">
            <summary>
            Option
            </summary>
        </member>
        <member name="F:QDMS.InstrumentType.Future">
            <summary>
            Future
            </summary>
        </member>
        <member name="F:QDMS.InstrumentType.Index">
            <summary>
            Indice
            </summary>
        </member>
        <member name="F:QDMS.InstrumentType.FutureOption">
            <summary>
            FOP = options on futures
            </summary>
        </member>
        <member name="F:QDMS.InstrumentType.Cash">
            <summary>
            Cash
            </summary>
        </member>
        <member name="F:QDMS.InstrumentType.Bag">
            <summary>
            For Combination Orders - must use combo leg details
            </summary>
        </member>
        <member name="F:QDMS.InstrumentType.Bond">
            <summary>
            Bond
            </summary>
        </member>
        <member name="F:QDMS.InstrumentType.Warrant">
            <summary>
            Warrant
            </summary>
        </member>
        <member name="F:QDMS.InstrumentType.Commodity">
            <summary>
            Commodity
            </summary>
        </member>
        <member name="F:QDMS.InstrumentType.Bill">
            <summary>
            Bill
            </summary>
        </member>
        <member name="F:QDMS.InstrumentType.CFD">
            <summary>
            CFD
            </summary>
        </member>
        <member name="F:QDMS.InstrumentType.Undefined">
            <summary>
            Undefined Security Type
            </summary>
        </member>
        <member name="F:QDMS.InstrumentType.Backtest">
            <summary>
            Backtest result
            </summary>
        </member>
        <member name="F:QDMS.InstrumentType.CryptoCurrency">
            <summary>
            Cryptocurrency
            </summary>
        </member>
        <member name="F:QDMS.InstrumentType.Fund">
            <summary>
            Fund
            </summary>
        </member>
        <member name="F:QDMS.InstrumentType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:QDMS.OptionType">
            <summary>
            Call vs Put
            </summary>
        </member>
        <member name="F:QDMS.OptionType.Call">
            <summary>
            Call Option
            </summary>
        </member>
        <member name="F:QDMS.OptionType.Put">
            <summary>
            Put Option
            </summary>
        </member>
        <member name="T:QDMS.ReferenceDayType">
            <summary>
            
            </summary>
        </member>
        <member name="F:QDMS.ReferenceDayType.CalendarDays">
            <summary>
            The reference point is set at a specified number of calendar days of a specified month.
            </summary>
        </member>
        <member name="F:QDMS.ReferenceDayType.WeekDays">
            <summary>
            The reference point is set at a specified number of elapsed days of a specified week.
            </summary>
        </member>
        <member name="F:QDMS.ReferenceDayType.LastDayOfMonth">
            <summary>
            The reference day is set to the last business day of the relevant month.
            </summary>
        </member>
        <member name="T:QDMS.RelativeMonth">
            <summary>
            
            </summary>
        </member>
        <member name="F:QDMS.RelativeMonth.PreviousMonth">
            <summary>
            Previous Month
            </summary>
        </member>
        <member name="F:QDMS.RelativeMonth.CurrentMonth">
            <summary>
            Current Month
            </summary>
        </member>
        <member name="F:QDMS.RelativeMonth.NextMonth">
            <summary>
            Next Month
            </summary>
        </member>
        <member name="T:QDMS.SessionsSource">
            <summary>
            Possible sources for an instrument's sessions
            </summary>
        </member>
        <member name="F:QDMS.SessionsSource.Exchange">
            <summary>
            Exchange
            </summary>
        </member>
        <member name="F:QDMS.SessionsSource.Template">
            <summary>
            Template
            </summary>
        </member>
        <member name="F:QDMS.SessionsSource.Custom">
            <summary>
            Custom
            </summary>
        </member>
        <member name="T:QDMS.TickType">
            <summary>
                Type of tick event
            </summary>
        </member>
        <member name="F:QDMS.TickType.Trade">
            <summary>
                Trade
            </summary>
        </member>
        <member name="F:QDMS.TickType.TradeNb">
            <summary>
                Trade at the national best price
            </summary>
        </member>
        <member name="F:QDMS.TickType.QuoteBid">
            <summary>
                Change in the best bid
            </summary>
        </member>
        <member name="F:QDMS.TickType.QuoteBidNb">
            <summary>
                Change in the national best bid
            </summary>
        </member>
        <member name="F:QDMS.TickType.QuoteAsk">
            <summary>
                Change in the best ask
            </summary>
        </member>
        <member name="F:QDMS.TickType.QuoteAskNb">
            <summary>
                Change in the national best ask
            </summary>
        </member>
        <member name="T:QDMS.WeekDayCount">
            <summary>
            For continuous futures
            </summary>
        </member>
        <member name="F:QDMS.WeekDayCount.First">
            <summary>
            1st
            </summary>
        </member>
        <member name="F:QDMS.WeekDayCount.Second">
            <summary>
            2nd
            </summary>
        </member>
        <member name="F:QDMS.WeekDayCount.Third">
            <summary>
            3rd
            </summary>
        </member>
        <member name="F:QDMS.WeekDayCount.Fourth">
            <summary>
            4th
            </summary>
        </member>
        <member name="F:QDMS.WeekDayCount.Last">
            <summary>
            Last
            </summary>
        </member>
        <member name="T:QDMS.DataSourceDisconnectEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.DataSourceDisconnectEventArgs.SourceName">
            <summary>
            Name of the datasource.
            </summary>
        </member>
        <member name="P:QDMS.DataSourceDisconnectEventArgs.Message">
            <summary>
            Message.
            </summary>
        </member>
        <member name="M:QDMS.DataSourceDisconnectEventArgs.#ctor(System.String,System.String)">
            <summary>
            Event arguments for a data source disconnection event.
            </summary>
        </member>
        <member name="T:QDMS.ErrorArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.ErrorArgs.#ctor(System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            Event args for error event.
            </summary>
        </member>
        <member name="P:QDMS.ErrorArgs.ErrorCode">
            <summary>
            Error code associated with this error.
            </summary>
        </member>
        <member name="P:QDMS.ErrorArgs.ErrorMessage">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="P:QDMS.ErrorArgs.RequestID">
            <summary>
            If this error concerns a specific request, its RequestID is given here.
            </summary>
        </member>
        <member name="T:QDMS.FoundFrontContractEventArgs">
            <summary>
            Used to provide data in response to a <see cref="T:QDMS.FrontContractRequest"/>
            </summary>
        </member>
        <member name="P:QDMS.FoundFrontContractEventArgs.ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.FoundFrontContractEventArgs.Instrument">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.FoundFrontContractEventArgs.Date">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.FoundFrontContractEventArgs.#ctor(System.Int32,QDMS.Instrument,System.DateTime)">
            <summary>
            
            </summary>
            <param name="id">Request ID</param>
            <param name="instrument">Instrument</param>
            <param name="date">Date on which we want to find what the front contract is</param>
        </member>
        <member name="T:QDMS.HistoricalDataEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.HistoricalDataEventArgs.#ctor(QDMS.HistoricalDataRequest,System.Collections.Generic.List{QDMS.OHLCBar})">
            <summary>
            Historical data event args.
            </summary>
        </member>
        <member name="M:QDMS.HistoricalDataEventArgs.#ctor">
            <summary>
            Parameterless constructor is needed for protobuf-net to properly serialize this object.
            </summary>
            
        </member>
        <member name="F:QDMS.HistoricalDataEventArgs.Request">
            <summary>
            The request that is being filled.
            </summary>
        </member>
        <member name="F:QDMS.HistoricalDataEventArgs.Data">
            <summary>
            The data.
            </summary>
        </member>
        <member name="T:QDMS.HistoricalTickDataEventArgs">
            <summary>
            </summary>
        </member>
        <member name="P:QDMS.HistoricalTickDataEventArgs.Instrument">
            <summary>
            </summary>
        </member>
        <member name="P:QDMS.HistoricalTickDataEventArgs.Ticks">
            <summary>
            </summary>
        </member>
        <member name="M:QDMS.HistoricalTickDataEventArgs.#ctor(QDMS.Instrument,System.Collections.Generic.List{QDMS.Tick})">
            <summary>
            </summary>
            <param name="instrument"></param>
            <param name="ticks"></param>
        </member>
        <member name="T:QDMS.LocallyAvailableDataInfoReceivedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.LocallyAvailableDataInfoReceivedEventArgs.Instrument">
            <summary>
            The instrument the request is for.
            </summary>
        </member>
        <member name="P:QDMS.LocallyAvailableDataInfoReceivedEventArgs.StorageInfo">
            <summary>
            List of StoredDataInfo objects, containing available frequencies and covered dates.
            </summary>
        </member>
        <member name="M:QDMS.LocallyAvailableDataInfoReceivedEventArgs.#ctor(QDMS.Instrument,System.Collections.Generic.List{QDMS.StoredDataInfo})">
            <summary>
            Event args for locally stored data info requests.
            </summary>
        </member>
        <member name="T:QDMS.RealTimeDataEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.RealTimeDataEventArgs.#ctor(System.Int32,QDMS.BarSize,System.Int64,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Int64,System.Double,System.Int32,System.Int32)">
            <summary>
            Real time bar event arguments.
            </summary>
            <param name="instrumentID"></param>
            <param name="frequency"></param>
            <param name="time">The time at the opening of the bar.</param>
            <param name="open"></param>
            <param name="high"></param>
            <param name="low"></param>
            <param name="close"></param>
            <param name="volume"></param>
            <param name="wap"></param>
            <param name="count"></param>
            <param name="requestID"></param>
        </member>
        <member name="M:QDMS.RealTimeDataEventArgs.#ctor">
            <summary>
            Parameterless constructor is needed for protobuf-net to properly serialize this object.
            </summary>
        </member>
        <member name="P:QDMS.RealTimeDataEventArgs.Close">
            <summary>
            Bar closing price.
            </summary>
        </member>
        <member name="P:QDMS.RealTimeDataEventArgs.Count">
            <summary>
            When TRADES historical data is returned, represents the number of trades that occurred during the time period the bar covers.
            </summary>
        </member>
        <member name="P:QDMS.RealTimeDataEventArgs.High">
            <summary>
            High price during the time covered by the bar.
            </summary>
        </member>
        <member name="P:QDMS.RealTimeDataEventArgs.Low">
            <summary>
            Low price during the time covered by the bar.
            </summary>
        </member>
        <member name="P:QDMS.RealTimeDataEventArgs.Open">
            <summary>
            Bar opening price.
            </summary>
        </member>
        <member name="P:QDMS.RealTimeDataEventArgs.InstrumentID">
            <summary>
            The ID of the instrument.
            </summary>
        </member>
        <member name="P:QDMS.RealTimeDataEventArgs.Time">
            <summary>
            The date-time stamp of the start of the bar.
            </summary>
        </member>
        <member name="P:QDMS.RealTimeDataEventArgs.Volume">
            <summary>
            Volume during the time covered by the bar.
            </summary>
        </member>
        <member name="P:QDMS.RealTimeDataEventArgs.Wap">
            <summary>
            Weighted average price during the time covered by the bar.
            </summary>
        </member>
        <member name="P:QDMS.RealTimeDataEventArgs.RequestID">
            <summary>
            The AssignedID of the original RealTimeDataRequest that started this stream.
            </summary>
        </member>
        <member name="T:QDMS.TickEventArgs">
            <summary>
                Used to surface real-time tick data
            </summary>
        </member>
        <member name="P:QDMS.TickEventArgs.Tick">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.TickEventArgs.#ctor(QDMS.Tick)">
            <summary>
            
            </summary>
            <param name="tick"></param>
        </member>
        <member name="M:QDMS.TickEventArgs.#ctor">
            <summary>
            For serialization
            </summary>
        </member>
        <member name="T:QDMS.DayOfWeekExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.DayOfWeekExtensions.ToInt(System.DayOfWeek)">
            <summary>
            Convert day of week to integer, with Monday as 0.
            </summary>
        </member>
        <member name="T:QDMS.DecimalExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.DecimalExtensions.CountDecimalPlaces(System.Decimal)">
            <summary>
            Returns the number of decimal places, ignoring trailing zeros.
            </summary>
        </member>
        <member name="T:QDMS.GenericExtensions">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="M:QDMS.GenericExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Returns distinct values in an IEnumerable based on a lamdba expression that tests for equality between elements.
            </summary>
        </member>
        <member name="M:QDMS.GenericExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Returns distinct values in an IEnumerable based on a lamdba expression that generates object hashes.
            </summary>
        </member>
        <member name="M:QDMS.GenericExtensions.MostFrequent``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the element that occurs most frequently in this collection.
            </summary>
        </member>
        <member name="M:QDMS.GenericExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Finds the index of the first occurence of an item matching the provided predicate
            </summary>
            <returns>The index if found, -1 if not found.</returns>
        </member>
        <member name="M:QDMS.GenericExtensions.RemoveAll``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all the elements that match the conditions defined by the specified predicate.
            </summary>
        </member>
        <member name="T:QDMS.InstrumentExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.InstrumentExtensions.SessionEndTimesByDay(QDMS.Instrument)">
            <summary>
            Gets the "ending" session's closing time, one for each day of the week.
            </summary>
        </member>
        <member name="M:QDMS.InstrumentExtensions.SessionStartTimesByDay(QDMS.Instrument)">
            <summary>
            Gets the "opening" session's opening time, one for each day of the week.
            Session could potentially be on a previous day.
            </summary>
            <returns>
            A dictionary with keys corresponding to DayOfTheWeek,
            and values of the opening session for that day.
            </returns>
        </member>
        <member name="T:QDMS.OHLCBarExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.OHLCBarExtensions.ToCSVFile(System.Collections.Generic.IEnumerable{QDMS.OHLCBar},System.String)">
            <summary>
            Save a collection of OHLCBars to a file, in CSV format.
            </summary>
        </member>
        <member name="T:QDMS.SessionExtensions">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:QDMS.SessionExtensions.ToInstrumentSession(QDMS.ISession)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:QDMS.SessionExtensions.Overlaps(QDMS.ISession,QDMS.ISession)">
            <summary>
            
            </summary>
            <param name="session1"></param>
            <param name="session2"></param>
            <returns></returns>
        </member>
        <member name="T:QDMS.StatsExtensions">
            <summary>
            Statistical utils
            </summary>
        </member>
        <member name="M:QDMS.StatsExtensions.QDMSStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            StDev
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:QDMS.StatsExtensions.QDMSStandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            StDev
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:QDMS.IContinuousFuturesBroker">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:QDMS.IContinuousFuturesBroker.RequestFrontContract(QDMS.Instrument,System.Nullable{System.DateTime})">
            <summary>
            Finds the currently active futures contract for a continuous futures instrument.
            The contract is returned asynchronously through the FoundFrontContract event.
            </summary>
            <returns>Returns an ID uniquely identifying this request.</returns>
        </member>
        <member name="E:QDMS.IContinuousFuturesBroker.FoundFrontContract">
            <summary>
            
            </summary>
        </member>
        <member name="T:QDMS.IDataStorage">
            <summary>
            Interface for storage of historical OHLC data
            </summary>
        </member>
        <member name="M:QDMS.IDataStorage.AddData(System.Collections.Generic.List{QDMS.OHLCBar},QDMS.Instrument,QDMS.BarSize,System.Boolean,System.Boolean)">
            <summary>
            Add data
            </summary>
            <param name="data"></param>
            <param name="instrument"></param>
            <param name="frequency"></param>
            <param name="overwrite"></param>
            <param name="adjust"></param>
        </member>
        <member name="M:QDMS.IDataStorage.AddDataAsync(System.Collections.Generic.List{QDMS.OHLCBar},QDMS.Instrument,QDMS.BarSize,System.Boolean)">
            <summary>
            This method allows adding data, but allowing the actual saving of the data to be delayed.
            Useful when you want to allow the data source the ability to make batch inserts/save to file/whatever on its own discretion.
            </summary>
            <param name="data"></param>
            <param name="instrument"></param>
            <param name="frequency"></param>
            <param name="overwrite"></param>
        </member>
        <member name="M:QDMS.IDataStorage.AddDataAsync(QDMS.OHLCBar,QDMS.Instrument,QDMS.BarSize,System.Boolean)">
            <summary>
            This method allows adding data, but allowing the actual saving of the data to be delayed.
            Useful when you want to allow the data source the ability to make batch inserts/save to file/whatever on its own discretion.
            </summary>
            <param name="data"></param>
            <param name="instrument"></param>
            <param name="frequency"></param>
            <param name="overwrite"></param>
        </member>
        <member name="M:QDMS.IDataStorage.UpdateData(System.Collections.Generic.List{QDMS.OHLCBar},QDMS.Instrument,QDMS.BarSize,System.Boolean)">
            <summary>
            Update existing data
            </summary>
            <param name="data"></param>
            <param name="instrument"></param>
            <param name="frequency"></param>
            <param name="adjust"></param>
        </member>
        <member name="M:QDMS.IDataStorage.GetData(QDMS.Instrument,System.DateTime,System.DateTime,QDMS.BarSize)">
            <summary>
            Request data
            </summary>
            <param name="instrument"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <param name="barSize"></param>
            <returns></returns>
        </member>
        <member name="M:QDMS.IDataStorage.DeleteAllInstrumentData(QDMS.Instrument)">
            <summary>
            Remove all data on an instrument
            </summary>
            <param name="instrument"></param>
        </member>
        <member name="M:QDMS.IDataStorage.DeleteData(QDMS.Instrument,QDMS.BarSize)">
            <summary>
            Remove all data on an instrument for a particular frequency
            </summary>
            <param name="instrument"></param>
            <param name="frequency"></param>
        </member>
        <member name="M:QDMS.IDataStorage.DeleteData(QDMS.Instrument,QDMS.BarSize,System.Collections.Generic.List{QDMS.OHLCBar})">
            <summary>
            Delete specific bars
            </summary>
            <param name="instrument"></param>
            <param name="frequency"></param>
            <param name="bars"></param>
        </member>
        <member name="M:QDMS.IDataStorage.GetStorageInfo(System.Int32)">
            <summary>
            Get info on what data is stored on a particular instrument
            </summary>
            <param name="instrumentID"></param>
            <returns></returns>
        </member>
        <member name="M:QDMS.IDataStorage.GetStorageInfo(System.Int32,QDMS.BarSize)">
            <summary>
            Get info on what data is stored on a particular instrument, for a particular frequency
            </summary>
            <param name="instrumentID"></param>
            <param name="barSize"></param>
            <returns></returns>
        </member>
        <member name="T:QDMS.IDividendDataSource">
            <summary>
            Interface for divident data sources
            </summary>
        </member>
        <member name="E:QDMS.IDividendDataSource.Error">
            <summary>
            Fires on any error.
            </summary>
        </member>
        <member name="P:QDMS.IDividendDataSource.Connected">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.IDividendDataSource.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.IDividendDataSource.Connect">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.IDividendDataSource.Disconnect">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.IDividendDataSource.RequestData(QDMS.DividendRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:QDMS.IEarningsAnnouncementSource">
            <summary>
            Interface for earnings announcement data sources
            </summary>
        </member>
        <member name="E:QDMS.IEarningsAnnouncementSource.Error">
            <summary>
            Fires on any error.
            </summary>
        </member>
        <member name="P:QDMS.IEarningsAnnouncementSource.Connected">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.IEarningsAnnouncementSource.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.IEarningsAnnouncementSource.Connect">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.IEarningsAnnouncementSource.Disconnect">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.IEarningsAnnouncementSource.RequestData(QDMS.EarningsAnnouncementRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:QDMS.IEconomicReleaseSource">
            <summary>
            Interface for economic release data sources
            </summary>
        </member>
        <member name="M:QDMS.IEconomicReleaseSource.RequestData(System.DateTime,System.DateTime)">
            <summary>
            
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="P:QDMS.IEconomicReleaseSource.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.IEconomicReleaseSource.Connected">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.IEconomicReleaseSource.Connect">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.IEconomicReleaseSource.Disconnect">
            <summary>
            
            </summary>
        </member>
        <member name="E:QDMS.IEconomicReleaseSource.Error">
            <summary>
            Fires on any error.
            </summary>
        </member>
        <member name="T:QDMS.IEntity">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="P:QDMS.IEntity.ID">
            <summary>
            
            </summary>
        </member>
        <member name="T:QDMS.IHistoricalDataSource">
            <summary>
            Interface for historical data sources
            </summary>
        </member>
        <member name="M:QDMS.IHistoricalDataSource.Connect">
            <summary>
            Connect to the data source.
            </summary>
        </member>
        <member name="M:QDMS.IHistoricalDataSource.Disconnect">
            <summary>
            Disconnect from the data source.
            </summary>
        </member>
        <member name="P:QDMS.IHistoricalDataSource.Connected">
            <summary>
            Whether the connection to the data source is up or not.
            </summary>
        </member>
        <member name="P:QDMS.IHistoricalDataSource.Name">
            <summary>
            The name of the data source.
            </summary>
        </member>
        <member name="M:QDMS.IHistoricalDataSource.RequestHistoricalData(QDMS.HistoricalDataRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
        </member>
        <member name="E:QDMS.IHistoricalDataSource.HistoricalDataArrived">
            <summary>
            Fires when data arrives
            </summary>
        </member>
        <member name="E:QDMS.IHistoricalDataSource.Error">
            <summary>
            Fires on any error.
            </summary>
        </member>
        <member name="E:QDMS.IHistoricalDataSource.Disconnected">
            <summary>
            Fires on disconnection from the data source.
            </summary>
        </member>
        <member name="T:QDMS.IJobSettings">
            <summary>
            Common settings for all job types
            </summary>
        </member>
        <member name="P:QDMS.IJobSettings.WeekDaysOnly">
            <summary>
            If true, updates will only happen monday through friday.
            </summary>
        </member>
        <member name="P:QDMS.IJobSettings.Time">
            <summary>
            The time when the job runs.
            </summary>
        </member>
        <member name="P:QDMS.IJobSettings.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:QDMS.IRealTimeDataSource">
            <summary>
            Provides real time OHLC bars
            </summary>
        </member>
        <member name="M:QDMS.IRealTimeDataSource.Connect">
            <summary>
            Connect to the data source.
            </summary>
        </member>
        <member name="M:QDMS.IRealTimeDataSource.Disconnect">
            <summary>
            Disconnect from the data source.
            </summary>
        </member>
        <member name="P:QDMS.IRealTimeDataSource.Connected">
            <summary>
            Whether the connection to the data source is up or not.
            </summary>
        </member>
        <member name="M:QDMS.IRealTimeDataSource.RequestRealTimeData(QDMS.RealTimeDataRequest)">
            <summary>
            Request real time data.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:QDMS.IRealTimeDataSource.CancelRealTimeData(System.Int32)">
            <summary>
            Cancel a real time data stream.
            </summary>
            <param name="requestID">The ID of the real time data stream.</param>
        </member>
        <member name="P:QDMS.IRealTimeDataSource.Name">
            <summary>
            The name of the data source.
            </summary>
        </member>
        <member name="E:QDMS.IRealTimeDataSource.DataReceived">
            <summary>
            Fires when new real bar time data is received.
            </summary>
        </member>
        <member name="E:QDMS.IRealTimeDataSource.TickReceived">
            <summary>
            Fires when new real tick time data is received.
            </summary>
        </member>
        <member name="E:QDMS.IRealTimeDataSource.Error">
            <summary>
            Fires on any error.
            </summary>
        </member>
        <member name="E:QDMS.IRealTimeDataSource.Disconnected">
            <summary>
            Fires on disconnection from the data source.
            </summary>
        </member>
        <member name="T:QDMS.ISession">
            <summary>
            Interface for sessions
            </summary>
        </member>
        <member name="P:QDMS.ISession.ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.ISession.OpeningTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.ISession.ClosingTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.ISession.OpeningAsSeconds">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.ISession.ClosingAsSeconds">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.ISession.IsSessionEnd">
            <summary>
            Is this the final session of the day? (some venues have morning and afternoon sessions)
            </summary>
        </member>
        <member name="P:QDMS.ISession.OpeningDay">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.ISession.ClosingDay">
            <summary>
            
            </summary>
        </member>
        <member name="T:QDMS.ITickDataSource">
            <summary>
            Data source interface for tick data
            </summary>
        </member>
        <member name="M:QDMS.ITickDataSource.Connect">
            <summary>
            Connect to the data source.
            </summary>
        </member>
        <member name="M:QDMS.ITickDataSource.Disconnect">
            <summary>
            Disconnect from the data source.
            </summary>
        </member>
        <member name="P:QDMS.ITickDataSource.Connected">
            <summary>
            Whether the connection to the data source is up or not.
            </summary>
        </member>
        <member name="P:QDMS.ITickDataSource.Name">
            <summary>
            The name of the data source.
            </summary>
        </member>
        <member name="E:QDMS.ITickDataSource.HistoricalDataArrived">
            <summary>
            Fires when data arrives
            </summary>
        </member>
        <member name="E:QDMS.ITickDataSource.RealTimeDataArrived">
            <summary>
            Fires when data arrives
            </summary>
        </member>
        <member name="E:QDMS.ITickDataSource.Error">
            <summary>
            Fires on any error.
            </summary>
        </member>
        <member name="E:QDMS.ITickDataSource.Disconnected">
            <summary>
            Fires on disconnection from the data source.
            </summary>
        </member>
        <member name="T:QDMS.ITickDataStorage">
            <summary>
                Interface for local storage of ticks
            </summary>
        </member>
        <member name="M:QDMS.ITickDataStorage.AddDataAsync(QDMS.TickEventArgs,System.Int32)">
            <summary>
            </summary>
            <param name="data"></param>
            <param name="instrumentId"></param>
        </member>
        <member name="M:QDMS.ITickDataStorage.RequestHistoricalData(QDMS.HistoricalDataRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:QDMS.ITickDataStorage.InitializeRealtimeDataStream(QDMS.Instrument)">
            <summary>
            Call before starting to send real time data to be stored
            </summary>
            <param name="instrument"></param>
        </member>
        <member name="M:QDMS.ITickDataStorage.DeleteData(QDMS.Instrument,System.DateTime,System.DateTime)">
            <summary>
            </summary>
            <param name="instrument"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
        </member>
        <member name="M:QDMS.ITickDataStorage.GetStorageInfo(System.Int32)">
            <summary>
                Get info on what data is stored on a particular instrument
            </summary>
            <param name="instrumentID"></param>
            <returns></returns>
        </member>
        <member name="E:QDMS.ITickDataStorage.HistoricalDataArrived">
            <summary>
            Fires when data arrives
            </summary>
        </member>
        <member name="E:QDMS.ITickDataStorage.Error">
            <summary>
            Fires on any error.
            </summary>
        </member>
        <member name="E:QDMS.ITickDataStorage.Disconnected">
            <summary>
            Fires on disconnection from the data source.
            </summary>
        </member>
        <member name="T:QDMS.DividendUpdateJobSettings">
            <summary>
            Settings for the job that automatically updates dividend data
            </summary>
        </member>
        <member name="P:QDMS.DividendUpdateJobSettings.BusinessDaysAhead">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.DividendUpdateJobSettings.BusinessDaysBack">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.DividendUpdateJobSettings.DataSource">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.DividendUpdateJobSettings.Name">
            <inheritdoc />
        </member>
        <member name="P:QDMS.DividendUpdateJobSettings.Tag">
            <summary>
            Tag.
            </summary>
        </member>
        <member name="P:QDMS.DividendUpdateJobSettings.TagID">
            <summary>
            If UseTag = true, instruments having this tag are updated.
            </summary>
        </member>
        <member name="P:QDMS.DividendUpdateJobSettings.Time">
            <inheritdoc />
        </member>
        <member name="P:QDMS.DividendUpdateJobSettings.UseTag">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.DividendUpdateJobSettings.WeekDaysOnly">
            <inheritdoc />
        </member>
        <member name="T:QDMS.EarningsUpdateJobSettings">
            <summary>
            Settings for the job that automatically updates earnings data
            </summary>
        </member>
        <member name="P:QDMS.EarningsUpdateJobSettings.BusinessDaysAhead">
            <summary>
            How many business days ahead should be requested
            </summary>
        </member>
        <member name="P:QDMS.EarningsUpdateJobSettings.BusinessDaysBack">
            <summary>
            How many business days back should be requested
            </summary>
        </member>
        <member name="P:QDMS.EarningsUpdateJobSettings.DataSource">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.EarningsUpdateJobSettings.Name">
            <inheritdoc />
        </member>
        <member name="P:QDMS.EarningsUpdateJobSettings.Tag">
            <summary>
            Tag.
            </summary>
        </member>
        <member name="P:QDMS.EarningsUpdateJobSettings.TagID">
            <summary>
            If UseTag = true, instruments having this tag are updated.
            </summary>
        </member>
        <member name="P:QDMS.EarningsUpdateJobSettings.Time">
            <inheritdoc />
        </member>
        <member name="P:QDMS.EarningsUpdateJobSettings.UseTag">
            <summary>
            Use tags to filter which instruments are updated
            </summary>
        </member>
        <member name="P:QDMS.EarningsUpdateJobSettings.WeekDaysOnly">
            <inheritdoc />
        </member>
        <member name="T:QDMS.EconomicReleaseUpdateJobSettings">
            <summary>
            Settings for the job that automatically updates economic release data
            </summary>
        </member>
        <member name="P:QDMS.EconomicReleaseUpdateJobSettings.WeekDaysOnly">
            <inheritdoc />
        </member>
        <member name="P:QDMS.EconomicReleaseUpdateJobSettings.Time">
            <inheritdoc />
        </member>
        <member name="P:QDMS.EconomicReleaseUpdateJobSettings.Name">
            <inheritdoc />
        </member>
        <member name="P:QDMS.EconomicReleaseUpdateJobSettings.BusinessDaysBack">
            <summary>
            How many business days back should be requested
            </summary>
        </member>
        <member name="P:QDMS.EconomicReleaseUpdateJobSettings.BusinessDaysAhead">
            <summary>
            How many business days ahead should be requested
            </summary>
        </member>
        <member name="P:QDMS.EconomicReleaseUpdateJobSettings.DataSource">
            <summary>
            
            </summary>
        </member>
        <member name="T:QDMS.MessageType">
            <summary>
            Holds message type strings used for communicating between clients and server
            </summary>
        </member>
        <member name="F:QDMS.MessageType.HistPush">
            <summary>
            Push historical data from client to server
            </summary>
        </member>
        <member name="F:QDMS.MessageType.HistPushReply">
            <summary>
            Reply to push request.
            </summary>
        </member>
        <member name="F:QDMS.MessageType.HistRequest">
            <summary>
            Historical data request
            </summary>
        </member>
        <member name="F:QDMS.MessageType.HistReply">
            <summary>
            Reply to historical data request
            </summary>
        </member>
        <member name="F:QDMS.MessageType.RTDRequest">
            <summary>
            Real time data request
            </summary>
        </member>
        <member name="F:QDMS.MessageType.CancelRTD">
            <summary>
            Cancel real time data stream
            </summary>
        </member>
        <member name="F:QDMS.MessageType.RTDCanceled">
            <summary>
            Successful real time data stream cancelation
            </summary>
        </member>
        <member name="F:QDMS.MessageType.Search">
            <summary>
            Instrument search request
            </summary>
        </member>
        <member name="F:QDMS.MessageType.PredicateSearch">
            <summary>
            Instrument search request with a predicate
            </summary>
        </member>
        <member name="F:QDMS.MessageType.AllInstruments">
            <summary>
            Request for all instruments
            </summary>
        </member>
        <member name="F:QDMS.MessageType.AddInstrument">
            <summary>
            Request to add an instrument to the db
            </summary>
        </member>
        <member name="F:QDMS.MessageType.RealTimeBars">
            <summary>
            Sent ahead of real time bar messages
            </summary>
        </member>
        <member name="F:QDMS.MessageType.RealTimeTick">
            <summary>
            Sent ahead of real time tick messages
            </summary>
        </member>
        <member name="F:QDMS.MessageType.Ping">
            <summary>
            Ping
            </summary>
        </member>
        <member name="F:QDMS.MessageType.Pong">
            <summary>
            Ping reply
            </summary>
        </member>
        <member name="F:QDMS.MessageType.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:QDMS.MessageType.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="T:QDMS.RealTimeStreamInfo">
            <summary>
                Holds information on a real time data stream.
                Used to display the "running" streams in the server UI.
            </summary>
        </member>
        <member name="P:QDMS.RealTimeStreamInfo.RequestID">
            <summary>
            </summary>
        </member>
        <member name="P:QDMS.RealTimeStreamInfo.Datasource">
            <summary>
            </summary>
        </member>
        <member name="P:QDMS.RealTimeStreamInfo.Instrument">
            <summary>
            </summary>
        </member>
        <member name="P:QDMS.RealTimeStreamInfo.Frequency">
            <summary>
            </summary>
        </member>
        <member name="P:QDMS.RealTimeStreamInfo.RTHOnly">
            <summary>
            </summary>
        </member>
        <member name="M:QDMS.RealTimeStreamInfo.#ctor(QDMS.Instrument,System.Int32,System.String,QDMS.BarSize,System.Boolean)">
            <summary>
            </summary>
            <param name="instrument"></param>
            <param name="requestID"></param>
            <param name="datasource"></param>
            <param name="frequency"></param>
            <param name="rthOnly"></param>
        </member>
        <member name="M:QDMS.RealTimeStreamInfo.Equals(QDMS.RealTimeStreamInfo)">
            <summary>
            </summary>
            <param name="compare"></param>
            <returns></returns>
        </member>
        <member name="T:QDMS.DataAdditionRequest">
            <summary>
            A request to add data to the database
            </summary>
        </member>
        <member name="P:QDMS.DataAdditionRequest.Frequency">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.DataAdditionRequest.Instrument">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.DataAdditionRequest.Data">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.DataAdditionRequest.Overwrite">
            <summary>
            If set to true, will overwrite existing data
            </summary>
        </member>
        <member name="P:QDMS.DataAdditionRequest.AdjustData">
            <summary>
            If set to true, all adjusted values will be re-calculated
            </summary>
        </member>
        <member name="M:QDMS.DataAdditionRequest.#ctor">
            <summary>
            For serialization use
            </summary>
        </member>
        <member name="M:QDMS.DataAdditionRequest.#ctor(QDMS.BarSize,QDMS.Instrument,System.Collections.Generic.List{QDMS.OHLCBar},System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="frequency"></param>
            <param name="instrument"></param>
            <param name="data"></param>
            <param name="overwrite"></param>
            <param name="adjust"></param>
        </member>
        <member name="M:QDMS.DataAdditionRequest.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:QDMS.DividendRequest">
            <summary>
            Request for dividend data
            </summary>
        </member>
        <member name="M:QDMS.DividendRequest.#ctor(System.DateTime,System.DateTime,QDMS.DataLocation,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="fromDate"></param>
            <param name="toDate"></param>
            <param name="dataLocation"></param>
            <param name="symbol">Leave empty to get all symbols</param>
            <param name="dataSource">Leave empty to use default</param>
        </member>
        <member name="M:QDMS.DividendRequest.#ctor(System.DateTime,System.DateTime,System.Collections.Generic.List{System.String},QDMS.DataLocation,System.String)">
            <summary>
            
            </summary>
            <param name="fromDate"></param>
            <param name="toDate"></param>
            <param name="dataLocation"></param>
            <param name="symbols">Request multiple symbols at once</param>
            <param name="dataSource">Leave empty to use default</param>
        </member>
        <member name="M:QDMS.DividendRequest.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.DividendRequest.FromDate">
            <summary>
            Cutoff for the ex-date
            </summary>
        </member>
        <member name="P:QDMS.DividendRequest.ToDate">
            <summary>
            Cutoff for the ex-date
            </summary>
        </member>
        <member name="P:QDMS.DividendRequest.Symbol">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.DividendRequest.DataLocation">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.DividendRequest.DataSource">
            <summary>
            If this is not specified, the default datasource will be used.
            </summary>
        </member>
        <member name="T:QDMS.EarningsAnnouncementRequest">
            <summary>
            Request for earnings announcement data
            </summary>
        </member>
        <member name="M:QDMS.EarningsAnnouncementRequest.#ctor(System.DateTime,System.DateTime,QDMS.DataLocation,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="fromDate"></param>
            <param name="toDate"></param>
            <param name="dataLocation"></param>
            <param name="symbol">Leave empty to get all symbols</param>
            <param name="dataSource">Leave empty to use default</param>
        </member>
        <member name="M:QDMS.EarningsAnnouncementRequest.#ctor(System.DateTime,System.DateTime,System.Collections.Generic.List{System.String},QDMS.DataLocation,System.String)">
            <summary>
            
            </summary>
            <param name="fromDate"></param>
            <param name="toDate"></param>
            <param name="dataLocation"></param>
            <param name="symbol">Leave empty to get all symbols</param>
            <param name="dataSource">Leave empty to use default</param>
        </member>
        <member name="M:QDMS.EarningsAnnouncementRequest.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.EarningsAnnouncementRequest.FromDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.EarningsAnnouncementRequest.ToDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.EarningsAnnouncementRequest.Symbol">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.EarningsAnnouncementRequest.DataLocation">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.EarningsAnnouncementRequest.DataSource">
            <summary>
            If this is not specified, the default datasource will be used.
            </summary>
        </member>
        <member name="T:QDMS.EconomicReleaseRequest">
            <summary>
            Request for economic release data
            </summary>
        </member>
        <member name="M:QDMS.EconomicReleaseRequest.#ctor(System.DateTime,QDMS.DataLocation,System.Linq.Expressions.Expression{System.Func{QDMS.EconomicRelease,System.Boolean}},System.String)">
            <summary>
            Request data for a single day
            </summary>
            <param name="date">The date, in UTC</param>
            <param name="dataLocation"></param>
            <param name="filter">Specify a filter. Only releases matching this filter will be returned.</param>
            <param name="dataSource">Specify a specific datasource. Otherwise the default one will be used.</param>
        </member>
        <member name="M:QDMS.EconomicReleaseRequest.#ctor(System.DateTime,System.DateTime,QDMS.DataLocation,System.Linq.Expressions.Expression{System.Func{QDMS.EconomicRelease,System.Boolean}},System.String)">
            <summary>
            Request data for a period
            </summary>
            <param name="fromDate">The start of the period, in UTC</param>
            <param name="toDate">The end of the period, in UTC</param>
            <param name="dataLocation"></param>
            <param name="filter">Specify a filter. Only releases matching this filter will be returned.</param>
            <param name="dataSource">Specify a specific datasource. Otherwise the default one will be used.</param>
            <exception cref="T:System.ArgumentException">fromDate must be before toDate</exception>
        </member>
        <member name="M:QDMS.EconomicReleaseRequest.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.EconomicReleaseRequest.DataLocation">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.EconomicReleaseRequest.DataSource">
            <summary>
            If this is not specified, the default datasource will be used.
            </summary>
        </member>
        <member name="P:QDMS.EconomicReleaseRequest.Filter">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.EconomicReleaseRequest.SerializedFilter">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.EconomicReleaseRequest.FromDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.EconomicReleaseRequest.ToDate">
            <summary>
            
            </summary>
        </member>
        <member name="T:QDMS.FrontContractRequest">
            <summary>
            A request to find what the front contract for a future is, at a particular date
            </summary>
        </member>
        <member name="P:QDMS.FrontContractRequest.ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.FrontContractRequest.Instrument">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.FrontContractRequest.Date">
            <summary>
            If set to null, the front contract for today will be returned
            </summary>
        </member>
        <member name="T:QDMS.HistoricalDataRequest">
            <summary>
            Request for historical OHLC data
            </summary>
        </member>
        <member name="P:QDMS.HistoricalDataRequest.Frequency">
            <summary>
            The frequency of the data.
            </summary>
        </member>
        <member name="P:QDMS.HistoricalDataRequest.Instrument">
            <summary>
            The instrument whose data you want.
            </summary>
        </member>
        <member name="P:QDMS.HistoricalDataRequest.StartingDate">
            <summary>
            Inclusive starting date for the period requested.
            </summary>
        </member>
        <member name="P:QDMS.HistoricalDataRequest.EndingDate">
            <summary>
            Inclusive ending date for the period requested.
            </summary>
        </member>
        <member name="P:QDMS.HistoricalDataRequest.DataLocation">
            <summary>
            Determines where the data will be downloaded from:
            Local only, external only (force fresh download), 
            or both (data not availablle locally will be downloaded)
            </summary>
        </member>
        <member name="P:QDMS.HistoricalDataRequest.SaveDataToStorage">
            <summary>
            If this is true, any data received from the external data source will be saved to local storage.
            </summary>
        </member>
        <member name="P:QDMS.HistoricalDataRequest.RTHOnly">
            <summary>
            If this is true, only data from regular trading hours will be returned.
            </summary>
        </member>
        <member name="P:QDMS.HistoricalDataRequest.RequestID">
            <summary>
            This value is used on the client side to uniquely identify historical data requests.
            </summary>
        </member>
        <member name="P:QDMS.HistoricalDataRequest.AssignedID">
            <summary>
            The historical data broker gives the request an ID, which is then used to identify it when the data is returned.
            </summary>
        </member>
        <member name="P:QDMS.HistoricalDataRequest.IsSubrequestFor">
            <summary>
            This property references the "parent" request's AssignedID
            </summary>
        </member>
        <member name="P:QDMS.HistoricalDataRequest.RequesterIdentity">
            <summary>
            The server assigns the requester's zeromq identity string to this property 
            so the data can be sent back to the correct client when it arrives.
            </summary>
        </member>
        <member name="M:QDMS.HistoricalDataRequest.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.HistoricalDataRequest.#ctor(QDMS.Instrument,QDMS.BarSize,System.DateTime,System.DateTime,QDMS.DataLocation,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            
            </summary>
            <param name="instrument"></param>
            <param name="frequency"></param>
            <param name="startingDate"></param>
            <param name="endingDate"></param>
            <param name="dataLocation"></param>
            <param name="saveToLocalStorage"></param>
            <param name="rthOnly"></param>
            <param name="requestID"></param>
        </member>
        <member name="M:QDMS.HistoricalDataRequest.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:QDMS.PredicateSearchRequest">
            <summary>
            For internal use. Used to send predicate filter requests
            </summary>
        </member>
        <member name="M:QDMS.PredicateSearchRequest.#ctor">
            <summary>
            For serialization use
            </summary>
        </member>
        <member name="M:QDMS.PredicateSearchRequest.#ctor(System.Linq.Expressions.Expression{System.Func{QDMS.Instrument,System.Boolean}})">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="P:QDMS.PredicateSearchRequest.Filter">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.PredicateSearchRequest.SerializedFilter">
            <summary>
            
            </summary>
        </member>
        <member name="T:QDMS.RealTimeDataRequest">
            <summary>
            Request to start a real time data stream
            </summary>
        </member>
        <member name="P:QDMS.RealTimeDataRequest.Frequency">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.RealTimeDataRequest.RTHOnly">
            <summary>
            Regular trading hours data only.
            </summary>
        </member>
        <member name="P:QDMS.RealTimeDataRequest.Instrument">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.RealTimeDataRequest.SaveToLocalStorage">
            <summary>
            Save incoming data to local storage.
            </summary>
        </member>
        <member name="P:QDMS.RealTimeDataRequest.FallBack">
            <summary>
            If the data stream for the requested instrument fails, fall back to this one instead.
            </summary>
        </member>
        <member name="P:QDMS.RealTimeDataRequest.RequestID">
            <summary>
            This value is used on the client side to uniquely identify real time data requests.
            </summary>
        </member>
        <member name="P:QDMS.RealTimeDataRequest.AssignedID">
            <summary>
            The real time data broker gives the request an ID, which is then used to identify it when the data is returned.
            </summary>
        </member>
        <member name="M:QDMS.RealTimeDataRequest.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:QDMS.RealTimeDataRequest.#ctor(QDMS.Instrument,QDMS.BarSize,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="instrument"></param>
            <param name="frequency"></param>
            <param name="rthOnly"></param>
            <param name="savetoLocalStorage"></param>
        </member>
        <member name="M:QDMS.RealTimeDataRequest.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:QDMS.StoredDataInfo">
            <summary>
            Holds information on what data is available in local storage
            </summary>
        </member>
        <member name="P:QDMS.StoredDataInfo.InstrumentID">
            <summary>
            Instrument id
            </summary>
        </member>
        <member name="P:QDMS.StoredDataInfo.Frequency">
            <summary>
            The data frequency
            </summary>
        </member>
        <member name="P:QDMS.StoredDataInfo.EarliestDate">
            <summary>
            Starting date for data
            </summary>
        </member>
        <member name="P:QDMS.StoredDataInfo.LatestDate">
            <summary>
            Ending date for data
            </summary>
        </member>
        <member name="P:QDMS.StoredDataInfo.EarliestDateAsLong">
            <summary>
            Date as long
            </summary>
        </member>
        <member name="P:QDMS.StoredDataInfo.LatestDateAsLong">
            <summary>
            Date as long
            </summary>
        </member>
        <member name="T:QDMS.Tick">
            <summary>
            Represents one tick
            </summary>
        </member>
        <member name="F:QDMS.Tick.Time">
            <summary>
                Event time
            </summary>
        </member>
        <member name="F:QDMS.Tick.Last">
            <summary>
                Last trade price
            </summary>
        </member>
        <member name="F:QDMS.Tick.Bid">
            <summary>
                Bid price at event time
            </summary>
        </member>
        <member name="F:QDMS.Tick.Ask">
            <summary>
                Ask price at event time
            </summary>
        </member>
        <member name="F:QDMS.Tick.LastQuantity">
            <summary>
                Quantity of the last trade
            </summary>
        </member>
        <member name="F:QDMS.Tick.BidQuantity">
            <summary>
                Quantity available at the bid
            </summary>
        </member>
        <member name="F:QDMS.Tick.AskQuantity">
            <summary>
                Quantity available at the ask
            </summary>
        </member>
        <member name="F:QDMS.Tick.TickType">
            <summary>
                Event type
            </summary>
        </member>
        <member name="F:QDMS.Tick.OddLot">
            <summary>
                True if odd lot
            </summary>
        </member>
        <member name="F:QDMS.Tick.ExchangeCode">
            <summary>
                Indicates exchange tick origin
            </summary>
        </member>
        <member name="F:QDMS.Tick.Symbol">
            <summary>
                Symbol
            </summary>
        </member>
        <member name="F:QDMS.Tick.InstrumentID">
            <summary>
                The ID of the instrument.
            </summary>
        </member>
        <member name="M:QDMS.Tick.#ctor(System.Int64,QDMS.TickType,System.String,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="tickType"></param>
            <param name="symbol"></param>
            <param name="instrumentId"></param>
            <param name="last"></param>
            <param name="bid"></param>
            <param name="ask"></param>
            <param name="lastQuantity"></param>
            <param name="bidQuantity"></param>
            <param name="askQuantity"></param>
            <param name="oddLot"></param>
            <param name="exchangeCode"></param>
        </member>
        <member name="T:QDMS.TimeSeries">
            <summary>
            Used internally for continuous futures construction
            </summary>
        </member>
        <member name="M:QDMS.TimeSeries.#ctor(System.Collections.Generic.IEnumerable{QDMS.OHLCBar})">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:QDMS.TimeSeries.Series">
            <summary>
            The data series, which is held in a list.
            </summary>
        </member>
        <member name="P:QDMS.TimeSeries.CurrentBar">
            <summary>
            Get the value of the current bar.
            </summary>
        </member>
        <member name="F:QDMS.TimeSeries.PreviousBar">
            <summary>
            
            </summary>
        </member>
        <member name="P:QDMS.TimeSeries.ReachedEndOfSeries">
            <summary>
            Returns true if CurrentBar at the end of the timeseries.
            </summary>
        </member>
        <member name="P:QDMS.TimeSeries.Count">
            <summary>
            Length of the variable series.
            </summary>
        </member>
        <member name="P:QDMS.TimeSeries.Item(System.Int32)">
            <summary>
            Indexer access to current and past values of the VariableSeries.
            </summary>
        </member>
        <member name="P:QDMS.TimeSeries.Value">
            <summary>
            Provides get/set access to the "current" value of the VariableSeries.
            </summary>
        </member>
        <member name="M:QDMS.TimeSeries.TryGetNextBar">
            <summary>
            Returns the bar following the "current" one. CAREFUL WITH SNOOPING!
            </summary>
        </member>
        <member name="M:QDMS.TimeSeries.AdvanceTo(System.DateTime)">
            <summary>
            Progress the "current" time of the VariableSeries to the specified date and time.
            </summary>
            <returns>True if the CurrentBar was changed</returns>
        </member>
        <member name="M:QDMS.TimeSeries.NextBar">
            <summary>
            Moves the current bar to the next one. Returns true if successful, false if the series is at its end.
            </summary>
            <returns></returns>
        </member>
        <member name="T:QDMS.Utils.EnumDescConverter">
            <summary>
            EnumConverter supporting System.ComponentModel.DescriptionAttribute
            </summary>
        </member>
        <member name="F:QDMS.Utils.EnumDescConverter.enumLookup">
            <summary>
            Cache of enumerables
            </summary>
        </member>
        <member name="T:QDMS.Utils.EnumDescConverter.EnumTuple">
            <summary>
            Enum Tuple
            </summary>
        </member>
        <member name="F:QDMS.Utils.EnumDescConverter.EnumTuple.EnumType">
            <summary>
            Enum Type
            </summary>
        </member>
        <member name="F:QDMS.Utils.EnumDescConverter.EnumTuple.EnumToString">
            <summary>
            Enumeration to String
            </summary>
        </member>
        <member name="F:QDMS.Utils.EnumDescConverter.EnumTuple.DescriptionToEnum">
            <summary>
            String to Enumeration
            </summary>
        </member>
        <member name="F:QDMS.Utils.EnumDescConverter.EnumTuple.NameToEnum">
            <summary>
            Name to enum
            </summary>
        </member>
        <member name="M:QDMS.Utils.EnumDescConverter.#cctor">
            <summary>
            Constructor to create caches
            </summary>
        </member>
        <member name="M:QDMS.Utils.EnumDescConverter.GetEnumDescription(System.Enum)">
            <summary>
            Gets Enum Value's Description Attribute
            </summary>
            <param name="value">The value you want the description attribute for</param>
            <returns>The description, if any, else it's .ToString()</returns>
        </member>
        <member name="M:QDMS.Utils.EnumDescConverter.GetEnumValue(System.Type,System.String)">
            <summary>
            Gets the value of an Enum, based on it's Description Attribute or named value
            </summary>
            <param name="value">The Enum type</param>
            <param name="description">The description or name of the element</param>
            <returns>The value, or the passed in description, if it was not found</returns>
        </member>
        <member name="T:QDMS.Utils.PriceAdjuster">
            <summary>
            Takes OHLC bars and produces adjusted prices for dividends and splits.
            </summary>
        </member>
        <member name="M:QDMS.Utils.PriceAdjuster.AdjustData(System.Collections.Generic.List{QDMS.OHLCBar}@)">
            <summary>
            Adjusts OHLC data for dividends and splits.
            </summary>
        </member>
        <member name="T:QDMS.ExpressionSerializer">
            <summary>
            Used internally to serialize LINQ expressions
            </summary>
        </member>
        <member name="M:QDMS.ExpressionSerializer.Serialize``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:QDMS.ExpressionSerializer.Deserialize``1(System.String)">
            <summary>
            
            </summary>
            <param name="serialized"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:QDMS.LambdaEqualityComparer`1">
            <summary>
            Used internally
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:QDMS.LambdaEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
            
            </summary>
            <param name="equalityFunc"></param>
        </member>
        <member name="M:QDMS.LambdaEqualityComparer`1.#ctor(System.Func{`0,System.Int32})">
            <summary>
            
            </summary>
            <param name="hashFunc"></param>
        </member>
        <member name="M:QDMS.LambdaEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            
            </summary>
            <param name="equalityFunc"></param>
            <param name="hashFunc"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:QDMS.LambdaEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="x"/> and <paramref name="y"/> are of different types and neither one can handle comparisons with the other.</exception>
        </member>
        <member name="M:QDMS.LambdaEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:QDMS.MyUtils">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="M:QDMS.MyUtils.Ordinal(System.Int32)">
            <summary>
            Returns a string with the ordinal suffix of a number, i.e. 1 -> "1st"
            </summary>
        </member>
        <member name="M:QDMS.MyUtils.GetFuturesContractSymbol(System.String,System.Int32,System.Int32)">
            <summary>
            Given the root symbol, year, and month, returns a string of the future contract symbol
            based on the US letter-based month system.
            </summary>
        </member>
        <member name="M:QDMS.MyUtils.GetCalendarFromCountryCode(System.String)">
            <summary>
            Gets a calendar from a 2-letter country code.
            </summary>
        </member>
        <member name="M:QDMS.MyUtils.ConvertToTimestamp(System.DateTime)">
            <summary>
            Converts a datetime to a UNIX epoch-based timestamp.
            </summary>
        </member>
        <member name="M:QDMS.MyUtils.ConvertToMillisecondTimestamp(System.DateTime)">
            <summary>
            Epoch is in UTC, input DateTime should also be in UTC.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QDMS.MyUtils.TimestampToDateTime(System.Int64)">
            <summary>
            Seconds after epoch
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:QDMS.MyUtils.TimestampToDateTimeByMillisecond(System.Int64)">
            <summary>
            Milliseconds after epoch
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:QDMS.MyUtils.GetEnumValues``1">
            <summary>
            Returns an IEnumerable of all possible values of an Enum.
            </summary>
        </member>
        <member name="M:QDMS.MyUtils.ProtoBufSerialize(System.Object,System.IO.MemoryStream)">
            <summary>
            Serialize object using protocol buffers.
            </summary>
        </member>
        <member name="M:QDMS.MyUtils.ProtoBufDeserialize``1(System.Byte[],System.IO.MemoryStream)">
            <summary>
            Deserialize object of type T using protocol buffers.
            </summary>
        </member>
        <member name="M:QDMS.MyUtils.ToTimeSpan(QDMS.BarSize)">
            <summary>
            Converts a BarSize to its corresponding timespan.
            </summary>
        </member>
        <member name="M:QDMS.MyUtils.ToBarSize(System.TimeSpan)">
            <summary>
            Converts a timespan to its corresponding BarSize, if possible.
            </summary>
        </member>
        <member name="M:QDMS.MyUtils.BusinessDaysBetween(System.DateTime,System.DateTime,QLNet.Calendar)">
            <summary>
            Returns the unmber of business days between two dates, not including the final day.
            </summary>
        </member>
        <member name="M:QDMS.MyUtils.SetSessionTimes(System.Collections.Generic.IEnumerable{QDMS.OHLCBar},QDMS.Instrument)">
            <summary>
            Sets bar open and closing times to the opening and closing of the day's sessions
            </summary>
            <param name="bars"></param>
            <param name="instrument"></param>
        </member>
        <member name="M:QDMS.MyUtils.ValidateSessions``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{System.String}@)">
            <summary>
            Ensure that no sessions in the collection overlap.
            </summary>
            <returns>True if validation succeeded, false if there were errors</returns>
        </member>
    </members>
</doc>
